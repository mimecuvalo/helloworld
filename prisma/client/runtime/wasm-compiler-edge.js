/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */
'use strict';
var Gu = Object.create;
var Gr = Object.defineProperty;
var Hu = Object.getOwnPropertyDescriptor;
var Wu = Object.getOwnPropertyNames;
var Ju = Object.getPrototypeOf,
  Ku = Object.prototype.hasOwnProperty;
var fe = (e, t) => () => (e && (t = e((e = 0))), t);
var se = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports),
  pt = (e, t) => {
    for (var r in t) Gr(e, r, { get: t[r], enumerable: !0 });
  },
  So = (e, t, r, n) => {
    if ((t && typeof t == 'object') || typeof t == 'function')
      for (let i of Wu(t))
        !Ku.call(e, i) && i !== r && Gr(e, i, { get: () => t[i], enumerable: !(n = Hu(t, i)) || n.enumerable });
    return e;
  };
var _e = (e, t, r) => (
    (r = e != null ? Gu(Ju(e)) : {}),
    So(t || !e || !e.__esModule ? Gr(r, 'default', { value: e, enumerable: !0 }) : r, e)
  ),
  Io = (e) => So(Gr({}, '__esModule', { value: !0 }), e);
function Xn(e, t) {
  if (((t = t.toLowerCase()), t === 'utf8' || t === 'utf-8')) return new h(Xu.encode(e));
  if (t === 'base64' || t === 'base64url')
    return (
      (e = e.replace(/-/g, '+').replace(/_/g, '/')),
      (e = e.replace(/[^A-Za-z0-9+/]/g, '')),
      new h([...atob(e)].map((r) => r.charCodeAt(0)))
    );
  if (t === 'binary' || t === 'ascii' || t === 'latin1' || t === 'latin-1')
    return new h([...e].map((r) => r.charCodeAt(0)));
  if (t === 'ucs2' || t === 'ucs-2' || t === 'utf16le' || t === 'utf-16le') {
    let r = new h(e.length * 2),
      n = new DataView(r.buffer);
    for (let i = 0; i < e.length; i++) n.setUint16(i * 2, e.charCodeAt(i), !0);
    return r;
  }
  if (t === 'hex') {
    let r = new h(e.length / 2);
    for (let n = 0, i = 0; i < e.length; i += 2, n++) r[n] = parseInt(e.slice(i, i + 2), 16);
    return r;
  }
  ko(`encoding "${t}"`);
}
function zu(e) {
  let r = Object.getOwnPropertyNames(DataView.prototype).filter((a) => a.startsWith('get') || a.startsWith('set')),
    n = r.map((a) => a.replace('get', 'read').replace('set', 'write')),
    i = (a, f) =>
      function (w = 0) {
        return (
          z(w, 'offset'),
          pe(w, 'offset'),
          Z(w, 'offset', this.length - 1),
          new DataView(this.buffer)[r[a]](w, f)
        );
      },
    o = (a, f) =>
      function (w, v = 0) {
        let A = r[a].match(/set(\w+\d+)/)[1].toLowerCase(),
          R = Zu[A];
        return (
          z(v, 'offset'),
          pe(v, 'offset'),
          Z(v, 'offset', this.length - 1),
          Yu(w, 'value', R[0], R[1]),
          new DataView(this.buffer)[r[a]](v, w, f),
          v + parseInt(r[a].match(/\d+/)[0]) / 8
        );
      },
    s = (a) => {
      a.forEach((f) => {
        (f.includes('Uint') && (e[f.replace('Uint', 'UInt')] = e[f]),
          f.includes('Float64') && (e[f.replace('Float64', 'Double')] = e[f]),
          f.includes('Float32') && (e[f.replace('Float32', 'Float')] = e[f]));
      });
    };
  n.forEach((a, f) => {
    (a.startsWith('read') && ((e[a] = i(f, !1)), (e[a + 'LE'] = i(f, !0)), (e[a + 'BE'] = i(f, !1))),
      a.startsWith('write') && ((e[a] = o(f, !1)), (e[a + 'LE'] = o(f, !0)), (e[a + 'BE'] = o(f, !1))),
      s([a, a + 'LE', a + 'BE']));
  });
}
function ko(e) {
  throw new Error(`Buffer polyfill does not implement "${e}"`);
}
function Hr(e, t) {
  if (!(e instanceof Uint8Array))
    throw new TypeError(`The "${t}" argument must be an instance of Buffer or Uint8Array`);
}
function Z(e, t, r = rc + 1) {
  if (e < 0 || e > r) {
    let n = new RangeError(`The value of "${t}" is out of range. It must be >= 0 && <= ${r}. Received ${e}`);
    throw ((n.code = 'ERR_OUT_OF_RANGE'), n);
  }
}
function z(e, t) {
  if (typeof e != 'number') {
    let r = new TypeError(`The "${t}" argument must be of type number. Received type ${typeof e}.`);
    throw ((r.code = 'ERR_INVALID_ARG_TYPE'), r);
  }
}
function pe(e, t) {
  if (!Number.isInteger(e) || Number.isNaN(e)) {
    let r = new RangeError(`The value of "${t}" is out of range. It must be an integer. Received ${e}`);
    throw ((r.code = 'ERR_OUT_OF_RANGE'), r);
  }
}
function Yu(e, t, r, n) {
  if (e < r || e > n) {
    let i = new RangeError(`The value of "${t}" is out of range. It must be >= ${r} and <= ${n}. Received ${e}`);
    throw ((i.code = 'ERR_OUT_OF_RANGE'), i);
  }
}
function Oo(e, t) {
  if (typeof e != 'string') {
    let r = new TypeError(`The "${t}" argument must be of type string. Received type ${typeof e}`);
    throw ((r.code = 'ERR_INVALID_ARG_TYPE'), r);
  }
}
function nc(e, t = 'utf8') {
  return h.from(e, t);
}
var h,
  Zu,
  Xu,
  ec,
  tc,
  rc,
  y,
  ei,
  u = fe(() => {
    'use strict';
    h = class e extends Uint8Array {
      _isBuffer = !0;
      get offset() {
        return this.byteOffset;
      }
      static alloc(t, r = 0, n = 'utf8') {
        return (Oo(n, 'encoding'), e.allocUnsafe(t).fill(r, n));
      }
      static allocUnsafe(t) {
        return e.from(t);
      }
      static allocUnsafeSlow(t) {
        return e.from(t);
      }
      static isBuffer(t) {
        return t && !!t._isBuffer;
      }
      static byteLength(t, r = 'utf8') {
        if (typeof t == 'string') return Xn(t, r).byteLength;
        if (t && t.byteLength) return t.byteLength;
        let n = new TypeError('The "string" argument must be of type string or an instance of Buffer or ArrayBuffer.');
        throw ((n.code = 'ERR_INVALID_ARG_TYPE'), n);
      }
      static isEncoding(t) {
        return tc.includes(t);
      }
      static compare(t, r) {
        (Hr(t, 'buff1'), Hr(r, 'buff2'));
        for (let n = 0; n < t.length; n++) {
          if (t[n] < r[n]) return -1;
          if (t[n] > r[n]) return 1;
        }
        return t.length === r.length ? 0 : t.length > r.length ? 1 : -1;
      }
      static from(t, r = 'utf8') {
        if (t && typeof t == 'object' && t.type === 'Buffer') return new e(t.data);
        if (typeof t == 'number') return new e(new Uint8Array(t));
        if (typeof t == 'string') return Xn(t, r);
        if (ArrayBuffer.isView(t)) {
          let { byteOffset: n, byteLength: i, buffer: o } = t;
          return 'map' in t && typeof t.map == 'function'
            ? new e(
                t.map((s) => s % 256),
                n,
                i
              )
            : new e(o, n, i);
        }
        if (t && typeof t == 'object' && ('length' in t || 'byteLength' in t || 'buffer' in t)) return new e(t);
        throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
      }
      static concat(t, r) {
        if (t.length === 0) return e.alloc(0);
        let n = [].concat(...t.map((o) => [...o])),
          i = e.alloc(r !== void 0 ? r : n.length);
        return (i.set(r !== void 0 ? n.slice(0, r) : n), i);
      }
      slice(t = 0, r = this.length) {
        return this.subarray(t, r);
      }
      subarray(t = 0, r = this.length) {
        return Object.setPrototypeOf(super.subarray(t, r), e.prototype);
      }
      reverse() {
        return (super.reverse(), this);
      }
      readIntBE(t, r) {
        (z(t, 'offset'), pe(t, 'offset'), Z(t, 'offset', this.length - 1), z(r, 'byteLength'), pe(r, 'byteLength'));
        let n = new DataView(this.buffer, t, r),
          i = 0;
        for (let o = 0; o < r; o++) i = i * 256 + n.getUint8(o);
        return (n.getUint8(0) & 128 && (i -= Math.pow(256, r)), i);
      }
      readIntLE(t, r) {
        (z(t, 'offset'), pe(t, 'offset'), Z(t, 'offset', this.length - 1), z(r, 'byteLength'), pe(r, 'byteLength'));
        let n = new DataView(this.buffer, t, r),
          i = 0;
        for (let o = 0; o < r; o++) i += n.getUint8(o) * Math.pow(256, o);
        return (n.getUint8(r - 1) & 128 && (i -= Math.pow(256, r)), i);
      }
      readUIntBE(t, r) {
        (z(t, 'offset'), pe(t, 'offset'), Z(t, 'offset', this.length - 1), z(r, 'byteLength'), pe(r, 'byteLength'));
        let n = new DataView(this.buffer, t, r),
          i = 0;
        for (let o = 0; o < r; o++) i = i * 256 + n.getUint8(o);
        return i;
      }
      readUintBE(t, r) {
        return this.readUIntBE(t, r);
      }
      readUIntLE(t, r) {
        (z(t, 'offset'), pe(t, 'offset'), Z(t, 'offset', this.length - 1), z(r, 'byteLength'), pe(r, 'byteLength'));
        let n = new DataView(this.buffer, t, r),
          i = 0;
        for (let o = 0; o < r; o++) i += n.getUint8(o) * Math.pow(256, o);
        return i;
      }
      readUintLE(t, r) {
        return this.readUIntLE(t, r);
      }
      writeIntBE(t, r, n) {
        return ((t = t < 0 ? t + Math.pow(256, n) : t), this.writeUIntBE(t, r, n));
      }
      writeIntLE(t, r, n) {
        return ((t = t < 0 ? t + Math.pow(256, n) : t), this.writeUIntLE(t, r, n));
      }
      writeUIntBE(t, r, n) {
        (z(r, 'offset'), pe(r, 'offset'), Z(r, 'offset', this.length - 1), z(n, 'byteLength'), pe(n, 'byteLength'));
        let i = new DataView(this.buffer, r, n);
        for (let o = n - 1; o >= 0; o--) (i.setUint8(o, t & 255), (t = t / 256));
        return r + n;
      }
      writeUintBE(t, r, n) {
        return this.writeUIntBE(t, r, n);
      }
      writeUIntLE(t, r, n) {
        (z(r, 'offset'), pe(r, 'offset'), Z(r, 'offset', this.length - 1), z(n, 'byteLength'), pe(n, 'byteLength'));
        let i = new DataView(this.buffer, r, n);
        for (let o = 0; o < n; o++) (i.setUint8(o, t & 255), (t = t / 256));
        return r + n;
      }
      writeUintLE(t, r, n) {
        return this.writeUIntLE(t, r, n);
      }
      toJSON() {
        return { type: 'Buffer', data: Array.from(this) };
      }
      swap16() {
        let t = new DataView(this.buffer, this.byteOffset, this.byteLength);
        for (let r = 0; r < this.length; r += 2) t.setUint16(r, t.getUint16(r, !0), !1);
        return this;
      }
      swap32() {
        let t = new DataView(this.buffer, this.byteOffset, this.byteLength);
        for (let r = 0; r < this.length; r += 4) t.setUint32(r, t.getUint32(r, !0), !1);
        return this;
      }
      swap64() {
        let t = new DataView(this.buffer, this.byteOffset, this.byteLength);
        for (let r = 0; r < this.length; r += 8) t.setBigUint64(r, t.getBigUint64(r, !0), !1);
        return this;
      }
      compare(t, r = 0, n = t.length, i = 0, o = this.length) {
        return (
          Hr(t, 'target'),
          z(r, 'targetStart'),
          z(n, 'targetEnd'),
          z(i, 'sourceStart'),
          z(o, 'sourceEnd'),
          Z(r, 'targetStart'),
          Z(n, 'targetEnd', t.length),
          Z(i, 'sourceStart'),
          Z(o, 'sourceEnd', this.length),
          e.compare(this.slice(i, o), t.slice(r, n))
        );
      }
      equals(t) {
        return (Hr(t, 'otherBuffer'), this.length === t.length && this.every((r, n) => r === t[n]));
      }
      copy(t, r = 0, n = 0, i = this.length) {
        (Z(r, 'targetStart'), Z(n, 'sourceStart', this.length), Z(i, 'sourceEnd'), (r >>>= 0), (n >>>= 0), (i >>>= 0));
        let o = 0;
        for (; n < i && !(this[n] === void 0 || t[r] === void 0); ) ((t[r] = this[n]), o++, n++, r++);
        return o;
      }
      write(t, r, n, i = 'utf8') {
        let o = typeof r == 'string' ? 0 : (r ?? 0),
          s = typeof n == 'string' ? this.length - o : (n ?? this.length - o);
        return (
          (i = typeof r == 'string' ? r : typeof n == 'string' ? n : i),
          z(o, 'offset'),
          z(s, 'length'),
          Z(o, 'offset', this.length),
          Z(s, 'length', this.length),
          (i === 'ucs2' || i === 'ucs-2' || i === 'utf16le' || i === 'utf-16le') && (s = s - (s % 2)),
          Xn(t, i).copy(this, o, 0, s)
        );
      }
      fill(t = 0, r = 0, n = this.length, i = 'utf-8') {
        let o = typeof r == 'string' ? 0 : r,
          s = typeof n == 'string' ? this.length : n;
        if (
          ((i = typeof r == 'string' ? r : typeof n == 'string' ? n : i),
          (t = e.from(typeof t == 'number' ? [t] : (t ?? []), i)),
          Oo(i, 'encoding'),
          Z(o, 'offset', this.length),
          Z(s, 'end', this.length),
          t.length !== 0)
        )
          for (let a = o; a < s; a += t.length)
            super.set(t.slice(0, t.length + a >= this.length ? this.length - a : t.length), a);
        return this;
      }
      includes(t, r = null, n = 'utf-8') {
        return this.indexOf(t, r, n) !== -1;
      }
      lastIndexOf(t, r = null, n = 'utf-8') {
        return this.indexOf(t, r, n, !0);
      }
      indexOf(t, r = null, n = 'utf-8', i = !1) {
        let o = i ? this.findLastIndex.bind(this) : this.findIndex.bind(this);
        n = typeof r == 'string' ? r : n;
        let s = e.from(typeof t == 'number' ? [t] : t, n),
          a = typeof r == 'string' ? 0 : r;
        return (
          (a = typeof r == 'number' ? a : null),
          (a = Number.isNaN(a) ? null : a),
          (a ??= i ? this.length : 0),
          (a = a < 0 ? this.length + a : a),
          s.length === 0 && i === !1
            ? a >= this.length
              ? this.length
              : a
            : s.length === 0 && i === !0
              ? (a >= this.length ? this.length : a) || this.length
              : o((f, w) => (i ? w <= a : w >= a) && this[w] === s[0] && s.every((A, R) => this[w + R] === A))
        );
      }
      toString(t = 'utf8', r = 0, n = this.length) {
        if (((r = r < 0 ? 0 : r), (t = t.toString().toLowerCase()), n <= 0)) return '';
        if (t === 'utf8' || t === 'utf-8') return ec.decode(this.slice(r, n));
        if (t === 'base64' || t === 'base64url') {
          let i = btoa(this.reduce((o, s) => o + ei(s), ''));
          return t === 'base64url' ? i.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '') : i;
        }
        if (t === 'binary' || t === 'ascii' || t === 'latin1' || t === 'latin-1')
          return this.slice(r, n).reduce((i, o) => i + ei(o & (t === 'ascii' ? 127 : 255)), '');
        if (t === 'ucs2' || t === 'ucs-2' || t === 'utf16le' || t === 'utf-16le') {
          let i = new DataView(this.buffer.slice(r, n));
          return Array.from({ length: i.byteLength / 2 }, (o, s) =>
            s * 2 + 1 < i.byteLength ? ei(i.getUint16(s * 2, !0)) : ''
          ).join('');
        }
        if (t === 'hex') return this.slice(r, n).reduce((i, o) => i + o.toString(16).padStart(2, '0'), '');
        ko(`encoding "${t}"`);
      }
      toLocaleString() {
        return this.toString();
      }
      inspect() {
        return `<Buffer ${this.toString('hex')
          .match(/.{1,2}/g)
          .join(' ')}>`;
      }
    };
    ((Zu = {
      int8: [-128, 127],
      int16: [-32768, 32767],
      int32: [-2147483648, 2147483647],
      uint8: [0, 255],
      uint16: [0, 65535],
      uint32: [0, 4294967295],
      float32: [-1 / 0, 1 / 0],
      float64: [-1 / 0, 1 / 0],
      bigint64: [-0x8000000000000000n, 0x7fffffffffffffffn],
      biguint64: [0n, 0xffffffffffffffffn],
    }),
      (Xu = new TextEncoder()),
      (ec = new TextDecoder()),
      (tc = [
        'utf8',
        'utf-8',
        'hex',
        'base64',
        'ascii',
        'binary',
        'base64url',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'latin1',
        'latin-1',
      ]),
      (rc = 4294967295));
    zu(h.prototype);
    ((y = new Proxy(nc, {
      construct(e, [t, r]) {
        return h.from(t, r);
      },
      get(e, t) {
        return h[t];
      },
    })),
      (ei = String.fromCodePoint));
  });
var g,
  c = fe(() => {
    'use strict';
    g = {
      nextTick: (e, ...t) => {
        setTimeout(() => {
          e(...t);
        }, 0);
      },
      env: {},
      version: '',
      cwd: () => '/',
      stderr: {},
      argv: ['/bin/node'],
      pid: 1e4,
    };
  });
var b,
  p = fe(() => {
    'use strict';
    b =
      globalThis.performance ??
      (() => {
        let e = Date.now();
        return { now: () => Date.now() - e };
      })();
  });
var E,
  m = fe(() => {
    'use strict';
    E = () => {};
    E.prototype = E;
  });
var d = fe(() => {
  'use strict';
});
function No(e, t) {
  var r,
    n,
    i,
    o,
    s,
    a,
    f,
    w,
    v = e.constructor,
    A = v.precision;
  if (!e.s || !t.s) return (t.s || (t = new v(e)), H ? $(t, A) : t);
  if (((f = e.d), (w = t.d), (s = e.e), (i = t.e), (f = f.slice()), (o = s - i), o)) {
    for (
      o < 0 ? ((n = f), (o = -o), (a = w.length)) : ((n = w), (i = s), (a = f.length)),
        s = Math.ceil(A / j),
        a = s > a ? s + 1 : a + 1,
        o > a && ((o = a), (n.length = 1)),
        n.reverse();
      o--;

    )
      n.push(0);
    n.reverse();
  }
  for (a = f.length, o = w.length, a - o < 0 && ((o = a), (n = w), (w = f), (f = n)), r = 0; o; )
    ((r = ((f[--o] = f[o] + w[o] + r) / ee) | 0), (f[o] %= ee));
  for (r && (f.unshift(r), ++i), a = f.length; f[--a] == 0; ) f.pop();
  return ((t.d = f), (t.e = i), H ? $(t, A) : t);
}
function Ce(e, t, r) {
  if (e !== ~~e || e < t || e > r) throw Error(Ye + e);
}
function Ae(e) {
  var t,
    r,
    n,
    i = e.length - 1,
    o = '',
    s = e[0];
  if (i > 0) {
    for (o += s, t = 1; t < i; t++) ((n = e[t] + ''), (r = j - n.length), r && (o += $e(r)), (o += n));
    ((s = e[t]), (n = s + ''), (r = j - n.length), r && (o += $e(r)));
  } else if (s === 0) return '0';
  for (; s % 10 === 0; ) s /= 10;
  return o + s;
}
function Lo(e, t) {
  var r,
    n,
    i,
    o,
    s,
    a,
    f = 0,
    w = 0,
    v = e.constructor,
    A = v.precision;
  if (Y(e) > 16) throw Error(ri + Y(e));
  if (!e.s) return new v(ge);
  for (t == null ? ((H = !1), (a = A)) : (a = t), s = new v(0.03125); e.abs().gte(0.1); ) ((e = e.times(s)), (w += 5));
  for (n = ((Math.log(ze(2, w)) / Math.LN10) * 2 + 5) | 0, a += n, r = i = o = new v(ge), v.precision = a; ; ) {
    if (
      ((i = $(i.times(e), a)),
      (r = r.times(++f)),
      (s = o.plus(Me(i, r, a))),
      Ae(s.d).slice(0, a) === Ae(o.d).slice(0, a))
    ) {
      for (; w--; ) o = $(o.times(o), a);
      return ((v.precision = A), t == null ? ((H = !0), $(o, A)) : o);
    }
    o = s;
  }
}
function Y(e) {
  for (var t = e.e * j, r = e.d[0]; r >= 10; r /= 10) t++;
  return t;
}
function ti(e, t, r) {
  if (t > e.LN10.sd()) throw ((H = !0), r && (e.precision = r), Error(he + 'LN10 precision limit exceeded'));
  return $(new e(e.LN10), t);
}
function $e(e) {
  for (var t = ''; e--; ) t += '0';
  return t;
}
function jt(e, t) {
  var r,
    n,
    i,
    o,
    s,
    a,
    f,
    w,
    v,
    A = 1,
    R = 10,
    C = e,
    D = C.d,
    I = C.constructor,
    _ = I.precision;
  if (C.s < 1) throw Error(he + (C.s ? 'NaN' : '-Infinity'));
  if (C.eq(ge)) return new I(0);
  if ((t == null ? ((H = !1), (w = _)) : (w = t), C.eq(10))) return (t == null && (H = !0), ti(I, w));
  if (((w += R), (I.precision = w), (r = Ae(D)), (n = r.charAt(0)), (o = Y(C)), Math.abs(o) < 15e14)) {
    for (; (n < 7 && n != 1) || (n == 1 && r.charAt(1) > 3); )
      ((C = C.times(e)), (r = Ae(C.d)), (n = r.charAt(0)), A++);
    ((o = Y(C)), n > 1 ? ((C = new I('0.' + r)), o++) : (C = new I(n + '.' + r.slice(1))));
  } else
    return (
      (f = ti(I, w + 2, _).times(o + '')),
      (C = jt(new I(n + '.' + r.slice(1)), w - R).plus(f)),
      (I.precision = _),
      t == null ? ((H = !0), $(C, _)) : C
    );
  for (a = s = C = Me(C.minus(ge), C.plus(ge), w), v = $(C.times(C), w), i = 3; ; ) {
    if (((s = $(s.times(v), w)), (f = a.plus(Me(s, new I(i), w))), Ae(f.d).slice(0, w) === Ae(a.d).slice(0, w)))
      return (
        (a = a.times(2)),
        o !== 0 && (a = a.plus(ti(I, w + 2, _).times(o + ''))),
        (a = Me(a, new I(A), w)),
        (I.precision = _),
        t == null ? ((H = !0), $(a, _)) : a
      );
    ((a = f), (i += 2));
  }
}
function Do(e, t) {
  var r, n, i;
  for (
    (r = t.indexOf('.')) > -1 && (t = t.replace('.', '')),
      (n = t.search(/e/i)) > 0
        ? (r < 0 && (r = n), (r += +t.slice(n + 1)), (t = t.substring(0, n)))
        : r < 0 && (r = t.length),
      n = 0;
    t.charCodeAt(n) === 48;

  )
    ++n;
  for (i = t.length; t.charCodeAt(i - 1) === 48; ) --i;
  if (((t = t.slice(n, i)), t)) {
    if (((i -= n), (r = r - n - 1), (e.e = dt(r / j)), (e.d = []), (n = (r + 1) % j), r < 0 && (n += j), n < i)) {
      for (n && e.d.push(+t.slice(0, n)), i -= j; n < i; ) e.d.push(+t.slice(n, (n += j)));
      ((t = t.slice(n)), (n = j - t.length));
    } else n -= i;
    for (; n--; ) t += '0';
    if ((e.d.push(+t), H && (e.e > Wr || e.e < -Wr))) throw Error(ri + r);
  } else ((e.s = 0), (e.e = 0), (e.d = [0]));
  return e;
}
function $(e, t, r) {
  var n,
    i,
    o,
    s,
    a,
    f,
    w,
    v,
    A = e.d;
  for (s = 1, o = A[0]; o >= 10; o /= 10) s++;
  if (((n = t - s), n < 0)) ((n += j), (i = t), (w = A[(v = 0)]));
  else {
    if (((v = Math.ceil((n + 1) / j)), (o = A.length), v >= o)) return e;
    for (w = o = A[v], s = 1; o >= 10; o /= 10) s++;
    ((n %= j), (i = n - j + s));
  }
  if (
    (r !== void 0 &&
      ((o = ze(10, s - i - 1)),
      (a = (w / o) % 10 | 0),
      (f = t < 0 || A[v + 1] !== void 0 || w % o),
      (f =
        r < 4
          ? (a || f) && (r == 0 || r == (e.s < 0 ? 3 : 2))
          : a > 5 ||
            (a == 5 &&
              (r == 4 ||
                f ||
                (r == 6 && (n > 0 ? (i > 0 ? w / ze(10, s - i) : 0) : A[v - 1]) % 10 & 1) ||
                r == (e.s < 0 ? 8 : 7))))),
    t < 1 || !A[0])
  )
    return (
      f
        ? ((o = Y(e)), (A.length = 1), (t = t - o - 1), (A[0] = ze(10, (j - (t % j)) % j)), (e.e = dt(-t / j) || 0))
        : ((A.length = 1), (A[0] = e.e = e.s = 0)),
      e
    );
  if (
    (n == 0
      ? ((A.length = v), (o = 1), v--)
      : ((A.length = v + 1), (o = ze(10, j - n)), (A[v] = i > 0 ? ((w / ze(10, s - i)) % ze(10, i) | 0) * o : 0)),
    f)
  )
    for (;;)
      if (v == 0) {
        (A[0] += o) == ee && ((A[0] = 1), ++e.e);
        break;
      } else {
        if (((A[v] += o), A[v] != ee)) break;
        ((A[v--] = 0), (o = 1));
      }
  for (n = A.length; A[--n] === 0; ) A.pop();
  if (H && (e.e > Wr || e.e < -Wr)) throw Error(ri + Y(e));
  return e;
}
function Uo(e, t) {
  var r,
    n,
    i,
    o,
    s,
    a,
    f,
    w,
    v,
    A,
    R = e.constructor,
    C = R.precision;
  if (!e.s || !t.s) return (t.s ? (t.s = -t.s) : (t = new R(e)), H ? $(t, C) : t);
  if (((f = e.d), (A = t.d), (n = t.e), (w = e.e), (f = f.slice()), (s = w - n), s)) {
    for (
      v = s < 0,
        v ? ((r = f), (s = -s), (a = A.length)) : ((r = A), (n = w), (a = f.length)),
        i = Math.max(Math.ceil(C / j), a) + 2,
        s > i && ((s = i), (r.length = 1)),
        r.reverse(),
        i = s;
      i--;

    )
      r.push(0);
    r.reverse();
  } else {
    for (i = f.length, a = A.length, v = i < a, v && (a = i), i = 0; i < a; i++)
      if (f[i] != A[i]) {
        v = f[i] < A[i];
        break;
      }
    s = 0;
  }
  for (v && ((r = f), (f = A), (A = r), (t.s = -t.s)), a = f.length, i = A.length - a; i > 0; --i) f[a++] = 0;
  for (i = A.length; i > s; ) {
    if (f[--i] < A[i]) {
      for (o = i; o && f[--o] === 0; ) f[o] = ee - 1;
      (--f[o], (f[i] += ee));
    }
    f[i] -= A[i];
  }
  for (; f[--a] === 0; ) f.pop();
  for (; f[0] === 0; f.shift()) --n;
  return f[0] ? ((t.d = f), (t.e = n), H ? $(t, C) : t) : new R(0);
}
function Ze(e, t, r) {
  var n,
    i = Y(e),
    o = Ae(e.d),
    s = o.length;
  return (
    t
      ? (r && (n = r - s) > 0
          ? (o = o.charAt(0) + '.' + o.slice(1) + $e(n))
          : s > 1 && (o = o.charAt(0) + '.' + o.slice(1)),
        (o = o + (i < 0 ? 'e' : 'e+') + i))
      : i < 0
        ? ((o = '0.' + $e(-i - 1) + o), r && (n = r - s) > 0 && (o += $e(n)))
        : i >= s
          ? ((o += $e(i + 1 - s)), r && (n = r - i - 1) > 0 && (o = o + '.' + $e(n)))
          : ((n = i + 1) < s && (o = o.slice(0, n) + '.' + o.slice(n)),
            r && (n = r - s) > 0 && (i + 1 === s && (o += '.'), (o += $e(n)))),
    e.s < 0 ? '-' + o : o
  );
}
function _o(e, t) {
  if (e.length > t) return ((e.length = t), !0);
}
function Fo(e) {
  var t, r, n;
  function i(o) {
    var s = this;
    if (!(s instanceof i)) return new i(o);
    if (((s.constructor = i), o instanceof i)) {
      ((s.s = o.s), (s.e = o.e), (s.d = (o = o.d) ? o.slice() : o));
      return;
    }
    if (typeof o == 'number') {
      if (o * 0 !== 0) throw Error(Ye + o);
      if (o > 0) s.s = 1;
      else if (o < 0) ((o = -o), (s.s = -1));
      else {
        ((s.s = 0), (s.e = 0), (s.d = [0]));
        return;
      }
      if (o === ~~o && o < 1e7) {
        ((s.e = 0), (s.d = [o]));
        return;
      }
      return Do(s, o.toString());
    } else if (typeof o != 'string') throw Error(Ye + o);
    if ((o.charCodeAt(0) === 45 ? ((o = o.slice(1)), (s.s = -1)) : (s.s = 1), oc.test(o))) Do(s, o);
    else throw Error(Ye + o);
  }
  if (
    ((i.prototype = S),
    (i.ROUND_UP = 0),
    (i.ROUND_DOWN = 1),
    (i.ROUND_CEIL = 2),
    (i.ROUND_FLOOR = 3),
    (i.ROUND_HALF_UP = 4),
    (i.ROUND_HALF_DOWN = 5),
    (i.ROUND_HALF_EVEN = 6),
    (i.ROUND_HALF_CEIL = 7),
    (i.ROUND_HALF_FLOOR = 8),
    (i.clone = Fo),
    (i.config = i.set = sc),
    e === void 0 && (e = {}),
    e)
  )
    for (n = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'], t = 0; t < n.length; )
      e.hasOwnProperty((r = n[t++])) || (e[r] = this[r]);
  return (i.config(e), i);
}
function sc(e) {
  if (!e || typeof e != 'object') throw Error(he + 'Object expected');
  var t,
    r,
    n,
    i = ['precision', 1, mt, 'rounding', 0, 8, 'toExpNeg', -1 / 0, 0, 'toExpPos', 0, 1 / 0];
  for (t = 0; t < i.length; t += 3)
    if ((n = e[(r = i[t])]) !== void 0)
      if (dt(n) === n && n >= i[t + 1] && n <= i[t + 2]) this[r] = n;
      else throw Error(Ye + r + ': ' + n);
  if ((n = e[(r = 'LN10')]) !== void 0)
    if (n == Math.LN10) this[r] = new this(n);
    else throw Error(Ye + r + ': ' + n);
  return this;
}
var mt,
  ic,
  ni,
  H,
  he,
  Ye,
  ri,
  dt,
  ze,
  oc,
  ge,
  ee,
  j,
  Mo,
  Wr,
  S,
  Me,
  ni,
  Jr,
  $o = fe(() => {
    'use strict';
    u();
    c();
    p();
    m();
    d();
    l();
    ((mt = 1e9),
      (ic = {
        precision: 20,
        rounding: 4,
        toExpNeg: -7,
        toExpPos: 21,
        LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286',
      }),
      (H = !0),
      (he = '[DecimalError] '),
      (Ye = he + 'Invalid argument: '),
      (ri = he + 'Exponent out of range: '),
      (dt = Math.floor),
      (ze = Math.pow),
      (oc = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i),
      (ee = 1e7),
      (j = 7),
      (Mo = 9007199254740991),
      (Wr = dt(Mo / j)),
      (S = {}));
    S.absoluteValue = S.abs = function () {
      var e = new this.constructor(this);
      return (e.s && (e.s = 1), e);
    };
    S.comparedTo = S.cmp = function (e) {
      var t,
        r,
        n,
        i,
        o = this;
      if (((e = new o.constructor(e)), o.s !== e.s)) return o.s || -e.s;
      if (o.e !== e.e) return (o.e > e.e) ^ (o.s < 0) ? 1 : -1;
      for (n = o.d.length, i = e.d.length, t = 0, r = n < i ? n : i; t < r; ++t)
        if (o.d[t] !== e.d[t]) return (o.d[t] > e.d[t]) ^ (o.s < 0) ? 1 : -1;
      return n === i ? 0 : (n > i) ^ (o.s < 0) ? 1 : -1;
    };
    S.decimalPlaces = S.dp = function () {
      var e = this,
        t = e.d.length - 1,
        r = (t - e.e) * j;
      if (((t = e.d[t]), t)) for (; t % 10 == 0; t /= 10) r--;
      return r < 0 ? 0 : r;
    };
    S.dividedBy = S.div = function (e) {
      return Me(this, new this.constructor(e));
    };
    S.dividedToIntegerBy = S.idiv = function (e) {
      var t = this,
        r = t.constructor;
      return $(Me(t, new r(e), 0, 1), r.precision);
    };
    S.equals = S.eq = function (e) {
      return !this.cmp(e);
    };
    S.exponent = function () {
      return Y(this);
    };
    S.greaterThan = S.gt = function (e) {
      return this.cmp(e) > 0;
    };
    S.greaterThanOrEqualTo = S.gte = function (e) {
      return this.cmp(e) >= 0;
    };
    S.isInteger = S.isint = function () {
      return this.e > this.d.length - 2;
    };
    S.isNegative = S.isneg = function () {
      return this.s < 0;
    };
    S.isPositive = S.ispos = function () {
      return this.s > 0;
    };
    S.isZero = function () {
      return this.s === 0;
    };
    S.lessThan = S.lt = function (e) {
      return this.cmp(e) < 0;
    };
    S.lessThanOrEqualTo = S.lte = function (e) {
      return this.cmp(e) < 1;
    };
    S.logarithm = S.log = function (e) {
      var t,
        r = this,
        n = r.constructor,
        i = n.precision,
        o = i + 5;
      if (e === void 0) e = new n(10);
      else if (((e = new n(e)), e.s < 1 || e.eq(ge))) throw Error(he + 'NaN');
      if (r.s < 1) throw Error(he + (r.s ? 'NaN' : '-Infinity'));
      return r.eq(ge) ? new n(0) : ((H = !1), (t = Me(jt(r, o), jt(e, o), o)), (H = !0), $(t, i));
    };
    S.minus = S.sub = function (e) {
      var t = this;
      return ((e = new t.constructor(e)), t.s == e.s ? Uo(t, e) : No(t, ((e.s = -e.s), e)));
    };
    S.modulo = S.mod = function (e) {
      var t,
        r = this,
        n = r.constructor,
        i = n.precision;
      if (((e = new n(e)), !e.s)) throw Error(he + 'NaN');
      return r.s ? ((H = !1), (t = Me(r, e, 0, 1).times(e)), (H = !0), r.minus(t)) : $(new n(r), i);
    };
    S.naturalExponential = S.exp = function () {
      return Lo(this);
    };
    S.naturalLogarithm = S.ln = function () {
      return jt(this);
    };
    S.negated = S.neg = function () {
      var e = new this.constructor(this);
      return ((e.s = -e.s || 0), e);
    };
    S.plus = S.add = function (e) {
      var t = this;
      return ((e = new t.constructor(e)), t.s == e.s ? No(t, e) : Uo(t, ((e.s = -e.s), e)));
    };
    S.precision = S.sd = function (e) {
      var t,
        r,
        n,
        i = this;
      if (e !== void 0 && e !== !!e && e !== 1 && e !== 0) throw Error(Ye + e);
      if (((t = Y(i) + 1), (n = i.d.length - 1), (r = n * j + 1), (n = i.d[n]), n)) {
        for (; n % 10 == 0; n /= 10) r--;
        for (n = i.d[0]; n >= 10; n /= 10) r++;
      }
      return e && t > r ? t : r;
    };
    S.squareRoot = S.sqrt = function () {
      var e,
        t,
        r,
        n,
        i,
        o,
        s,
        a = this,
        f = a.constructor;
      if (a.s < 1) {
        if (!a.s) return new f(0);
        throw Error(he + 'NaN');
      }
      for (
        e = Y(a),
          H = !1,
          i = Math.sqrt(+a),
          i == 0 || i == 1 / 0
            ? ((t = Ae(a.d)),
              (t.length + e) % 2 == 0 && (t += '0'),
              (i = Math.sqrt(t)),
              (e = dt((e + 1) / 2) - (e < 0 || e % 2)),
              i == 1 / 0 ? (t = '5e' + e) : ((t = i.toExponential()), (t = t.slice(0, t.indexOf('e') + 1) + e)),
              (n = new f(t)))
            : (n = new f(i.toString())),
          r = f.precision,
          i = s = r + 3;
        ;

      )
        if (((o = n), (n = o.plus(Me(a, o, s + 2)).times(0.5)), Ae(o.d).slice(0, s) === (t = Ae(n.d)).slice(0, s))) {
          if (((t = t.slice(s - 3, s + 1)), i == s && t == '4999')) {
            if (($(o, r + 1, 0), o.times(o).eq(a))) {
              n = o;
              break;
            }
          } else if (t != '9999') break;
          s += 4;
        }
      return ((H = !0), $(n, r));
    };
    S.times = S.mul = function (e) {
      var t,
        r,
        n,
        i,
        o,
        s,
        a,
        f,
        w,
        v = this,
        A = v.constructor,
        R = v.d,
        C = (e = new A(e)).d;
      if (!v.s || !e.s) return new A(0);
      for (
        e.s *= v.s,
          r = v.e + e.e,
          f = R.length,
          w = C.length,
          f < w && ((o = R), (R = C), (C = o), (s = f), (f = w), (w = s)),
          o = [],
          s = f + w,
          n = s;
        n--;

      )
        o.push(0);
      for (n = w; --n >= 0; ) {
        for (t = 0, i = f + n; i > n; )
          ((a = o[i] + C[n] * R[i - n - 1] + t), (o[i--] = a % ee | 0), (t = (a / ee) | 0));
        o[i] = (o[i] + t) % ee | 0;
      }
      for (; !o[--s]; ) o.pop();
      return (t ? ++r : o.shift(), (e.d = o), (e.e = r), H ? $(e, A.precision) : e);
    };
    S.toDecimalPlaces = S.todp = function (e, t) {
      var r = this,
        n = r.constructor;
      return (
        (r = new n(r)),
        e === void 0 ? r : (Ce(e, 0, mt), t === void 0 ? (t = n.rounding) : Ce(t, 0, 8), $(r, e + Y(r) + 1, t))
      );
    };
    S.toExponential = function (e, t) {
      var r,
        n = this,
        i = n.constructor;
      return (
        e === void 0
          ? (r = Ze(n, !0))
          : (Ce(e, 0, mt),
            t === void 0 ? (t = i.rounding) : Ce(t, 0, 8),
            (n = $(new i(n), e + 1, t)),
            (r = Ze(n, !0, e + 1))),
        r
      );
    };
    S.toFixed = function (e, t) {
      var r,
        n,
        i = this,
        o = i.constructor;
      return e === void 0
        ? Ze(i)
        : (Ce(e, 0, mt),
          t === void 0 ? (t = o.rounding) : Ce(t, 0, 8),
          (n = $(new o(i), e + Y(i) + 1, t)),
          (r = Ze(n.abs(), !1, e + Y(n) + 1)),
          i.isneg() && !i.isZero() ? '-' + r : r);
    };
    S.toInteger = S.toint = function () {
      var e = this,
        t = e.constructor;
      return $(new t(e), Y(e) + 1, t.rounding);
    };
    S.toNumber = function () {
      return +this;
    };
    S.toPower = S.pow = function (e) {
      var t,
        r,
        n,
        i,
        o,
        s,
        a = this,
        f = a.constructor,
        w = 12,
        v = +(e = new f(e));
      if (!e.s) return new f(ge);
      if (((a = new f(a)), !a.s)) {
        if (e.s < 1) throw Error(he + 'Infinity');
        return a;
      }
      if (a.eq(ge)) return a;
      if (((n = f.precision), e.eq(ge))) return $(a, n);
      if (((t = e.e), (r = e.d.length - 1), (s = t >= r), (o = a.s), s)) {
        if ((r = v < 0 ? -v : v) <= Mo) {
          for (
            i = new f(ge), t = Math.ceil(n / j + 4), H = !1;
            r % 2 && ((i = i.times(a)), _o(i.d, t)), (r = dt(r / 2)), r !== 0;

          )
            ((a = a.times(a)), _o(a.d, t));
          return ((H = !0), e.s < 0 ? new f(ge).div(i) : $(i, n));
        }
      } else if (o < 0) throw Error(he + 'NaN');
      return (
        (o = o < 0 && e.d[Math.max(t, r)] & 1 ? -1 : 1),
        (a.s = 1),
        (H = !1),
        (i = e.times(jt(a, n + w))),
        (H = !0),
        (i = Lo(i)),
        (i.s = o),
        i
      );
    };
    S.toPrecision = function (e, t) {
      var r,
        n,
        i = this,
        o = i.constructor;
      return (
        e === void 0
          ? ((r = Y(i)), (n = Ze(i, r <= o.toExpNeg || r >= o.toExpPos)))
          : (Ce(e, 1, mt),
            t === void 0 ? (t = o.rounding) : Ce(t, 0, 8),
            (i = $(new o(i), e, t)),
            (r = Y(i)),
            (n = Ze(i, e <= r || r <= o.toExpNeg, e))),
        n
      );
    };
    S.toSignificantDigits = S.tosd = function (e, t) {
      var r = this,
        n = r.constructor;
      return (
        e === void 0
          ? ((e = n.precision), (t = n.rounding))
          : (Ce(e, 1, mt), t === void 0 ? (t = n.rounding) : Ce(t, 0, 8)),
        $(new n(r), e, t)
      );
    };
    S.toString =
      S.valueOf =
      S.val =
      S.toJSON =
      S[Symbol.for('nodejs.util.inspect.custom')] =
        function () {
          var e = this,
            t = Y(e),
            r = e.constructor;
          return Ze(e, t <= r.toExpNeg || t >= r.toExpPos);
        };
    Me = (function () {
      function e(n, i) {
        var o,
          s = 0,
          a = n.length;
        for (n = n.slice(); a--; ) ((o = n[a] * i + s), (n[a] = o % ee | 0), (s = (o / ee) | 0));
        return (s && n.unshift(s), n);
      }
      function t(n, i, o, s) {
        var a, f;
        if (o != s) f = o > s ? 1 : -1;
        else
          for (a = f = 0; a < o; a++)
            if (n[a] != i[a]) {
              f = n[a] > i[a] ? 1 : -1;
              break;
            }
        return f;
      }
      function r(n, i, o) {
        for (var s = 0; o--; ) ((n[o] -= s), (s = n[o] < i[o] ? 1 : 0), (n[o] = s * ee + n[o] - i[o]));
        for (; !n[0] && n.length > 1; ) n.shift();
      }
      return function (n, i, o, s) {
        var a,
          f,
          w,
          v,
          A,
          R,
          C,
          D,
          I,
          _,
          be,
          ue,
          V,
          ce,
          Ke,
          Zn,
          Ee,
          jr,
          Qr = n.constructor,
          Qu = n.s == i.s ? 1 : -1,
          ve = n.d,
          K = i.d;
        if (!n.s) return new Qr(n);
        if (!i.s) throw Error(he + 'Division by zero');
        for (f = n.e - i.e, Ee = K.length, Ke = ve.length, C = new Qr(Qu), D = C.d = [], w = 0; K[w] == (ve[w] || 0); )
          ++w;
        if (
          (K[w] > (ve[w] || 0) && --f,
          o == null ? (ue = o = Qr.precision) : s ? (ue = o + (Y(n) - Y(i)) + 1) : (ue = o),
          ue < 0)
        )
          return new Qr(0);
        if (((ue = (ue / j + 2) | 0), (w = 0), Ee == 1))
          for (v = 0, K = K[0], ue++; (w < Ke || v) && ue--; w++)
            ((V = v * ee + (ve[w] || 0)), (D[w] = (V / K) | 0), (v = V % K | 0));
        else {
          for (
            v = (ee / (K[0] + 1)) | 0,
              v > 1 && ((K = e(K, v)), (ve = e(ve, v)), (Ee = K.length), (Ke = ve.length)),
              ce = Ee,
              I = ve.slice(0, Ee),
              _ = I.length;
            _ < Ee;

          )
            I[_++] = 0;
          ((jr = K.slice()), jr.unshift(0), (Zn = K[0]), K[1] >= ee / 2 && ++Zn);
          do
            ((v = 0),
              (a = t(K, I, Ee, _)),
              a < 0
                ? ((be = I[0]),
                  Ee != _ && (be = be * ee + (I[1] || 0)),
                  (v = (be / Zn) | 0),
                  v > 1
                    ? (v >= ee && (v = ee - 1),
                      (A = e(K, v)),
                      (R = A.length),
                      (_ = I.length),
                      (a = t(A, I, R, _)),
                      a == 1 && (v--, r(A, Ee < R ? jr : K, R)))
                    : (v == 0 && (a = v = 1), (A = K.slice())),
                  (R = A.length),
                  R < _ && A.unshift(0),
                  r(I, A, _),
                  a == -1 && ((_ = I.length), (a = t(K, I, Ee, _)), a < 1 && (v++, r(I, Ee < _ ? jr : K, _))),
                  (_ = I.length))
                : a === 0 && (v++, (I = [0])),
              (D[w++] = v),
              a && I[0] ? (I[_++] = ve[ce] || 0) : ((I = [ve[ce]]), (_ = 1)));
          while ((ce++ < Ke || I[0] !== void 0) && ue--);
        }
        return (D[0] || D.shift(), (C.e = f), $(C, s ? o + Y(C) + 1 : o));
      };
    })();
    ni = Fo(ic);
    ge = new ni(1);
    Jr = ni;
  });
var T,
  re,
  l = fe(() => {
    'use strict';
    $o();
    ((T = class extends Jr {
      static isDecimal(t) {
        return t instanceof Jr;
      }
      static random(t = 20) {
        {
          let n = globalThis.crypto.getRandomValues(new Uint8Array(t)).reduce((i, o) => i + o, '');
          return new Jr(`0.${n.slice(0, t)}`);
        }
      }
    }),
      (re = T));
  });
function mc() {
  return !1;
}
function rs() {
  return {
    dev: 0,
    ino: 0,
    mode: 0,
    nlink: 0,
    uid: 0,
    gid: 0,
    rdev: 0,
    size: 0,
    blksize: 0,
    blocks: 0,
    atimeMs: 0,
    mtimeMs: 0,
    ctimeMs: 0,
    birthtimeMs: 0,
    atime: new Date(),
    mtime: new Date(),
    ctime: new Date(),
    birthtime: new Date(),
  };
}
function dc() {
  return rs();
}
function fc() {
  return [];
}
function gc(e) {
  e(null, []);
}
function yc() {
  return '';
}
function hc() {
  return '';
}
function wc() {}
function bc() {}
function Ec() {}
function xc() {}
function Pc() {}
function Tc() {}
var vc,
  Ac,
  ns,
  is = fe(() => {
    'use strict';
    u();
    c();
    p();
    m();
    d();
    l();
    ((vc = {}),
      (Ac = {
        existsSync: mc,
        lstatSync: rs,
        statSync: dc,
        readdirSync: fc,
        readdir: gc,
        readlinkSync: yc,
        realpathSync: hc,
        chmodSync: wc,
        renameSync: bc,
        mkdirSync: Ec,
        rmdirSync: xc,
        rmSync: Pc,
        unlinkSync: Tc,
        promises: vc,
      }),
      (ns = Ac));
  });
var os = se(() => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
});
function Cc(...e) {
  return e.join('/');
}
function Rc(...e) {
  return e.join('/');
}
function Sc(e) {
  let t = ss(e),
    r = as(e),
    [n, i] = t.split('.');
  return { root: '/', dir: r, base: t, ext: i, name: n };
}
function ss(e) {
  let t = e.split('/');
  return t[t.length - 1];
}
function as(e) {
  return e.split('/').slice(0, -1).join('/');
}
var ls,
  Ic,
  Oc,
  Zr,
  us = fe(() => {
    'use strict';
    u();
    c();
    p();
    m();
    d();
    l();
    ((ls = '/'),
      (Ic = { sep: ls }),
      (Oc = { basename: ss, dirname: as, join: Rc, parse: Sc, posix: Ic, resolve: Cc, sep: ls }),
      (Zr = Oc));
  });
var cs = se((fy, kc) => {
  kc.exports = {
    name: '@prisma/internals',
    version: '6.11.1',
    description: "This package is intended for Prisma's internal use",
    main: 'dist/index.js',
    types: 'dist/index.d.ts',
    repository: { type: 'git', url: 'https://github.com/prisma/prisma.git', directory: 'packages/internals' },
    homepage: 'https://www.prisma.io',
    author: 'Tim Suchanek <suchanek@prisma.io>',
    bugs: 'https://github.com/prisma/prisma/issues',
    license: 'Apache-2.0',
    scripts: {
      dev: 'DEV=true tsx helpers/build.ts',
      build: 'tsx helpers/build.ts',
      test: 'dotenv -e ../../.db.env -- jest --silent',
      prepublishOnly: 'pnpm run build',
    },
    files: ['README.md', 'dist', '!**/libquery_engine*', '!dist/get-generators/engines/*', 'scripts'],
    devDependencies: {
      '@babel/helper-validator-identifier': '7.25.9',
      '@opentelemetry/api': '1.9.0',
      '@swc/core': '1.11.5',
      '@swc/jest': '0.2.37',
      '@types/babel__helper-validator-identifier': '7.15.2',
      '@types/jest': '29.5.14',
      '@types/node': '18.19.76',
      '@types/resolve': '1.20.6',
      archiver: '6.0.2',
      'checkpoint-client': '1.1.33',
      'cli-truncate': '4.0.0',
      dotenv: '16.5.0',
      esbuild: '0.25.1',
      'escape-string-regexp': '5.0.0',
      execa: '5.1.1',
      'fast-glob': '3.3.3',
      'find-up': '7.0.0',
      'fp-ts': '2.16.9',
      'fs-extra': '11.3.0',
      'fs-jetpack': '5.1.0',
      'global-dirs': '4.0.0',
      globby: '11.1.0',
      'identifier-regex': '1.0.0',
      'indent-string': '4.0.0',
      'is-windows': '1.0.2',
      'is-wsl': '3.1.0',
      jest: '29.7.0',
      'jest-junit': '16.0.0',
      kleur: '4.1.5',
      'mock-stdin': '1.0.0',
      'new-github-issue-url': '0.2.1',
      'node-fetch': '3.3.2',
      'npm-packlist': '5.1.3',
      open: '7.4.2',
      'p-map': '4.0.0',
      'read-package-up': '11.0.0',
      resolve: '1.22.10',
      'string-width': '7.2.0',
      'strip-ansi': '6.0.1',
      'strip-indent': '4.0.0',
      'temp-dir': '2.0.0',
      tempy: '1.0.1',
      'terminal-link': '4.0.0',
      tmp: '0.2.3',
      'ts-node': '10.9.2',
      'ts-pattern': '5.6.2',
      'ts-toolbelt': '9.6.0',
      typescript: '5.4.5',
      yarn: '1.22.22',
    },
    dependencies: {
      '@prisma/config': 'workspace:*',
      '@prisma/debug': 'workspace:*',
      '@prisma/dmmf': 'workspace:*',
      '@prisma/driver-adapter-utils': 'workspace:*',
      '@prisma/engines': 'workspace:*',
      '@prisma/fetch-engine': 'workspace:*',
      '@prisma/generator': 'workspace:*',
      '@prisma/generator-helper': 'workspace:*',
      '@prisma/get-platform': 'workspace:*',
      '@prisma/prisma-schema-wasm': '6.11.1-1.f40f79ec31188888a2e33acda0ecc8fd10a853a9',
      '@prisma/schema-engine-wasm': '6.11.1-1.f40f79ec31188888a2e33acda0ecc8fd10a853a9',
      '@prisma/schema-files-loader': 'workspace:*',
      arg: '5.0.2',
      prompts: '2.4.2',
    },
    peerDependencies: { typescript: '>=5.1.0' },
    peerDependenciesMeta: { typescript: { optional: !0 } },
    sideEffects: !1,
  };
});
var ui = {};
pt(ui, {
  Hash: () => Ht,
  createHash: () => ps,
  default: () => yt,
  randomFillSync: () => en,
  randomUUID: () => Xr,
  webcrypto: () => Wt,
});
function Xr() {
  return globalThis.crypto.randomUUID();
}
function en(e, t, r) {
  return (
    t !== void 0 && (r !== void 0 ? (e = e.subarray(t, t + r)) : (e = e.subarray(t))),
    globalThis.crypto.getRandomValues(e)
  );
}
function ps(e) {
  return new Ht(e);
}
var Wt,
  Ht,
  yt,
  Xe = fe(() => {
    'use strict';
    u();
    c();
    p();
    m();
    d();
    l();
    Wt = globalThis.crypto;
    ((Ht = class {
      #e = [];
      #t;
      constructor(t) {
        this.#t = t;
      }
      update(t) {
        this.#e.push(t);
      }
      async digest() {
        let t = new Uint8Array(this.#e.reduce((i, o) => i + o.length, 0)),
          r = 0;
        for (let i of this.#e) (t.set(i, r), (r += i.length));
        let n = await globalThis.crypto.subtle.digest(this.#t, t);
        return new Uint8Array(n);
      }
    }),
      (yt = { webcrypto: Wt, randomUUID: Xr, randomFillSync: en, createHash: ps, Hash: Ht }));
  });
var fs = se((By, ds) => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
  ds.exports = (e, t = 1, r) => {
    if (((r = { indent: ' ', includeEmptyLines: !1, ...r }), typeof e != 'string'))
      throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof e}\``);
    if (typeof t != 'number') throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof t}\``);
    if (typeof r.indent != 'string')
      throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof r.indent}\``);
    if (t === 0) return e;
    let n = r.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
    return e.replace(n, r.indent.repeat(t));
  };
});
var hs = se((rh, ys) => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
  ys.exports = ({ onlyFirst: e = !1 } = {}) => {
    let t = [
      '[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
      '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))',
    ].join('|');
    return new RegExp(t, e ? void 0 : 'g');
  };
});
var mi = se((uh, ws) => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
  var $c = hs();
  ws.exports = (e) => (typeof e == 'string' ? e.replace($c(), '') : e);
});
var bs = se((Th, nn) => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
  nn.exports = (e = {}) => {
    let t;
    if (e.repoUrl) t = e.repoUrl;
    else if (e.user && e.repo) t = `https://github.com/${e.user}/${e.repo}`;
    else throw new Error('You need to specify either the `repoUrl` option or both the `user` and `repo` options');
    let r = new URL(`${t}/issues/new`),
      n = ['body', 'title', 'labels', 'template', 'milestone', 'assignee', 'projects'];
    for (let i of n) {
      let o = e[i];
      if (o !== void 0) {
        if (i === 'labels' || i === 'projects') {
          if (!Array.isArray(o)) throw new TypeError(`The \`${i}\` option should be an array`);
          o = o.join(',');
        }
        r.searchParams.set(i, o);
      }
    }
    return r.toString();
  };
  nn.exports.default = nn.exports;
});
var yi = se((vx, vs) => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
  vs.exports = (function () {
    function e(t, r, n, i, o) {
      return t < r || n < r ? (t > n ? n + 1 : t + 1) : i === o ? r : r + 1;
    }
    return function (t, r) {
      if (t === r) return 0;
      if (t.length > r.length) {
        var n = t;
        ((t = r), (r = n));
      }
      for (var i = t.length, o = r.length; i > 0 && t.charCodeAt(i - 1) === r.charCodeAt(o - 1); ) (i--, o--);
      for (var s = 0; s < i && t.charCodeAt(s) === r.charCodeAt(s); ) s++;
      if (((i -= s), (o -= s), i === 0 || o < 3)) return o;
      var a = 0,
        f,
        w,
        v,
        A,
        R,
        C,
        D,
        I,
        _,
        be,
        ue,
        V,
        ce = [];
      for (f = 0; f < i; f++) (ce.push(f + 1), ce.push(t.charCodeAt(s + f)));
      for (var Ke = ce.length - 1; a < o - 3; )
        for (
          _ = r.charCodeAt(s + (w = a)),
            be = r.charCodeAt(s + (v = a + 1)),
            ue = r.charCodeAt(s + (A = a + 2)),
            V = r.charCodeAt(s + (R = a + 3)),
            C = a += 4,
            f = 0;
          f < Ke;
          f += 2
        )
          ((D = ce[f]),
            (I = ce[f + 1]),
            (w = e(D, w, v, _, I)),
            (v = e(w, v, A, be, I)),
            (A = e(v, A, R, ue, I)),
            (C = e(A, R, C, V, I)),
            (ce[f] = C),
            (R = A),
            (A = v),
            (v = w),
            (w = D));
      for (; a < o; )
        for (_ = r.charCodeAt(s + (w = a)), C = ++a, f = 0; f < Ke; f += 2)
          ((D = ce[f]), (ce[f] = C = e(D, w, C, _, ce[f + 1])), (w = D));
      return C;
    };
  })();
});
var Is = fe(() => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
});
var Os = fe(() => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
});
var ea = se((TC, Dp) => {
  Dp.exports = {
    name: '@prisma/engines-version',
    version: '6.11.1-1.f40f79ec31188888a2e33acda0ecc8fd10a853a9',
    main: 'index.js',
    types: 'index.d.ts',
    license: 'Apache-2.0',
    author: 'Tim Suchanek <suchanek@prisma.io>',
    prisma: { enginesVersion: 'f40f79ec31188888a2e33acda0ecc8fd10a853a9' },
    repository: {
      type: 'git',
      url: 'https://github.com/prisma/engines-wrapper.git',
      directory: 'packages/engines-version',
    },
    devDependencies: { '@types/node': '18.19.76', typescript: '4.9.5' },
    files: ['index.js', 'index.d.ts'],
    scripts: { build: 'tsc -d' },
  };
});
var Tn,
  ta = fe(() => {
    'use strict';
    u();
    c();
    p();
    m();
    d();
    l();
    Tn = class {
      events = {};
      on(t, r) {
        return (this.events[t] || (this.events[t] = []), this.events[t].push(r), this);
      }
      emit(t, ...r) {
        return this.events[t]
          ? (this.events[t].forEach((n) => {
              n(...r);
            }),
            !0)
          : !1;
      }
    };
  });
var qi = se((rt) => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
  Object.defineProperty(rt, '__esModule', { value: !0 });
  rt.anumber = Vi;
  rt.abytes = Ha;
  rt.ahash = xm;
  rt.aexists = Pm;
  rt.aoutput = Tm;
  function Vi(e) {
    if (!Number.isSafeInteger(e) || e < 0) throw new Error('positive integer expected, got ' + e);
  }
  function Em(e) {
    return e instanceof Uint8Array || (ArrayBuffer.isView(e) && e.constructor.name === 'Uint8Array');
  }
  function Ha(e, ...t) {
    if (!Em(e)) throw new Error('Uint8Array expected');
    if (t.length > 0 && !t.includes(e.length))
      throw new Error('Uint8Array expected of length ' + t + ', got length=' + e.length);
  }
  function xm(e) {
    if (typeof e != 'function' || typeof e.create != 'function')
      throw new Error('Hash should be wrapped by utils.wrapConstructor');
    (Vi(e.outputLen), Vi(e.blockLen));
  }
  function Pm(e, t = !0) {
    if (e.destroyed) throw new Error('Hash instance has been destroyed');
    if (t && e.finished) throw new Error('Hash#digest() has already been called');
  }
  function Tm(e, t) {
    Ha(e);
    let r = t.outputLen;
    if (e.length < r) throw new Error('digestInto() expects output buffer of length at least ' + r);
  }
});
var fl = se((k) => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
  Object.defineProperty(k, '__esModule', { value: !0 });
  k.add5L =
    k.add5H =
    k.add4H =
    k.add4L =
    k.add3H =
    k.add3L =
    k.rotlBL =
    k.rotlBH =
    k.rotlSL =
    k.rotlSH =
    k.rotr32L =
    k.rotr32H =
    k.rotrBL =
    k.rotrBH =
    k.rotrSL =
    k.rotrSH =
    k.shrSL =
    k.shrSH =
    k.toBig =
      void 0;
  k.fromBig = ji;
  k.split = Wa;
  k.add = al;
  var kn = BigInt(2 ** 32 - 1),
    Bi = BigInt(32);
  function ji(e, t = !1) {
    return t
      ? { h: Number(e & kn), l: Number((e >> Bi) & kn) }
      : { h: Number((e >> Bi) & kn) | 0, l: Number(e & kn) | 0 };
  }
  function Wa(e, t = !1) {
    let r = new Uint32Array(e.length),
      n = new Uint32Array(e.length);
    for (let i = 0; i < e.length; i++) {
      let { h: o, l: s } = ji(e[i], t);
      [r[i], n[i]] = [o, s];
    }
    return [r, n];
  }
  var Ja = (e, t) => (BigInt(e >>> 0) << Bi) | BigInt(t >>> 0);
  k.toBig = Ja;
  var Ka = (e, t, r) => e >>> r;
  k.shrSH = Ka;
  var za = (e, t, r) => (e << (32 - r)) | (t >>> r);
  k.shrSL = za;
  var Ya = (e, t, r) => (e >>> r) | (t << (32 - r));
  k.rotrSH = Ya;
  var Za = (e, t, r) => (e << (32 - r)) | (t >>> r);
  k.rotrSL = Za;
  var Xa = (e, t, r) => (e << (64 - r)) | (t >>> (r - 32));
  k.rotrBH = Xa;
  var el = (e, t, r) => (e >>> (r - 32)) | (t << (64 - r));
  k.rotrBL = el;
  var tl = (e, t) => t;
  k.rotr32H = tl;
  var rl = (e, t) => e;
  k.rotr32L = rl;
  var nl = (e, t, r) => (e << r) | (t >>> (32 - r));
  k.rotlSH = nl;
  var il = (e, t, r) => (t << r) | (e >>> (32 - r));
  k.rotlSL = il;
  var ol = (e, t, r) => (t << (r - 32)) | (e >>> (64 - r));
  k.rotlBH = ol;
  var sl = (e, t, r) => (e << (r - 32)) | (t >>> (64 - r));
  k.rotlBL = sl;
  function al(e, t, r, n) {
    let i = (t >>> 0) + (n >>> 0);
    return { h: (e + r + ((i / 2 ** 32) | 0)) | 0, l: i | 0 };
  }
  var ll = (e, t, r) => (e >>> 0) + (t >>> 0) + (r >>> 0);
  k.add3L = ll;
  var ul = (e, t, r, n) => (t + r + n + ((e / 2 ** 32) | 0)) | 0;
  k.add3H = ul;
  var cl = (e, t, r, n) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0);
  k.add4L = cl;
  var pl = (e, t, r, n, i) => (t + r + n + i + ((e / 2 ** 32) | 0)) | 0;
  k.add4H = pl;
  var ml = (e, t, r, n, i) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0) + (i >>> 0);
  k.add5L = ml;
  var dl = (e, t, r, n, i, o) => (t + r + n + i + o + ((e / 2 ** 32) | 0)) | 0;
  k.add5H = dl;
  var vm = {
    fromBig: ji,
    split: Wa,
    toBig: Ja,
    shrSH: Ka,
    shrSL: za,
    rotrSH: Ya,
    rotrSL: Za,
    rotrBH: Xa,
    rotrBL: el,
    rotr32H: tl,
    rotr32L: rl,
    rotlSH: nl,
    rotlSL: il,
    rotlBH: ol,
    rotlBL: sl,
    add: al,
    add3L: ll,
    add3H: ul,
    add4L: cl,
    add4H: pl,
    add5H: dl,
    add5L: ml,
  };
  k.default = vm;
});
var gl = se((Dn) => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
  Object.defineProperty(Dn, '__esModule', { value: !0 });
  Dn.crypto = void 0;
  var Ge = (Xe(), Io(ui));
  Dn.crypto =
    Ge && typeof Ge == 'object' && 'webcrypto' in Ge
      ? Ge.webcrypto
      : Ge && typeof Ge == 'object' && 'randomBytes' in Ge
        ? Ge
        : void 0;
});
var wl = se((U) => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
  Object.defineProperty(U, '__esModule', { value: !0 });
  U.Hash = U.nextTick = U.byteSwapIfBE = U.isLE = void 0;
  U.isBytes = Am;
  U.u8 = Cm;
  U.u32 = Rm;
  U.createView = Sm;
  U.rotr = Im;
  U.rotl = Om;
  U.byteSwap = Hi;
  U.byteSwap32 = km;
  U.bytesToHex = _m;
  U.hexToBytes = Mm;
  U.asyncLoop = Lm;
  U.utf8ToBytes = hl;
  U.toBytes = _n;
  U.concatBytes = Um;
  U.checkOpts = Fm;
  U.wrapConstructor = $m;
  U.wrapConstructorWithOpts = Vm;
  U.wrapXOFConstructorWithOpts = qm;
  U.randomBytes = Bm;
  var kt = gl(),
    Gi = qi();
  function Am(e) {
    return e instanceof Uint8Array || (ArrayBuffer.isView(e) && e.constructor.name === 'Uint8Array');
  }
  function Cm(e) {
    return new Uint8Array(e.buffer, e.byteOffset, e.byteLength);
  }
  function Rm(e) {
    return new Uint32Array(e.buffer, e.byteOffset, Math.floor(e.byteLength / 4));
  }
  function Sm(e) {
    return new DataView(e.buffer, e.byteOffset, e.byteLength);
  }
  function Im(e, t) {
    return (e << (32 - t)) | (e >>> t);
  }
  function Om(e, t) {
    return (e << t) | ((e >>> (32 - t)) >>> 0);
  }
  U.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
  function Hi(e) {
    return ((e << 24) & 4278190080) | ((e << 8) & 16711680) | ((e >>> 8) & 65280) | ((e >>> 24) & 255);
  }
  U.byteSwapIfBE = U.isLE ? (e) => e : (e) => Hi(e);
  function km(e) {
    for (let t = 0; t < e.length; t++) e[t] = Hi(e[t]);
  }
  var Dm = Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, '0'));
  function _m(e) {
    (0, Gi.abytes)(e);
    let t = '';
    for (let r = 0; r < e.length; r++) t += Dm[e[r]];
    return t;
  }
  var Le = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
  function yl(e) {
    if (e >= Le._0 && e <= Le._9) return e - Le._0;
    if (e >= Le.A && e <= Le.F) return e - (Le.A - 10);
    if (e >= Le.a && e <= Le.f) return e - (Le.a - 10);
  }
  function Mm(e) {
    if (typeof e != 'string') throw new Error('hex string expected, got ' + typeof e);
    let t = e.length,
      r = t / 2;
    if (t % 2) throw new Error('hex string expected, got unpadded hex of length ' + t);
    let n = new Uint8Array(r);
    for (let i = 0, o = 0; i < r; i++, o += 2) {
      let s = yl(e.charCodeAt(o)),
        a = yl(e.charCodeAt(o + 1));
      if (s === void 0 || a === void 0) {
        let f = e[o] + e[o + 1];
        throw new Error('hex string expected, got non-hex character "' + f + '" at index ' + o);
      }
      n[i] = s * 16 + a;
    }
    return n;
  }
  var Nm = async () => {};
  U.nextTick = Nm;
  async function Lm(e, t, r) {
    let n = Date.now();
    for (let i = 0; i < e; i++) {
      r(i);
      let o = Date.now() - n;
      (o >= 0 && o < t) || (await (0, U.nextTick)(), (n += o));
    }
  }
  function hl(e) {
    if (typeof e != 'string') throw new Error('utf8ToBytes expected string, got ' + typeof e);
    return new Uint8Array(new TextEncoder().encode(e));
  }
  function _n(e) {
    return (typeof e == 'string' && (e = hl(e)), (0, Gi.abytes)(e), e);
  }
  function Um(...e) {
    let t = 0;
    for (let n = 0; n < e.length; n++) {
      let i = e[n];
      ((0, Gi.abytes)(i), (t += i.length));
    }
    let r = new Uint8Array(t);
    for (let n = 0, i = 0; n < e.length; n++) {
      let o = e[n];
      (r.set(o, i), (i += o.length));
    }
    return r;
  }
  var Qi = class {
    clone() {
      return this._cloneInto();
    }
  };
  U.Hash = Qi;
  function Fm(e, t) {
    if (t !== void 0 && {}.toString.call(t) !== '[object Object]')
      throw new Error('Options should be object or undefined');
    return Object.assign(e, t);
  }
  function $m(e) {
    let t = (n) => e().update(_n(n)).digest(),
      r = e();
    return ((t.outputLen = r.outputLen), (t.blockLen = r.blockLen), (t.create = () => e()), t);
  }
  function Vm(e) {
    let t = (n, i) => e(i).update(_n(n)).digest(),
      r = e({});
    return ((t.outputLen = r.outputLen), (t.blockLen = r.blockLen), (t.create = (n) => e(n)), t);
  }
  function qm(e) {
    let t = (n, i) => e(i).update(_n(n)).digest(),
      r = e({});
    return ((t.outputLen = r.outputLen), (t.blockLen = r.blockLen), (t.create = (n) => e(n)), t);
  }
  function Bm(e = 32) {
    if (kt.crypto && typeof kt.crypto.getRandomValues == 'function')
      return kt.crypto.getRandomValues(new Uint8Array(e));
    if (kt.crypto && typeof kt.crypto.randomBytes == 'function') return kt.crypto.randomBytes(e);
    throw new Error('crypto.getRandomValues must be defined');
  }
});
var Cl = se((G) => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
  Object.defineProperty(G, '__esModule', { value: !0 });
  G.shake256 =
    G.shake128 =
    G.keccak_512 =
    G.keccak_384 =
    G.keccak_256 =
    G.keccak_224 =
    G.sha3_512 =
    G.sha3_384 =
    G.sha3_256 =
    G.sha3_224 =
    G.Keccak =
      void 0;
  G.keccakP = vl;
  var Dt = qi(),
    wr = fl(),
    Ue = wl(),
    xl = [],
    Pl = [],
    Tl = [],
    jm = BigInt(0),
    hr = BigInt(1),
    Qm = BigInt(2),
    Gm = BigInt(7),
    Hm = BigInt(256),
    Wm = BigInt(113);
  for (let e = 0, t = hr, r = 1, n = 0; e < 24; e++) {
    (([r, n] = [n, (2 * r + 3 * n) % 5]), xl.push(2 * (5 * n + r)), Pl.push((((e + 1) * (e + 2)) / 2) % 64));
    let i = jm;
    for (let o = 0; o < 7; o++)
      ((t = ((t << hr) ^ ((t >> Gm) * Wm)) % Hm), t & Qm && (i ^= hr << ((hr << BigInt(o)) - hr)));
    Tl.push(i);
  }
  var [Jm, Km] = (0, wr.split)(Tl, !0),
    bl = (e, t, r) => (r > 32 ? (0, wr.rotlBH)(e, t, r) : (0, wr.rotlSH)(e, t, r)),
    El = (e, t, r) => (r > 32 ? (0, wr.rotlBL)(e, t, r) : (0, wr.rotlSL)(e, t, r));
  function vl(e, t = 24) {
    let r = new Uint32Array(10);
    for (let n = 24 - t; n < 24; n++) {
      for (let s = 0; s < 10; s++) r[s] = e[s] ^ e[s + 10] ^ e[s + 20] ^ e[s + 30] ^ e[s + 40];
      for (let s = 0; s < 10; s += 2) {
        let a = (s + 8) % 10,
          f = (s + 2) % 10,
          w = r[f],
          v = r[f + 1],
          A = bl(w, v, 1) ^ r[a],
          R = El(w, v, 1) ^ r[a + 1];
        for (let C = 0; C < 50; C += 10) ((e[s + C] ^= A), (e[s + C + 1] ^= R));
      }
      let i = e[2],
        o = e[3];
      for (let s = 0; s < 24; s++) {
        let a = Pl[s],
          f = bl(i, o, a),
          w = El(i, o, a),
          v = xl[s];
        ((i = e[v]), (o = e[v + 1]), (e[v] = f), (e[v + 1] = w));
      }
      for (let s = 0; s < 50; s += 10) {
        for (let a = 0; a < 10; a++) r[a] = e[s + a];
        for (let a = 0; a < 10; a++) e[s + a] ^= ~r[(a + 2) % 10] & r[(a + 4) % 10];
      }
      ((e[0] ^= Jm[n]), (e[1] ^= Km[n]));
    }
    r.fill(0);
  }
  var br = class e extends Ue.Hash {
    constructor(t, r, n, i = !1, o = 24) {
      if (
        (super(),
        (this.blockLen = t),
        (this.suffix = r),
        (this.outputLen = n),
        (this.enableXOF = i),
        (this.rounds = o),
        (this.pos = 0),
        (this.posOut = 0),
        (this.finished = !1),
        (this.destroyed = !1),
        (0, Dt.anumber)(n),
        0 >= this.blockLen || this.blockLen >= 200)
      )
        throw new Error('Sha3 supports only keccak-f1600 function');
      ((this.state = new Uint8Array(200)), (this.state32 = (0, Ue.u32)(this.state)));
    }
    keccak() {
      (Ue.isLE || (0, Ue.byteSwap32)(this.state32),
        vl(this.state32, this.rounds),
        Ue.isLE || (0, Ue.byteSwap32)(this.state32),
        (this.posOut = 0),
        (this.pos = 0));
    }
    update(t) {
      (0, Dt.aexists)(this);
      let { blockLen: r, state: n } = this;
      t = (0, Ue.toBytes)(t);
      let i = t.length;
      for (let o = 0; o < i; ) {
        let s = Math.min(r - this.pos, i - o);
        for (let a = 0; a < s; a++) n[this.pos++] ^= t[o++];
        this.pos === r && this.keccak();
      }
      return this;
    }
    finish() {
      if (this.finished) return;
      this.finished = !0;
      let { state: t, suffix: r, pos: n, blockLen: i } = this;
      ((t[n] ^= r), (r & 128) !== 0 && n === i - 1 && this.keccak(), (t[i - 1] ^= 128), this.keccak());
    }
    writeInto(t) {
      ((0, Dt.aexists)(this, !1), (0, Dt.abytes)(t), this.finish());
      let r = this.state,
        { blockLen: n } = this;
      for (let i = 0, o = t.length; i < o; ) {
        this.posOut >= n && this.keccak();
        let s = Math.min(n - this.posOut, o - i);
        (t.set(r.subarray(this.posOut, this.posOut + s), i), (this.posOut += s), (i += s));
      }
      return t;
    }
    xofInto(t) {
      if (!this.enableXOF) throw new Error('XOF is not possible for this instance');
      return this.writeInto(t);
    }
    xof(t) {
      return ((0, Dt.anumber)(t), this.xofInto(new Uint8Array(t)));
    }
    digestInto(t) {
      if (((0, Dt.aoutput)(t, this), this.finished)) throw new Error('digest() was already called');
      return (this.writeInto(t), this.destroy(), t);
    }
    digest() {
      return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
      ((this.destroyed = !0), this.state.fill(0));
    }
    _cloneInto(t) {
      let { blockLen: r, suffix: n, outputLen: i, rounds: o, enableXOF: s } = this;
      return (
        t || (t = new e(r, n, i, s, o)),
        t.state32.set(this.state32),
        (t.pos = this.pos),
        (t.posOut = this.posOut),
        (t.finished = this.finished),
        (t.rounds = o),
        (t.suffix = n),
        (t.outputLen = i),
        (t.enableXOF = s),
        (t.destroyed = this.destroyed),
        t
      );
    }
  };
  G.Keccak = br;
  var He = (e, t, r) => (0, Ue.wrapConstructor)(() => new br(t, e, r));
  G.sha3_224 = He(6, 144, 224 / 8);
  G.sha3_256 = He(6, 136, 256 / 8);
  G.sha3_384 = He(6, 104, 384 / 8);
  G.sha3_512 = He(6, 72, 512 / 8);
  G.keccak_224 = He(1, 144, 224 / 8);
  G.keccak_256 = He(1, 136, 256 / 8);
  G.keccak_384 = He(1, 104, 384 / 8);
  G.keccak_512 = He(1, 72, 512 / 8);
  var Al = (e, t, r) =>
    (0, Ue.wrapXOFConstructorWithOpts)((n = {}) => new br(t, e, n.dkLen === void 0 ? r : n.dkLen, !0));
  G.shake128 = Al(31, 168, 128 / 8);
  G.shake256 = Al(31, 136, 256 / 8);
});
var Ml = se((_1, We) => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
  var { sha3_512: zm } = Cl(),
    Sl = 24,
    Er = 32,
    Wi = (e = 4, t = Math.random) => {
      let r = '';
      for (; r.length < e; ) r = r + Math.floor(t() * 36).toString(36);
      return r;
    };
  function Il(e) {
    let t = 8n,
      r = 0n;
    for (let n of e.values()) {
      let i = BigInt(n);
      r = (r << t) + i;
    }
    return r;
  }
  var Ol = (e = '') => Il(zm(e)).toString(36).slice(1),
    Rl = Array.from({ length: 26 }, (e, t) => String.fromCharCode(t + 97)),
    Ym = (e) => Rl[Math.floor(e() * Rl.length)],
    kl = ({
      globalObj: e = typeof globalThis < 'u' ? globalThis : typeof window < 'u' ? window : {},
      random: t = Math.random,
    } = {}) => {
      let r = Object.keys(e).toString(),
        n = r.length ? r + Wi(Er, t) : Wi(Er, t);
      return Ol(n).substring(0, Er);
    },
    Dl = (e) => () => e++,
    Zm = 476782367,
    _l = ({
      random: e = Math.random,
      counter: t = Dl(Math.floor(e() * Zm)),
      length: r = Sl,
      fingerprint: n = kl({ random: e }),
    } = {}) =>
      function () {
        let o = Ym(e),
          s = Date.now().toString(36),
          a = t().toString(36),
          f = Wi(r, e),
          w = `${s + f + a + n}`;
        return `${o + Ol(w).substring(1, r)}`;
      },
    Xm = _l(),
    ed = (e, { minLength: t = 2, maxLength: r = Er } = {}) => {
      let n = e.length,
        i = /^[0-9a-z]+$/;
      try {
        if (typeof e == 'string' && n >= t && n <= r && i.test(e)) return !0;
      } finally {
      }
      return !1;
    };
  We.exports.getConstants = () => ({ defaultLength: Sl, bigLength: Er });
  We.exports.init = _l;
  We.exports.createId = Xm;
  We.exports.bufToBigInt = Il;
  We.exports.createCounter = Dl;
  We.exports.createFingerprint = kl;
  We.exports.isCuid = ed;
});
var Nl = se((V1, xr) => {
  'use strict';
  u();
  c();
  p();
  m();
  d();
  l();
  var { createId: td, init: rd, getConstants: nd, isCuid: id } = Ml();
  xr.exports.createId = td;
  xr.exports.init = rd;
  xr.exports.getConstants = nd;
  xr.exports.isCuid = id;
});
var sf = {};
pt(sf, {
  DMMF: () => Xt,
  Debug: () => J,
  Decimal: () => re,
  Extensions: () => ii,
  MetricsClient: () => Rt,
  PrismaClientInitializationError: () => L,
  PrismaClientKnownRequestError: () => X,
  PrismaClientRustPanicError: () => ae,
  PrismaClientUnknownRequestError: () => oe,
  PrismaClientValidationError: () => ne,
  Public: () => oi,
  Sql: () => me,
  createParam: () => Hs,
  defineDmmfProperty: () => Zs,
  deserializeJsonResponse: () => Ve,
  deserializeRawResult: () => zn,
  dmmfToRuntimeDataModel: () => Ts,
  empty: () => na,
  getPrismaClient: () => qu,
  getRuntime: () => Qe,
  join: () => ra,
  makeStrictEnum: () => Bu,
  makeTypedQueryFactory: () => Xs,
  objectEnumValues: () => dn,
  raw: () => Ai,
  serializeJsonQuery: () => En,
  skip: () => bn,
  sqltag: () => Ci,
  warnEnvConflicts: () => void 0,
  warnOnce: () => zt,
});
module.exports = Io(sf);
u();
c();
p();
m();
d();
l();
var ii = {};
pt(ii, { defineExtension: () => Vo, getExtensionContext: () => qo });
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
function Vo(e) {
  return typeof e == 'function' ? e : (t) => t.$extends(e);
}
u();
c();
p();
m();
d();
l();
function qo(e) {
  return e;
}
var oi = {};
pt(oi, { validator: () => Bo });
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
function Bo(...e) {
  return (t) => t;
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var si,
  jo,
  Qo,
  Go,
  Ho = !0;
typeof g < 'u' &&
  (({ FORCE_COLOR: si, NODE_DISABLE_COLORS: jo, NO_COLOR: Qo, TERM: Go } = g.env || {}),
  (Ho = g.stdout && g.stdout.isTTY));
var ac = { enabled: !jo && Qo == null && Go !== 'dumb' && ((si != null && si !== '0') || Ho) };
function q(e, t) {
  let r = new RegExp(`\\x1b\\[${t}m`, 'g'),
    n = `\x1B[${e}m`,
    i = `\x1B[${t}m`;
  return function (o) {
    return !ac.enabled || o == null ? o : n + (~('' + o).indexOf(i) ? o.replace(r, i + n) : o) + i;
  };
}
var ig = q(0, 0),
  Kr = q(1, 22),
  zr = q(2, 22),
  og = q(3, 23),
  Yr = q(4, 24),
  sg = q(7, 27),
  ag = q(8, 28),
  lg = q(9, 29),
  ug = q(30, 39),
  ft = q(31, 39),
  Wo = q(32, 39),
  Jo = q(33, 39),
  Ko = q(34, 39),
  cg = q(35, 39),
  zo = q(36, 39),
  pg = q(37, 39),
  Yo = q(90, 39),
  mg = q(90, 39),
  dg = q(40, 49),
  fg = q(41, 49),
  gg = q(42, 49),
  yg = q(43, 49),
  hg = q(44, 49),
  wg = q(45, 49),
  bg = q(46, 49),
  Eg = q(47, 49);
u();
c();
p();
m();
d();
l();
var lc = 100,
  Zo = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red'],
  Qt = [],
  Xo = Date.now(),
  uc = 0,
  ai = typeof g < 'u' ? g.env : {};
globalThis.DEBUG ??= ai.DEBUG ?? '';
globalThis.DEBUG_COLORS ??= ai.DEBUG_COLORS ? ai.DEBUG_COLORS === 'true' : !0;
var Gt = {
  enable(e) {
    typeof e == 'string' && (globalThis.DEBUG = e);
  },
  disable() {
    let e = globalThis.DEBUG;
    return ((globalThis.DEBUG = ''), e);
  },
  enabled(e) {
    let t = globalThis.DEBUG.split(',').map((i) => i.replace(/[.+?^${}()|[\]\\]/g, '\\$&')),
      r = t.some((i) => (i === '' || i[0] === '-' ? !1 : e.match(RegExp(i.split('*').join('.*') + '$')))),
      n = t.some((i) => (i === '' || i[0] !== '-' ? !1 : e.match(RegExp(i.slice(1).split('*').join('.*') + '$'))));
    return r && !n;
  },
  log: (...e) => {
    let [t, r, ...n] = e;
    (console.warn ?? console.log)(`${t} ${r}`, ...n);
  },
  formatters: {},
};
function cc(e) {
  let t = { color: Zo[uc++ % Zo.length], enabled: Gt.enabled(e), namespace: e, log: Gt.log, extend: () => {} },
    r = (...n) => {
      let { enabled: i, namespace: o, color: s, log: a } = t;
      if ((n.length !== 0 && Qt.push([o, ...n]), Qt.length > lc && Qt.shift(), Gt.enabled(o) || i)) {
        let f = n.map((v) => (typeof v == 'string' ? v : pc(v))),
          w = `+${Date.now() - Xo}ms`;
        ((Xo = Date.now()), a(o, ...f, w));
      }
    };
  return new Proxy(r, { get: (n, i) => t[i], set: (n, i, o) => (t[i] = o) });
}
var J = new Proxy(cc, { get: (e, t) => Gt[t], set: (e, t, r) => (Gt[t] = r) });
function pc(e, t = 2) {
  let r = new Set();
  return JSON.stringify(
    e,
    (n, i) => {
      if (typeof i == 'object' && i !== null) {
        if (r.has(i)) return '[Circular *]';
        r.add(i);
      } else if (typeof i == 'bigint') return i.toString();
      return i;
    },
    t
  );
}
function es(e = 7500) {
  let t = Qt.map(([r, ...n]) => `${r} ${n.map((i) => (typeof i == 'string' ? i : JSON.stringify(i))).join(' ')}`).join(`
`);
  return t.length < e ? t : t.slice(-e);
}
function ts() {
  Qt.length = 0;
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var Dc = cs(),
  li = Dc.version;
u();
c();
p();
m();
d();
l();
function gt(e) {
  let t = _c();
  return (
    t ||
    (e?.config.engineType === 'library'
      ? 'library'
      : e?.config.engineType === 'binary'
        ? 'binary'
        : e?.config.engineType === 'client'
          ? 'client'
          : Mc(e))
  );
}
function _c() {
  let e = g.env.PRISMA_CLIENT_ENGINE_TYPE;
  return e === 'library' ? 'library' : e === 'binary' ? 'binary' : e === 'client' ? 'client' : void 0;
}
function Mc(e) {
  return e?.previewFeatures.includes('queryCompiler') ? 'client' : 'library';
}
u();
c();
p();
m();
d();
l();
var ms = 'prisma+postgres',
  tn = `${ms}:`;
function rn(e) {
  return e?.toString().startsWith(`${tn}//`) ?? !1;
}
function ci(e) {
  if (!rn(e)) return !1;
  let { host: t } = new URL(e);
  return t.includes('localhost') || t.includes('127.0.0.1');
}
var Kt = {};
pt(Kt, {
  error: () => Uc,
  info: () => Lc,
  log: () => Nc,
  query: () => Fc,
  should: () => gs,
  tags: () => Jt,
  warn: () => pi,
});
u();
c();
p();
m();
d();
l();
var Jt = { error: ft('prisma:error'), warn: Jo('prisma:warn'), info: zo('prisma:info'), query: Ko('prisma:query') },
  gs = { warn: () => !g.env.PRISMA_DISABLE_WARNINGS };
function Nc(...e) {
  console.log(...e);
}
function pi(e, ...t) {
  gs.warn() && console.warn(`${Jt.warn} ${e}`, ...t);
}
function Lc(e, ...t) {
  console.info(`${Jt.info} ${e}`, ...t);
}
function Uc(e, ...t) {
  console.error(`${Jt.error} ${e}`, ...t);
}
function Fc(e, ...t) {
  console.log(`${Jt.query} ${e}`, ...t);
}
u();
c();
p();
m();
d();
l();
function xe(e, t) {
  throw new Error(t);
}
u();
c();
p();
m();
d();
l();
function di(e, t) {
  return Object.prototype.hasOwnProperty.call(e, t);
}
u();
c();
p();
m();
d();
l();
function ht(e, t) {
  let r = {};
  for (let n of Object.keys(e)) r[n] = t(e[n], n);
  return r;
}
u();
c();
p();
m();
d();
l();
function fi(e, t) {
  if (e.length === 0) return;
  let r = e[0];
  for (let n = 1; n < e.length; n++) t(r, e[n]) < 0 && (r = e[n]);
  return r;
}
u();
c();
p();
m();
d();
l();
function O(e, t) {
  Object.defineProperty(e, 'name', { value: t, configurable: !0 });
}
u();
c();
p();
m();
d();
l();
var Es = new Set(),
  zt = (e, t, ...r) => {
    Es.has(e) || (Es.add(e), pi(t, ...r));
  };
var L = class e extends Error {
  clientVersion;
  errorCode;
  retryable;
  constructor(t, r, n) {
    (super(t),
      (this.name = 'PrismaClientInitializationError'),
      (this.clientVersion = r),
      (this.errorCode = n),
      Error.captureStackTrace(e));
  }
  get [Symbol.toStringTag]() {
    return 'PrismaClientInitializationError';
  }
};
O(L, 'PrismaClientInitializationError');
u();
c();
p();
m();
d();
l();
var X = class extends Error {
  code;
  meta;
  clientVersion;
  batchRequestIdx;
  constructor(t, { code: r, clientVersion: n, meta: i, batchRequestIdx: o }) {
    (super(t),
      (this.name = 'PrismaClientKnownRequestError'),
      (this.code = r),
      (this.clientVersion = n),
      (this.meta = i),
      Object.defineProperty(this, 'batchRequestIdx', { value: o, enumerable: !1, writable: !0 }));
  }
  get [Symbol.toStringTag]() {
    return 'PrismaClientKnownRequestError';
  }
};
O(X, 'PrismaClientKnownRequestError');
u();
c();
p();
m();
d();
l();
var ae = class extends Error {
  clientVersion;
  constructor(t, r) {
    (super(t), (this.name = 'PrismaClientRustPanicError'), (this.clientVersion = r));
  }
  get [Symbol.toStringTag]() {
    return 'PrismaClientRustPanicError';
  }
};
O(ae, 'PrismaClientRustPanicError');
u();
c();
p();
m();
d();
l();
var oe = class extends Error {
  clientVersion;
  batchRequestIdx;
  constructor(t, { clientVersion: r, batchRequestIdx: n }) {
    (super(t),
      (this.name = 'PrismaClientUnknownRequestError'),
      (this.clientVersion = r),
      Object.defineProperty(this, 'batchRequestIdx', { value: n, writable: !0, enumerable: !1 }));
  }
  get [Symbol.toStringTag]() {
    return 'PrismaClientUnknownRequestError';
  }
};
O(oe, 'PrismaClientUnknownRequestError');
u();
c();
p();
m();
d();
l();
var ne = class extends Error {
  name = 'PrismaClientValidationError';
  clientVersion;
  constructor(t, { clientVersion: r }) {
    (super(t), (this.clientVersion = r));
  }
  get [Symbol.toStringTag]() {
    return 'PrismaClientValidationError';
  }
};
O(ne, 'PrismaClientValidationError');
u();
c();
p();
m();
d();
l();
l();
function Ve(e) {
  return e === null
    ? e
    : Array.isArray(e)
      ? e.map(Ve)
      : typeof e == 'object'
        ? Vc(e)
          ? qc(e)
          : e.constructor !== null && e.constructor.name !== 'Object'
            ? e
            : ht(e, Ve)
        : e;
}
function Vc(e) {
  return e !== null && typeof e == 'object' && typeof e.$type == 'string';
}
function qc({ $type: e, value: t }) {
  switch (e) {
    case 'BigInt':
      return BigInt(t);
    case 'Bytes': {
      let { buffer: r, byteOffset: n, byteLength: i } = y.from(t, 'base64');
      return new Uint8Array(r, n, i);
    }
    case 'DateTime':
      return new Date(t);
    case 'Decimal':
      return new re(t);
    case 'Json':
      return JSON.parse(t);
    default:
      xe(t, 'Unknown tagged value');
  }
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var Re = class {
  _map = new Map();
  get(t) {
    return this._map.get(t)?.value;
  }
  set(t, r) {
    this._map.set(t, { value: r });
  }
  getOrCreate(t, r) {
    let n = this._map.get(t);
    if (n) return n.value;
    let i = r();
    return (this.set(t, i), i);
  }
};
u();
c();
p();
m();
d();
l();
function qe(e) {
  return e.substring(0, 1).toLowerCase() + e.substring(1);
}
u();
c();
p();
m();
d();
l();
function Ps(e, t) {
  let r = {};
  for (let n of e) {
    let i = n[t];
    r[i] = n;
  }
  return r;
}
u();
c();
p();
m();
d();
l();
function Yt(e) {
  let t;
  return {
    get() {
      return (t || (t = { value: e() }), t.value);
    },
  };
}
u();
c();
p();
m();
d();
l();
function Ts(e) {
  return { models: gi(e.models), enums: gi(e.enums), types: gi(e.types) };
}
function gi(e) {
  let t = {};
  for (let { name: r, ...n } of e) t[r] = n;
  return t;
}
u();
c();
p();
m();
d();
l();
function wt(e) {
  return e instanceof Date || Object.prototype.toString.call(e) === '[object Date]';
}
function on(e) {
  return e.toString() !== 'Invalid Date';
}
u();
c();
p();
m();
d();
l();
l();
function bt(e) {
  return T.isDecimal(e)
    ? !0
    : e !== null &&
        typeof e == 'object' &&
        typeof e.s == 'number' &&
        typeof e.e == 'number' &&
        typeof e.toFixed == 'function' &&
        Array.isArray(e.d);
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var Xt = {};
pt(Xt, { ModelAction: () => Zt, datamodelEnumToSchemaEnum: () => Bc });
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
function Bc(e) {
  return { name: e.name, values: e.values.map((t) => t.name) };
}
u();
c();
p();
m();
d();
l();
var Zt = ((V) => (
  (V.findUnique = 'findUnique'),
  (V.findUniqueOrThrow = 'findUniqueOrThrow'),
  (V.findFirst = 'findFirst'),
  (V.findFirstOrThrow = 'findFirstOrThrow'),
  (V.findMany = 'findMany'),
  (V.create = 'create'),
  (V.createMany = 'createMany'),
  (V.createManyAndReturn = 'createManyAndReturn'),
  (V.update = 'update'),
  (V.updateMany = 'updateMany'),
  (V.updateManyAndReturn = 'updateManyAndReturn'),
  (V.upsert = 'upsert'),
  (V.delete = 'delete'),
  (V.deleteMany = 'deleteMany'),
  (V.groupBy = 'groupBy'),
  (V.count = 'count'),
  (V.aggregate = 'aggregate'),
  (V.findRaw = 'findRaw'),
  (V.aggregateRaw = 'aggregateRaw'),
  V
))(Zt || {});
var jc = _e(fs());
var Qc = { red: ft, gray: Yo, dim: zr, bold: Kr, underline: Yr, highlightSource: (e) => e.highlight() },
  Gc = { red: (e) => e, gray: (e) => e, dim: (e) => e, bold: (e) => e, underline: (e) => e, highlightSource: (e) => e };
function Hc({ message: e, originalMethod: t, isPanic: r, callArguments: n }) {
  return { functionName: `prisma.${t}()`, message: e, isPanic: r ?? !1, callArguments: n };
}
function Wc({ functionName: e, location: t, message: r, isPanic: n, contextLines: i, callArguments: o }, s) {
  let a = [''],
    f = t ? ' in' : ':';
  if (
    (n
      ? (a.push(s.red(`Oops, an unknown error occurred! This is ${s.bold('on us')}, you did nothing wrong.`)),
        a.push(s.red(`It occurred in the ${s.bold(`\`${e}\``)} invocation${f}`)))
      : a.push(s.red(`Invalid ${s.bold(`\`${e}\``)} invocation${f}`)),
    t && a.push(s.underline(Jc(t))),
    i)
  ) {
    a.push('');
    let w = [i.toString()];
    (o && (w.push(o), w.push(s.dim(')'))), a.push(w.join('')), o && a.push(''));
  } else (a.push(''), o && a.push(o), a.push(''));
  return (
    a.push(r),
    a.join(`
`)
  );
}
function Jc(e) {
  let t = [e.fileName];
  return (e.lineNumber && t.push(String(e.lineNumber)), e.columnNumber && t.push(String(e.columnNumber)), t.join(':'));
}
function sn(e) {
  let t = e.showColors ? Qc : Gc,
    r;
  return (typeof $getTemplateParameters < 'u' ? (r = $getTemplateParameters(e, t)) : (r = Hc(e)), Wc(r, t));
}
u();
c();
p();
m();
d();
l();
var Ds = _e(yi());
u();
c();
p();
m();
d();
l();
function Rs(e, t, r) {
  let n = Ss(e),
    i = Kc(n),
    o = Yc(i);
  o ? an(o, t, r) : t.addErrorMessage(() => 'Unknown error');
}
function Ss(e) {
  return e.errors.flatMap((t) => (t.kind === 'Union' ? Ss(t) : [t]));
}
function Kc(e) {
  let t = new Map(),
    r = [];
  for (let n of e) {
    if (n.kind !== 'InvalidArgumentType') {
      r.push(n);
      continue;
    }
    let i = `${n.selectionPath.join('.')}:${n.argumentPath.join('.')}`,
      o = t.get(i);
    o
      ? t.set(i, { ...n, argument: { ...n.argument, typeNames: zc(o.argument.typeNames, n.argument.typeNames) } })
      : t.set(i, n);
  }
  return (r.push(...t.values()), r);
}
function zc(e, t) {
  return [...new Set(e.concat(t))];
}
function Yc(e) {
  return fi(e, (t, r) => {
    let n = As(t),
      i = As(r);
    return n !== i ? n - i : Cs(t) - Cs(r);
  });
}
function As(e) {
  let t = 0;
  return (
    Array.isArray(e.selectionPath) && (t += e.selectionPath.length),
    Array.isArray(e.argumentPath) && (t += e.argumentPath.length),
    t
  );
}
function Cs(e) {
  switch (e.kind) {
    case 'InvalidArgumentValue':
    case 'ValueTooLarge':
      return 20;
    case 'InvalidArgumentType':
      return 10;
    case 'RequiredArgumentMissing':
      return -10;
    default:
      return 0;
  }
}
u();
c();
p();
m();
d();
l();
var ye = class {
  constructor(t, r) {
    this.name = t;
    this.value = r;
  }
  isRequired = !1;
  makeRequired() {
    return ((this.isRequired = !0), this);
  }
  write(t) {
    let {
      colors: { green: r },
    } = t.context;
    (t.addMarginSymbol(r(this.isRequired ? '+' : '?')),
      t.write(r(this.name)),
      this.isRequired || t.write(r('?')),
      t.write(r(': ')),
      typeof this.value == 'string' ? t.write(r(this.value)) : t.write(this.value));
  }
};
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
Os();
u();
c();
p();
m();
d();
l();
var Et = class {
  constructor(t = 0, r) {
    this.context = r;
    this.currentIndent = t;
  }
  lines = [];
  currentLine = '';
  currentIndent = 0;
  marginSymbol;
  afterNextNewLineCallback;
  write(t) {
    return (typeof t == 'string' ? (this.currentLine += t) : t.write(this), this);
  }
  writeJoined(t, r, n = (i, o) => o.write(i)) {
    let i = r.length - 1;
    for (let o = 0; o < r.length; o++) (n(r[o], this), o !== i && this.write(t));
    return this;
  }
  writeLine(t) {
    return this.write(t).newLine();
  }
  newLine() {
    (this.lines.push(this.indentedCurrentLine()), (this.currentLine = ''), (this.marginSymbol = void 0));
    let t = this.afterNextNewLineCallback;
    return ((this.afterNextNewLineCallback = void 0), t?.(), this);
  }
  withIndent(t) {
    return (this.indent(), t(this), this.unindent(), this);
  }
  afterNextNewline(t) {
    return ((this.afterNextNewLineCallback = t), this);
  }
  indent() {
    return (this.currentIndent++, this);
  }
  unindent() {
    return (this.currentIndent > 0 && this.currentIndent--, this);
  }
  addMarginSymbol(t) {
    return ((this.marginSymbol = t), this);
  }
  toString() {
    return this.lines.concat(this.indentedCurrentLine()).join(`
`);
  }
  getCurrentLineLength() {
    return this.currentLine.length;
  }
  indentedCurrentLine() {
    let t = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);
    return this.marginSymbol ? this.marginSymbol + t.slice(1) : t;
  }
};
Is();
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var ln = class {
  constructor(t) {
    this.value = t;
  }
  write(t) {
    t.write(this.value);
  }
  markAsError() {
    this.value.markAsError();
  }
};
u();
c();
p();
m();
d();
l();
var un = (e) => e,
  cn = { bold: un, red: un, green: un, dim: un, enabled: !1 },
  ks = { bold: Kr, red: ft, green: Wo, dim: zr, enabled: !0 },
  xt = {
    write(e) {
      e.writeLine(',');
    },
  };
u();
c();
p();
m();
d();
l();
var Se = class {
  constructor(t) {
    this.contents = t;
  }
  isUnderlined = !1;
  color = (t) => t;
  underline() {
    return ((this.isUnderlined = !0), this);
  }
  setColor(t) {
    return ((this.color = t), this);
  }
  write(t) {
    let r = t.getCurrentLineLength();
    (t.write(this.color(this.contents)),
      this.isUnderlined &&
        t.afterNextNewline(() => {
          t.write(' '.repeat(r)).writeLine(this.color('~'.repeat(this.contents.length)));
        }));
  }
};
u();
c();
p();
m();
d();
l();
var Be = class {
  hasError = !1;
  markAsError() {
    return ((this.hasError = !0), this);
  }
};
var Pt = class extends Be {
  items = [];
  addItem(t) {
    return (this.items.push(new ln(t)), this);
  }
  getField(t) {
    return this.items[t];
  }
  getPrintWidth() {
    return this.items.length === 0 ? 2 : Math.max(...this.items.map((r) => r.value.getPrintWidth())) + 2;
  }
  write(t) {
    if (this.items.length === 0) {
      this.writeEmpty(t);
      return;
    }
    this.writeWithItems(t);
  }
  writeEmpty(t) {
    let r = new Se('[]');
    (this.hasError && r.setColor(t.context.colors.red).underline(), t.write(r));
  }
  writeWithItems(t) {
    let { colors: r } = t.context;
    (t
      .writeLine('[')
      .withIndent(() => t.writeJoined(xt, this.items).newLine())
      .write(']'),
      this.hasError &&
        t.afterNextNewline(() => {
          t.writeLine(r.red('~'.repeat(this.getPrintWidth())));
        }));
  }
  asObject() {}
};
var Tt = class e extends Be {
  fields = {};
  suggestions = [];
  addField(t) {
    this.fields[t.name] = t;
  }
  addSuggestion(t) {
    this.suggestions.push(t);
  }
  getField(t) {
    return this.fields[t];
  }
  getDeepField(t) {
    let [r, ...n] = t,
      i = this.getField(r);
    if (!i) return;
    let o = i;
    for (let s of n) {
      let a;
      if (
        (o.value instanceof e ? (a = o.value.getField(s)) : o.value instanceof Pt && (a = o.value.getField(Number(s))),
        !a)
      )
        return;
      o = a;
    }
    return o;
  }
  getDeepFieldValue(t) {
    return t.length === 0 ? this : this.getDeepField(t)?.value;
  }
  hasField(t) {
    return !!this.getField(t);
  }
  removeAllFields() {
    this.fields = {};
  }
  removeField(t) {
    delete this.fields[t];
  }
  getFields() {
    return this.fields;
  }
  isEmpty() {
    return Object.keys(this.fields).length === 0;
  }
  getFieldValue(t) {
    return this.getField(t)?.value;
  }
  getDeepSubSelectionValue(t) {
    let r = this;
    for (let n of t) {
      if (!(r instanceof e)) return;
      let i = r.getSubSelectionValue(n);
      if (!i) return;
      r = i;
    }
    return r;
  }
  getDeepSelectionParent(t) {
    let r = this.getSelectionParent();
    if (!r) return;
    let n = r;
    for (let i of t) {
      let o = n.value.getFieldValue(i);
      if (!o || !(o instanceof e)) return;
      let s = o.getSelectionParent();
      if (!s) return;
      n = s;
    }
    return n;
  }
  getSelectionParent() {
    let t = this.getField('select')?.value.asObject();
    if (t) return { kind: 'select', value: t };
    let r = this.getField('include')?.value.asObject();
    if (r) return { kind: 'include', value: r };
  }
  getSubSelectionValue(t) {
    return this.getSelectionParent()?.value.fields[t].value;
  }
  getPrintWidth() {
    let t = Object.values(this.fields);
    return t.length == 0 ? 2 : Math.max(...t.map((n) => n.getPrintWidth())) + 2;
  }
  write(t) {
    let r = Object.values(this.fields);
    if (r.length === 0 && this.suggestions.length === 0) {
      this.writeEmpty(t);
      return;
    }
    this.writeWithContents(t, r);
  }
  asObject() {
    return this;
  }
  writeEmpty(t) {
    let r = new Se('{}');
    (this.hasError && r.setColor(t.context.colors.red).underline(), t.write(r));
  }
  writeWithContents(t, r) {
    (t.writeLine('{').withIndent(() => {
      t.writeJoined(xt, [...r, ...this.suggestions]).newLine();
    }),
      t.write('}'),
      this.hasError &&
        t.afterNextNewline(() => {
          t.writeLine(t.context.colors.red('~'.repeat(this.getPrintWidth())));
        }));
  }
};
u();
c();
p();
m();
d();
l();
var te = class extends Be {
  constructor(r) {
    super();
    this.text = r;
  }
  getPrintWidth() {
    return this.text.length;
  }
  write(r) {
    let n = new Se(this.text);
    (this.hasError && n.underline().setColor(r.context.colors.red), r.write(n));
  }
  asObject() {}
};
u();
c();
p();
m();
d();
l();
var er = class {
  fields = [];
  addField(t, r) {
    return (
      this.fields.push({
        write(n) {
          let { green: i, dim: o } = n.context.colors;
          n.write(i(o(`${t}: ${r}`))).addMarginSymbol(i(o('+')));
        },
      }),
      this
    );
  }
  write(t) {
    let {
      colors: { green: r },
    } = t.context;
    t.writeLine(r('{'))
      .withIndent(() => {
        t.writeJoined(xt, this.fields).newLine();
      })
      .write(r('}'))
      .addMarginSymbol(r('+'));
  }
};
function an(e, t, r) {
  switch (e.kind) {
    case 'MutuallyExclusiveFields':
      Zc(e, t);
      break;
    case 'IncludeOnScalar':
      Xc(e, t);
      break;
    case 'EmptySelection':
      ep(e, t, r);
      break;
    case 'UnknownSelectionField':
      ip(e, t);
      break;
    case 'InvalidSelectionValue':
      op(e, t);
      break;
    case 'UnknownArgument':
      sp(e, t);
      break;
    case 'UnknownInputField':
      ap(e, t);
      break;
    case 'RequiredArgumentMissing':
      lp(e, t);
      break;
    case 'InvalidArgumentType':
      up(e, t);
      break;
    case 'InvalidArgumentValue':
      cp(e, t);
      break;
    case 'ValueTooLarge':
      pp(e, t);
      break;
    case 'SomeFieldsMissing':
      mp(e, t);
      break;
    case 'TooManyFieldsGiven':
      dp(e, t);
      break;
    case 'Union':
      Rs(e, t, r);
      break;
    default:
      throw new Error('not implemented: ' + e.kind);
  }
}
function Zc(e, t) {
  let r = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
  (r && (r.getField(e.firstField)?.markAsError(), r.getField(e.secondField)?.markAsError()),
    t.addErrorMessage(
      (n) =>
        `Please ${n.bold('either')} use ${n.green(`\`${e.firstField}\``)} or ${n.green(`\`${e.secondField}\``)}, but ${n.red('not both')} at the same time.`
    ));
}
function Xc(e, t) {
  let [r, n] = tr(e.selectionPath),
    i = e.outputType,
    o = t.arguments.getDeepSelectionParent(r)?.value;
  if (o && (o.getField(n)?.markAsError(), i))
    for (let s of i.fields) s.isRelation && o.addSuggestion(new ye(s.name, 'true'));
  t.addErrorMessage((s) => {
    let a = `Invalid scalar field ${s.red(`\`${n}\``)} for ${s.bold('include')} statement`;
    return (
      i ? (a += ` on model ${s.bold(i.name)}. ${rr(s)}`) : (a += '.'),
      (a += `
Note that ${s.bold('include')} statements only accept relation fields.`),
      a
    );
  });
}
function ep(e, t, r) {
  let n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
  if (n) {
    let i = n.getField('omit')?.value.asObject();
    if (i) {
      tp(e, t, i);
      return;
    }
    if (n.hasField('select')) {
      rp(e, t);
      return;
    }
  }
  if (r?.[qe(e.outputType.name)]) {
    np(e, t);
    return;
  }
  t.addErrorMessage(() => `Unknown field at "${e.selectionPath.join('.')} selection"`);
}
function tp(e, t, r) {
  r.removeAllFields();
  for (let n of e.outputType.fields) r.addSuggestion(new ye(n.name, 'false'));
  t.addErrorMessage(
    (n) =>
      `The ${n.red('omit')} statement includes every field of the model ${n.bold(e.outputType.name)}. At least one field must be included in the result`
  );
}
function rp(e, t) {
  let r = e.outputType,
    n = t.arguments.getDeepSelectionParent(e.selectionPath)?.value,
    i = n?.isEmpty() ?? !1;
  (n && (n.removeAllFields(), Ns(n, r)),
    t.addErrorMessage((o) =>
      i
        ? `The ${o.red('`select`')} statement for type ${o.bold(r.name)} must not be empty. ${rr(o)}`
        : `The ${o.red('`select`')} statement for type ${o.bold(r.name)} needs ${o.bold('at least one truthy value')}.`
    ));
}
function np(e, t) {
  let r = new er();
  for (let i of e.outputType.fields) i.isRelation || r.addField(i.name, 'false');
  let n = new ye('omit', r).makeRequired();
  if (e.selectionPath.length === 0) t.arguments.addSuggestion(n);
  else {
    let [i, o] = tr(e.selectionPath),
      a = t.arguments.getDeepSelectionParent(i)?.value.asObject()?.getField(o);
    if (a) {
      let f = a?.value.asObject() ?? new Tt();
      (f.addSuggestion(n), (a.value = f));
    }
  }
  t.addErrorMessage(
    (i) =>
      `The global ${i.red('omit')} configuration excludes every field of the model ${i.bold(e.outputType.name)}. At least one field must be included in the result`
  );
}
function ip(e, t) {
  let r = Ls(e.selectionPath, t);
  if (r.parentKind !== 'unknown') {
    r.field.markAsError();
    let n = r.parent;
    switch (r.parentKind) {
      case 'select':
        Ns(n, e.outputType);
        break;
      case 'include':
        fp(n, e.outputType);
        break;
      case 'omit':
        gp(n, e.outputType);
        break;
    }
  }
  t.addErrorMessage((n) => {
    let i = [`Unknown field ${n.red(`\`${r.fieldName}\``)}`];
    return (
      r.parentKind !== 'unknown' && i.push(`for ${n.bold(r.parentKind)} statement`),
      i.push(`on model ${n.bold(`\`${e.outputType.name}\``)}.`),
      i.push(rr(n)),
      i.join(' ')
    );
  });
}
function op(e, t) {
  let r = Ls(e.selectionPath, t);
  (r.parentKind !== 'unknown' && r.field.value.markAsError(),
    t.addErrorMessage((n) => `Invalid value for selection field \`${n.red(r.fieldName)}\`: ${e.underlyingError}`));
}
function sp(e, t) {
  let r = e.argumentPath[0],
    n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
  (n && (n.getField(r)?.markAsError(), yp(n, e.arguments)),
    t.addErrorMessage((i) =>
      _s(
        i,
        r,
        e.arguments.map((o) => o.name)
      )
    ));
}
function ap(e, t) {
  let [r, n] = tr(e.argumentPath),
    i = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
  if (i) {
    i.getDeepField(e.argumentPath)?.markAsError();
    let o = i.getDeepFieldValue(r)?.asObject();
    o && Us(o, e.inputType);
  }
  t.addErrorMessage((o) =>
    _s(
      o,
      n,
      e.inputType.fields.map((s) => s.name)
    )
  );
}
function _s(e, t, r) {
  let n = [`Unknown argument \`${e.red(t)}\`.`],
    i = wp(t, r);
  return (i && n.push(`Did you mean \`${e.green(i)}\`?`), r.length > 0 && n.push(rr(e)), n.join(' '));
}
function lp(e, t) {
  let r;
  t.addErrorMessage((f) =>
    r?.value instanceof te && r.value.text === 'null'
      ? `Argument \`${f.green(o)}\` must not be ${f.red('null')}.`
      : `Argument \`${f.green(o)}\` is missing.`
  );
  let n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
  if (!n) return;
  let [i, o] = tr(e.argumentPath),
    s = new er(),
    a = n.getDeepFieldValue(i)?.asObject();
  if (a)
    if (((r = a.getField(o)), r && a.removeField(o), e.inputTypes.length === 1 && e.inputTypes[0].kind === 'object')) {
      for (let f of e.inputTypes[0].fields) s.addField(f.name, f.typeNames.join(' | '));
      a.addSuggestion(new ye(o, s).makeRequired());
    } else {
      let f = e.inputTypes.map(Ms).join(' | ');
      a.addSuggestion(new ye(o, f).makeRequired());
    }
}
function Ms(e) {
  return e.kind === 'list' ? `${Ms(e.elementType)}[]` : e.name;
}
function up(e, t) {
  let r = e.argument.name,
    n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
  (n && n.getDeepFieldValue(e.argumentPath)?.markAsError(),
    t.addErrorMessage((i) => {
      let o = pn(
        'or',
        e.argument.typeNames.map((s) => i.green(s))
      );
      return `Argument \`${i.bold(r)}\`: Invalid value provided. Expected ${o}, provided ${i.red(e.inferredType)}.`;
    }));
}
function cp(e, t) {
  let r = e.argument.name,
    n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
  (n && n.getDeepFieldValue(e.argumentPath)?.markAsError(),
    t.addErrorMessage((i) => {
      let o = [`Invalid value for argument \`${i.bold(r)}\``];
      if ((e.underlyingError && o.push(`: ${e.underlyingError}`), o.push('.'), e.argument.typeNames.length > 0)) {
        let s = pn(
          'or',
          e.argument.typeNames.map((a) => i.green(a))
        );
        o.push(` Expected ${s}.`);
      }
      return o.join('');
    }));
}
function pp(e, t) {
  let r = e.argument.name,
    n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(),
    i;
  if (n) {
    let s = n.getDeepField(e.argumentPath)?.value;
    (s?.markAsError(), s instanceof te && (i = s.text));
  }
  t.addErrorMessage((o) => {
    let s = ['Unable to fit value'];
    return (i && s.push(o.red(i)), s.push(`into a 64-bit signed integer for field \`${o.bold(r)}\``), s.join(' '));
  });
}
function mp(e, t) {
  let r = e.argumentPath[e.argumentPath.length - 1],
    n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
  if (n) {
    let i = n.getDeepFieldValue(e.argumentPath)?.asObject();
    i && Us(i, e.inputType);
  }
  t.addErrorMessage((i) => {
    let o = [`Argument \`${i.bold(r)}\` of type ${i.bold(e.inputType.name)} needs`];
    return (
      e.constraints.minFieldCount === 1
        ? e.constraints.requiredFields
          ? o.push(
              `${i.green('at least one of')} ${pn(
                'or',
                e.constraints.requiredFields.map((s) => `\`${i.bold(s)}\``)
              )} arguments.`
            )
          : o.push(`${i.green('at least one')} argument.`)
        : o.push(`${i.green(`at least ${e.constraints.minFieldCount}`)} arguments.`),
      o.push(rr(i)),
      o.join(' ')
    );
  });
}
function dp(e, t) {
  let r = e.argumentPath[e.argumentPath.length - 1],
    n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(),
    i = [];
  if (n) {
    let o = n.getDeepFieldValue(e.argumentPath)?.asObject();
    o && (o.markAsError(), (i = Object.keys(o.getFields())));
  }
  t.addErrorMessage((o) => {
    let s = [`Argument \`${o.bold(r)}\` of type ${o.bold(e.inputType.name)} needs`];
    return (
      e.constraints.minFieldCount === 1 && e.constraints.maxFieldCount == 1
        ? s.push(`${o.green('exactly one')} argument,`)
        : e.constraints.maxFieldCount == 1
          ? s.push(`${o.green('at most one')} argument,`)
          : s.push(`${o.green(`at most ${e.constraints.maxFieldCount}`)} arguments,`),
      s.push(
        `but you provided ${pn(
          'and',
          i.map((a) => o.red(a))
        )}. Please choose`
      ),
      e.constraints.maxFieldCount === 1 ? s.push('one.') : s.push(`${e.constraints.maxFieldCount}.`),
      s.join(' ')
    );
  });
}
function Ns(e, t) {
  for (let r of t.fields) e.hasField(r.name) || e.addSuggestion(new ye(r.name, 'true'));
}
function fp(e, t) {
  for (let r of t.fields) r.isRelation && !e.hasField(r.name) && e.addSuggestion(new ye(r.name, 'true'));
}
function gp(e, t) {
  for (let r of t.fields) !e.hasField(r.name) && !r.isRelation && e.addSuggestion(new ye(r.name, 'true'));
}
function yp(e, t) {
  for (let r of t) e.hasField(r.name) || e.addSuggestion(new ye(r.name, r.typeNames.join(' | ')));
}
function Ls(e, t) {
  let [r, n] = tr(e),
    i = t.arguments.getDeepSubSelectionValue(r)?.asObject();
  if (!i) return { parentKind: 'unknown', fieldName: n };
  let o = i.getFieldValue('select')?.asObject(),
    s = i.getFieldValue('include')?.asObject(),
    a = i.getFieldValue('omit')?.asObject(),
    f = o?.getField(n);
  return o && f
    ? { parentKind: 'select', parent: o, field: f, fieldName: n }
    : ((f = s?.getField(n)),
      s && f
        ? { parentKind: 'include', field: f, parent: s, fieldName: n }
        : ((f = a?.getField(n)),
          a && f
            ? { parentKind: 'omit', field: f, parent: a, fieldName: n }
            : { parentKind: 'unknown', fieldName: n }));
}
function Us(e, t) {
  if (t.kind === 'object')
    for (let r of t.fields) e.hasField(r.name) || e.addSuggestion(new ye(r.name, r.typeNames.join(' | ')));
}
function tr(e) {
  let t = [...e],
    r = t.pop();
  if (!r) throw new Error('unexpected empty path');
  return [t, r];
}
function rr({ green: e, enabled: t }) {
  return 'Available options are ' + (t ? `listed in ${e('green')}` : 'marked with ?') + '.';
}
function pn(e, t) {
  if (t.length === 1) return t[0];
  let r = [...t],
    n = r.pop();
  return `${r.join(', ')} ${e} ${n}`;
}
var hp = 3;
function wp(e, t) {
  let r = 1 / 0,
    n;
  for (let i of t) {
    let o = (0, Ds.default)(e, i);
    o > hp || (o < r && ((r = o), (n = i)));
  }
  return n;
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var nr = class {
  modelName;
  name;
  typeName;
  isList;
  isEnum;
  constructor(t, r, n, i, o) {
    ((this.modelName = t), (this.name = r), (this.typeName = n), (this.isList = i), (this.isEnum = o));
  }
  _toGraphQLInputType() {
    let t = this.isList ? 'List' : '',
      r = this.isEnum ? 'Enum' : '';
    return `${t}${r}${this.typeName}FieldRefInput<${this.modelName}>`;
  }
};
function vt(e) {
  return e instanceof nr;
}
u();
c();
p();
m();
d();
l();
var mn = Symbol(),
  wi = new WeakMap(),
  Ne = class {
    constructor(t) {
      t === mn
        ? wi.set(this, `Prisma.${this._getName()}`)
        : wi.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);
    }
    _getName() {
      return this.constructor.name;
    }
    toString() {
      return wi.get(this);
    }
  },
  ir = class extends Ne {
    _getNamespace() {
      return 'NullTypes';
    }
  },
  or = class extends ir {
    #e;
  };
bi(or, 'DbNull');
var sr = class extends ir {
  #e;
};
bi(sr, 'JsonNull');
var ar = class extends ir {
  #e;
};
bi(ar, 'AnyNull');
var dn = {
  classes: { DbNull: or, JsonNull: sr, AnyNull: ar },
  instances: { DbNull: new or(mn), JsonNull: new sr(mn), AnyNull: new ar(mn) },
};
function bi(e, t) {
  Object.defineProperty(e, 'name', { value: t, configurable: !0 });
}
u();
c();
p();
m();
d();
l();
var Fs = ': ',
  fn = class {
    constructor(t, r) {
      this.name = t;
      this.value = r;
    }
    hasError = !1;
    markAsError() {
      this.hasError = !0;
    }
    getPrintWidth() {
      return this.name.length + this.value.getPrintWidth() + Fs.length;
    }
    write(t) {
      let r = new Se(this.name);
      (this.hasError && r.underline().setColor(t.context.colors.red), t.write(r).write(Fs).write(this.value));
    }
  };
var Ei = class {
  arguments;
  errorMessages = [];
  constructor(t) {
    this.arguments = t;
  }
  write(t) {
    t.write(this.arguments);
  }
  addErrorMessage(t) {
    this.errorMessages.push(t);
  }
  renderAllMessages(t) {
    return this.errorMessages.map((r) => r(t)).join(`
`);
  }
};
function At(e) {
  return new Ei($s(e));
}
function $s(e) {
  let t = new Tt();
  for (let [r, n] of Object.entries(e)) {
    let i = new fn(r, Vs(n));
    t.addField(i);
  }
  return t;
}
function Vs(e) {
  if (typeof e == 'string') return new te(JSON.stringify(e));
  if (typeof e == 'number' || typeof e == 'boolean') return new te(String(e));
  if (typeof e == 'bigint') return new te(`${e}n`);
  if (e === null) return new te('null');
  if (e === void 0) return new te('undefined');
  if (bt(e)) return new te(`new Prisma.Decimal("${e.toFixed()}")`);
  if (e instanceof Uint8Array)
    return y.isBuffer(e) ? new te(`Buffer.alloc(${e.byteLength})`) : new te(`new Uint8Array(${e.byteLength})`);
  if (e instanceof Date) {
    let t = on(e) ? e.toISOString() : 'Invalid Date';
    return new te(`new Date("${t}")`);
  }
  return e instanceof Ne
    ? new te(`Prisma.${e._getName()}`)
    : vt(e)
      ? new te(`prisma.${qe(e.modelName)}.$fields.${e.name}`)
      : Array.isArray(e)
        ? bp(e)
        : typeof e == 'object'
          ? $s(e)
          : new te(Object.prototype.toString.call(e));
}
function bp(e) {
  let t = new Pt();
  for (let r of e) t.addItem(Vs(r));
  return t;
}
function gn(e, t) {
  let r = t === 'pretty' ? ks : cn,
    n = e.renderAllMessages(r),
    i = new Et(0, { colors: r }).write(e).toString();
  return { message: n, args: i };
}
function yn({ args: e, errors: t, errorFormat: r, callsite: n, originalMethod: i, clientVersion: o, globalOmit: s }) {
  let a = At(e);
  for (let A of t) an(A, a, s);
  let { message: f, args: w } = gn(a, r),
    v = sn({ message: f, callsite: n, originalMethod: i, showColors: r === 'pretty', callArguments: w });
  throw new ne(v, { clientVersion: o });
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
function Ie(e) {
  return e.replace(/^./, (t) => t.toLowerCase());
}
u();
c();
p();
m();
d();
l();
function Bs(e, t, r) {
  let n = Ie(r);
  return !t.result || !(t.result.$allModels || t.result[n])
    ? e
    : Ep({ ...e, ...qs(t.name, e, t.result.$allModels), ...qs(t.name, e, t.result[n]) });
}
function Ep(e) {
  let t = new Re(),
    r = (n, i) =>
      t.getOrCreate(n, () => (i.has(n) ? [n] : (i.add(n), e[n] ? e[n].needs.flatMap((o) => r(o, i)) : [n])));
  return ht(e, (n) => ({ ...n, needs: r(n.name, new Set()) }));
}
function qs(e, t, r) {
  return r
    ? ht(r, ({ needs: n, compute: i }, o) => ({
        name: o,
        needs: n ? Object.keys(n).filter((s) => n[s]) : [],
        compute: xp(t, o, i),
      }))
    : {};
}
function xp(e, t, r) {
  let n = e?.[t]?.compute;
  return n ? (i) => r({ ...i, [t]: n(i) }) : r;
}
function js(e, t) {
  if (!t) return e;
  let r = { ...e };
  for (let n of Object.values(t)) if (e[n.name]) for (let i of n.needs) r[i] = !0;
  return r;
}
function Qs(e, t) {
  if (!t) return e;
  let r = { ...e };
  for (let n of Object.values(t)) if (!e[n.name]) for (let i of n.needs) delete r[i];
  return r;
}
var hn = class {
    constructor(t, r) {
      this.extension = t;
      this.previous = r;
    }
    computedFieldsCache = new Re();
    modelExtensionsCache = new Re();
    queryCallbacksCache = new Re();
    clientExtensions = Yt(() =>
      this.extension.client
        ? { ...this.previous?.getAllClientExtensions(), ...this.extension.client }
        : this.previous?.getAllClientExtensions()
    );
    batchCallbacks = Yt(() => {
      let t = this.previous?.getAllBatchQueryCallbacks() ?? [],
        r = this.extension.query?.$__internalBatch;
      return r ? t.concat(r) : t;
    });
    getAllComputedFields(t) {
      return this.computedFieldsCache.getOrCreate(t, () =>
        Bs(this.previous?.getAllComputedFields(t), this.extension, t)
      );
    }
    getAllClientExtensions() {
      return this.clientExtensions.get();
    }
    getAllModelExtensions(t) {
      return this.modelExtensionsCache.getOrCreate(t, () => {
        let r = Ie(t);
        return !this.extension.model || !(this.extension.model[r] || this.extension.model.$allModels)
          ? this.previous?.getAllModelExtensions(t)
          : {
              ...this.previous?.getAllModelExtensions(t),
              ...this.extension.model.$allModels,
              ...this.extension.model[r],
            };
      });
    }
    getAllQueryCallbacks(t, r) {
      return this.queryCallbacksCache.getOrCreate(`${t}:${r}`, () => {
        let n = this.previous?.getAllQueryCallbacks(t, r) ?? [],
          i = [],
          o = this.extension.query;
        return !o || !(o[t] || o.$allModels || o[r] || o.$allOperations)
          ? n
          : (o[t] !== void 0 &&
              (o[t][r] !== void 0 && i.push(o[t][r]), o[t].$allOperations !== void 0 && i.push(o[t].$allOperations)),
            t !== '$none' &&
              o.$allModels !== void 0 &&
              (o.$allModels[r] !== void 0 && i.push(o.$allModels[r]),
              o.$allModels.$allOperations !== void 0 && i.push(o.$allModels.$allOperations)),
            o[r] !== void 0 && i.push(o[r]),
            o.$allOperations !== void 0 && i.push(o.$allOperations),
            n.concat(i));
      });
    }
    getAllBatchQueryCallbacks() {
      return this.batchCallbacks.get();
    }
  },
  Ct = class e {
    constructor(t) {
      this.head = t;
    }
    static empty() {
      return new e();
    }
    static single(t) {
      return new e(new hn(t));
    }
    isEmpty() {
      return this.head === void 0;
    }
    append(t) {
      return new e(new hn(t, this.head));
    }
    getAllComputedFields(t) {
      return this.head?.getAllComputedFields(t);
    }
    getAllClientExtensions() {
      return this.head?.getAllClientExtensions();
    }
    getAllModelExtensions(t) {
      return this.head?.getAllModelExtensions(t);
    }
    getAllQueryCallbacks(t, r) {
      return this.head?.getAllQueryCallbacks(t, r) ?? [];
    }
    getAllBatchQueryCallbacks() {
      return this.head?.getAllBatchQueryCallbacks() ?? [];
    }
  };
u();
c();
p();
m();
d();
l();
var wn = class {
  constructor(t) {
    this.name = t;
  }
};
function Gs(e) {
  return e instanceof wn;
}
function Hs(e) {
  return new wn(e);
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var Ws = Symbol(),
  lr = class {
    constructor(t) {
      if (t !== Ws) throw new Error('Skip instance can not be constructed directly');
    }
    ifUndefined(t) {
      return t === void 0 ? bn : t;
    }
  },
  bn = new lr(Ws);
function Oe(e) {
  return e instanceof lr;
}
var Pp = {
    findUnique: 'findUnique',
    findUniqueOrThrow: 'findUniqueOrThrow',
    findFirst: 'findFirst',
    findFirstOrThrow: 'findFirstOrThrow',
    findMany: 'findMany',
    count: 'aggregate',
    create: 'createOne',
    createMany: 'createMany',
    createManyAndReturn: 'createManyAndReturn',
    update: 'updateOne',
    updateMany: 'updateMany',
    updateManyAndReturn: 'updateManyAndReturn',
    upsert: 'upsertOne',
    delete: 'deleteOne',
    deleteMany: 'deleteMany',
    executeRaw: 'executeRaw',
    queryRaw: 'queryRaw',
    aggregate: 'aggregate',
    groupBy: 'groupBy',
    runCommandRaw: 'runCommandRaw',
    findRaw: 'findRaw',
    aggregateRaw: 'aggregateRaw',
  },
  Js = 'explicitly `undefined` values are not allowed';
function En({
  modelName: e,
  action: t,
  args: r,
  runtimeDataModel: n,
  extensions: i = Ct.empty(),
  callsite: o,
  clientMethod: s,
  errorFormat: a,
  clientVersion: f,
  previewFeatures: w,
  globalOmit: v,
}) {
  let A = new xi({
    runtimeDataModel: n,
    modelName: e,
    action: t,
    rootArgs: r,
    callsite: o,
    extensions: i,
    selectionPath: [],
    argumentPath: [],
    originalMethod: s,
    errorFormat: a,
    clientVersion: f,
    previewFeatures: w,
    globalOmit: v,
  });
  return { modelName: e, action: Pp[t], query: ur(r, A) };
}
function ur({ select: e, include: t, ...r } = {}, n) {
  let i = r.omit;
  return (delete r.omit, { arguments: zs(r, n), selection: Tp(e, t, i, n) });
}
function Tp(e, t, r, n) {
  return e
    ? (t
        ? n.throwValidationError({
            kind: 'MutuallyExclusiveFields',
            firstField: 'include',
            secondField: 'select',
            selectionPath: n.getSelectionPath(),
          })
        : r &&
          n.throwValidationError({
            kind: 'MutuallyExclusiveFields',
            firstField: 'omit',
            secondField: 'select',
            selectionPath: n.getSelectionPath(),
          }),
      Rp(e, n))
    : vp(n, t, r);
}
function vp(e, t, r) {
  let n = {};
  return (
    e.modelOrType && !e.isRawAction() && ((n.$composites = !0), (n.$scalars = !0)),
    t && Ap(n, t, e),
    Cp(n, r, e),
    n
  );
}
function Ap(e, t, r) {
  for (let [n, i] of Object.entries(t)) {
    if (Oe(i)) continue;
    let o = r.nestSelection(n);
    if ((Pi(i, o), i === !1 || i === void 0)) {
      e[n] = !1;
      continue;
    }
    let s = r.findField(n);
    if (
      (s &&
        s.kind !== 'object' &&
        r.throwValidationError({
          kind: 'IncludeOnScalar',
          selectionPath: r.getSelectionPath().concat(n),
          outputType: r.getOutputTypeDescription(),
        }),
      s)
    ) {
      e[n] = ur(i === !0 ? {} : i, o);
      continue;
    }
    if (i === !0) {
      e[n] = !0;
      continue;
    }
    e[n] = ur(i, o);
  }
}
function Cp(e, t, r) {
  let n = r.getComputedFields(),
    i = { ...r.getGlobalOmit(), ...t },
    o = Qs(i, n);
  for (let [s, a] of Object.entries(o)) {
    if (Oe(a)) continue;
    Pi(a, r.nestSelection(s));
    let f = r.findField(s);
    (n?.[s] && !f) || (e[s] = !a);
  }
}
function Rp(e, t) {
  let r = {},
    n = t.getComputedFields(),
    i = js(e, n);
  for (let [o, s] of Object.entries(i)) {
    if (Oe(s)) continue;
    let a = t.nestSelection(o);
    Pi(s, a);
    let f = t.findField(o);
    if (!(n?.[o] && !f)) {
      if (s === !1 || s === void 0 || Oe(s)) {
        r[o] = !1;
        continue;
      }
      if (s === !0) {
        f?.kind === 'object' ? (r[o] = ur({}, a)) : (r[o] = !0);
        continue;
      }
      r[o] = ur(s, a);
    }
  }
  return r;
}
function Ks(e, t) {
  if (e === null) return null;
  if (typeof e == 'string' || typeof e == 'number' || typeof e == 'boolean') return e;
  if (typeof e == 'bigint') return { $type: 'BigInt', value: String(e) };
  if (wt(e)) {
    if (on(e)) return { $type: 'DateTime', value: e.toISOString() };
    t.throwValidationError({
      kind: 'InvalidArgumentValue',
      selectionPath: t.getSelectionPath(),
      argumentPath: t.getArgumentPath(),
      argument: { name: t.getArgumentName(), typeNames: ['Date'] },
      underlyingError: 'Provided Date object is invalid',
    });
  }
  if (Gs(e)) return { $type: 'Param', value: e.name };
  if (vt(e)) return { $type: 'FieldRef', value: { _ref: e.name, _container: e.modelName } };
  if (Array.isArray(e)) return Sp(e, t);
  if (ArrayBuffer.isView(e)) {
    let { buffer: r, byteOffset: n, byteLength: i } = e;
    return { $type: 'Bytes', value: y.from(r, n, i).toString('base64') };
  }
  if (Ip(e)) return e.values;
  if (bt(e)) return { $type: 'Decimal', value: e.toFixed() };
  if (e instanceof Ne) {
    if (e !== dn.instances[e._getName()]) throw new Error('Invalid ObjectEnumValue');
    return { $type: 'Enum', value: e._getName() };
  }
  if (Op(e)) return e.toJSON();
  if (typeof e == 'object') return zs(e, t);
  t.throwValidationError({
    kind: 'InvalidArgumentValue',
    selectionPath: t.getSelectionPath(),
    argumentPath: t.getArgumentPath(),
    argument: { name: t.getArgumentName(), typeNames: [] },
    underlyingError: `We could not serialize ${Object.prototype.toString.call(e)} value. Serialize the object to JSON or implement a ".toJSON()" method on it`,
  });
}
function zs(e, t) {
  if (e.$type) return { $type: 'Raw', value: e };
  let r = {};
  for (let n in e) {
    let i = e[n],
      o = t.nestArgument(n);
    Oe(i) ||
      (i !== void 0
        ? (r[n] = Ks(i, o))
        : t.isPreviewFeatureOn('strictUndefinedChecks') &&
          t.throwValidationError({
            kind: 'InvalidArgumentValue',
            argumentPath: o.getArgumentPath(),
            selectionPath: t.getSelectionPath(),
            argument: { name: t.getArgumentName(), typeNames: [] },
            underlyingError: Js,
          }));
  }
  return r;
}
function Sp(e, t) {
  let r = [];
  for (let n = 0; n < e.length; n++) {
    let i = t.nestArgument(String(n)),
      o = e[n];
    if (o === void 0 || Oe(o)) {
      let s = o === void 0 ? 'undefined' : 'Prisma.skip';
      t.throwValidationError({
        kind: 'InvalidArgumentValue',
        selectionPath: i.getSelectionPath(),
        argumentPath: i.getArgumentPath(),
        argument: { name: `${t.getArgumentName()}[${n}]`, typeNames: [] },
        underlyingError: `Can not use \`${s}\` value within array. Use \`null\` or filter out \`${s}\` values`,
      });
    }
    r.push(Ks(o, i));
  }
  return r;
}
function Ip(e) {
  return typeof e == 'object' && e !== null && e.__prismaRawParameters__ === !0;
}
function Op(e) {
  return typeof e == 'object' && e !== null && typeof e.toJSON == 'function';
}
function Pi(e, t) {
  e === void 0 &&
    t.isPreviewFeatureOn('strictUndefinedChecks') &&
    t.throwValidationError({ kind: 'InvalidSelectionValue', selectionPath: t.getSelectionPath(), underlyingError: Js });
}
var xi = class e {
  constructor(t) {
    this.params = t;
    this.params.modelName &&
      (this.modelOrType =
        this.params.runtimeDataModel.models[this.params.modelName] ??
        this.params.runtimeDataModel.types[this.params.modelName]);
  }
  modelOrType;
  throwValidationError(t) {
    yn({
      errors: [t],
      originalMethod: this.params.originalMethod,
      args: this.params.rootArgs ?? {},
      callsite: this.params.callsite,
      errorFormat: this.params.errorFormat,
      clientVersion: this.params.clientVersion,
      globalOmit: this.params.globalOmit,
    });
  }
  getSelectionPath() {
    return this.params.selectionPath;
  }
  getArgumentPath() {
    return this.params.argumentPath;
  }
  getArgumentName() {
    return this.params.argumentPath[this.params.argumentPath.length - 1];
  }
  getOutputTypeDescription() {
    if (!(!this.params.modelName || !this.modelOrType))
      return {
        name: this.params.modelName,
        fields: this.modelOrType.fields.map((t) => ({
          name: t.name,
          typeName: 'boolean',
          isRelation: t.kind === 'object',
        })),
      };
  }
  isRawAction() {
    return ['executeRaw', 'queryRaw', 'runCommandRaw', 'findRaw', 'aggregateRaw'].includes(this.params.action);
  }
  isPreviewFeatureOn(t) {
    return this.params.previewFeatures.includes(t);
  }
  getComputedFields() {
    if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);
  }
  findField(t) {
    return this.modelOrType?.fields.find((r) => r.name === t);
  }
  nestSelection(t) {
    let r = this.findField(t),
      n = r?.kind === 'object' ? r.type : void 0;
    return new e({ ...this.params, modelName: n, selectionPath: this.params.selectionPath.concat(t) });
  }
  getGlobalOmit() {
    return this.params.modelName && this.shouldApplyGlobalOmit()
      ? (this.params.globalOmit?.[qe(this.params.modelName)] ?? {})
      : {};
  }
  shouldApplyGlobalOmit() {
    switch (this.params.action) {
      case 'findFirst':
      case 'findFirstOrThrow':
      case 'findUniqueOrThrow':
      case 'findMany':
      case 'upsert':
      case 'findUnique':
      case 'createManyAndReturn':
      case 'create':
      case 'update':
      case 'updateManyAndReturn':
      case 'delete':
        return !0;
      case 'executeRaw':
      case 'aggregateRaw':
      case 'runCommandRaw':
      case 'findRaw':
      case 'createMany':
      case 'deleteMany':
      case 'groupBy':
      case 'updateMany':
      case 'count':
      case 'aggregate':
      case 'queryRaw':
        return !1;
      default:
        xe(this.params.action, 'Unknown action');
    }
  }
  nestArgument(t) {
    return new e({ ...this.params, argumentPath: this.params.argumentPath.concat(t) });
  }
};
u();
c();
p();
m();
d();
l();
function Ys(e) {
  if (!e._hasPreviewFlag('metrics'))
    throw new ne('`metrics` preview feature must be enabled in order to access metrics API', {
      clientVersion: e._clientVersion,
    });
}
var Rt = class {
  _client;
  constructor(t) {
    this._client = t;
  }
  prometheus(t) {
    return (Ys(this._client), this._client._engine.metrics({ format: 'prometheus', ...t }));
  }
  json(t) {
    return (Ys(this._client), this._client._engine.metrics({ format: 'json', ...t }));
  }
};
u();
c();
p();
m();
d();
l();
function Zs(e, t) {
  let r = Yt(() => kp(t));
  Object.defineProperty(e, 'dmmf', { get: () => r.get() });
}
function kp(e) {
  throw new Error('Prisma.dmmf is not available when running in edge runtimes.');
}
function Ti(e) {
  return Object.entries(e).map(([t, r]) => ({ name: t, ...r }));
}
u();
c();
p();
m();
d();
l();
var vi = new WeakMap(),
  xn = '$$PrismaTypedSql',
  cr = class {
    constructor(t, r) {
      (vi.set(this, { sql: t, values: r }), Object.defineProperty(this, xn, { value: xn }));
    }
    get sql() {
      return vi.get(this).sql;
    }
    get values() {
      return vi.get(this).values;
    }
  };
function Xs(e) {
  return (...t) => new cr(e, t);
}
function Pn(e) {
  return e != null && e[xn] === xn;
}
u();
c();
p();
m();
d();
l();
var Vu = _e(ea());
u();
c();
p();
m();
d();
l();
ta();
is();
us();
u();
c();
p();
m();
d();
l();
var me = class e {
  constructor(t, r) {
    if (t.length - 1 !== r.length)
      throw t.length === 0
        ? new TypeError('Expected at least 1 string')
        : new TypeError(`Expected ${t.length} strings to have ${t.length - 1} values`);
    let n = r.reduce((s, a) => s + (a instanceof e ? a.values.length : 1), 0);
    ((this.values = new Array(n)), (this.strings = new Array(n + 1)), (this.strings[0] = t[0]));
    let i = 0,
      o = 0;
    for (; i < r.length; ) {
      let s = r[i++],
        a = t[i];
      if (s instanceof e) {
        this.strings[o] += s.strings[0];
        let f = 0;
        for (; f < s.values.length; ) ((this.values[o++] = s.values[f++]), (this.strings[o] = s.strings[f]));
        this.strings[o] += a;
      } else ((this.values[o++] = s), (this.strings[o] = a));
    }
  }
  get sql() {
    let t = this.strings.length,
      r = 1,
      n = this.strings[0];
    for (; r < t; ) n += `?${this.strings[r++]}`;
    return n;
  }
  get statement() {
    let t = this.strings.length,
      r = 1,
      n = this.strings[0];
    for (; r < t; ) n += `:${r}${this.strings[r++]}`;
    return n;
  }
  get text() {
    let t = this.strings.length,
      r = 1,
      n = this.strings[0];
    for (; r < t; ) n += `$${r}${this.strings[r++]}`;
    return n;
  }
  inspect() {
    return { sql: this.sql, statement: this.statement, text: this.text, values: this.values };
  }
};
function ra(e, t = ',', r = '', n = '') {
  if (e.length === 0)
    throw new TypeError('Expected `join([])` to be called with an array of multiple elements, but got an empty array');
  return new me([r, ...Array(e.length - 1).fill(t), n], e);
}
function Ai(e) {
  return new me([e], []);
}
var na = Ai('');
function Ci(e, ...t) {
  return new me(e, t);
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
function pr(e) {
  return {
    getKeys() {
      return Object.keys(e);
    },
    getPropertyValue(t) {
      return e[t];
    },
  };
}
u();
c();
p();
m();
d();
l();
function le(e, t) {
  return {
    getKeys() {
      return [e];
    },
    getPropertyValue() {
      return t();
    },
  };
}
u();
c();
p();
m();
d();
l();
function et(e) {
  let t = new Re();
  return {
    getKeys() {
      return e.getKeys();
    },
    getPropertyValue(r) {
      return t.getOrCreate(r, () => e.getPropertyValue(r));
    },
    getPropertyDescriptor(r) {
      return e.getPropertyDescriptor?.(r);
    },
  };
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var vn = { enumerable: !0, configurable: !0, writable: !0 };
function An(e) {
  let t = new Set(e);
  return {
    getPrototypeOf: () => Object.prototype,
    getOwnPropertyDescriptor: () => vn,
    has: (r, n) => t.has(n),
    set: (r, n, i) => t.add(n) && Reflect.set(r, n, i),
    ownKeys: () => [...t],
  };
}
var ia = Symbol.for('nodejs.util.inspect.custom');
function Pe(e, t) {
  let r = _p(t),
    n = new Set(),
    i = new Proxy(e, {
      get(o, s) {
        if (n.has(s)) return o[s];
        let a = r.get(s);
        return a ? a.getPropertyValue(s) : o[s];
      },
      has(o, s) {
        if (n.has(s)) return !0;
        let a = r.get(s);
        return a ? (a.has?.(s) ?? !0) : Reflect.has(o, s);
      },
      ownKeys(o) {
        let s = oa(Reflect.ownKeys(o), r),
          a = oa(Array.from(r.keys()), r);
        return [...new Set([...s, ...a, ...n])];
      },
      set(o, s, a) {
        return r.get(s)?.getPropertyDescriptor?.(s)?.writable === !1 ? !1 : (n.add(s), Reflect.set(o, s, a));
      },
      getOwnPropertyDescriptor(o, s) {
        let a = Reflect.getOwnPropertyDescriptor(o, s);
        if (a && !a.configurable) return a;
        let f = r.get(s);
        return f ? (f.getPropertyDescriptor ? { ...vn, ...f?.getPropertyDescriptor(s) } : vn) : a;
      },
      defineProperty(o, s, a) {
        return (n.add(s), Reflect.defineProperty(o, s, a));
      },
      getPrototypeOf: () => Object.prototype,
    });
  return (
    (i[ia] = function () {
      let o = { ...this };
      return (delete o[ia], o);
    }),
    i
  );
}
function _p(e) {
  let t = new Map();
  for (let r of e) {
    let n = r.getKeys();
    for (let i of n) t.set(i, r);
  }
  return t;
}
function oa(e, t) {
  return e.filter((r) => t.get(r)?.has?.(r) ?? !0);
}
u();
c();
p();
m();
d();
l();
function St(e) {
  return {
    getKeys() {
      return e;
    },
    has() {
      return !1;
    },
    getPropertyValue() {},
  };
}
u();
c();
p();
m();
d();
l();
function It(e, t) {
  return { batch: e, transaction: t?.kind === 'batch' ? { isolationLevel: t.options.isolationLevel } : void 0 };
}
u();
c();
p();
m();
d();
l();
function sa(e) {
  if (e === void 0) return '';
  let t = At(e);
  return new Et(0, { colors: cn }).write(t).toString();
}
u();
c();
p();
m();
d();
l();
var Mp = 'P2037';
function Cn({ error: e, user_facing_error: t }, r, n) {
  return t.error_code
    ? new X(Np(t, n), { code: t.error_code, clientVersion: r, meta: t.meta, batchRequestIdx: t.batch_request_idx })
    : new oe(e, { clientVersion: r, batchRequestIdx: t.batch_request_idx });
}
function Np(e, t) {
  let r = e.message;
  return (
    (t === 'postgresql' || t === 'postgres' || t === 'mysql') &&
      e.error_code === Mp &&
      (r += `
Prisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`),
    r
  );
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var Ri = class {
  getLocation() {
    return null;
  }
};
function je(e) {
  return typeof $EnabledCallSite == 'function' && e !== 'minimal' ? new $EnabledCallSite() : new Ri();
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var aa = { _avg: !0, _count: !0, _sum: !0, _min: !0, _max: !0 };
function Ot(e = {}) {
  let t = Up(e);
  return Object.entries(t).reduce((n, [i, o]) => (aa[i] !== void 0 ? (n.select[i] = { select: o }) : (n[i] = o), n), {
    select: {},
  });
}
function Up(e = {}) {
  return typeof e._count == 'boolean' ? { ...e, _count: { _all: e._count } } : e;
}
function Rn(e = {}) {
  return (t) => (typeof e._count == 'boolean' && (t._count = t._count._all), t);
}
function la(e, t) {
  let r = Rn(e);
  return t({ action: 'aggregate', unpacker: r, argsMapper: Ot })(e);
}
u();
c();
p();
m();
d();
l();
function Fp(e = {}) {
  let { select: t, ...r } = e;
  return typeof t == 'object' ? Ot({ ...r, _count: t }) : Ot({ ...r, _count: { _all: !0 } });
}
function $p(e = {}) {
  return typeof e.select == 'object' ? (t) => Rn(e)(t)._count : (t) => Rn(e)(t)._count._all;
}
function ua(e, t) {
  return t({ action: 'count', unpacker: $p(e), argsMapper: Fp })(e);
}
u();
c();
p();
m();
d();
l();
function Vp(e = {}) {
  let t = Ot(e);
  if (Array.isArray(t.by)) for (let r of t.by) typeof r == 'string' && (t.select[r] = !0);
  else typeof t.by == 'string' && (t.select[t.by] = !0);
  return t;
}
function qp(e = {}) {
  return (t) => (
    typeof e?._count == 'boolean' &&
      t.forEach((r) => {
        r._count = r._count._all;
      }),
    t
  );
}
function ca(e, t) {
  return t({ action: 'groupBy', unpacker: qp(e), argsMapper: Vp })(e);
}
function pa(e, t, r) {
  if (t === 'aggregate') return (n) => la(n, r);
  if (t === 'count') return (n) => ua(n, r);
  if (t === 'groupBy') return (n) => ca(n, r);
}
u();
c();
p();
m();
d();
l();
function ma(e, t) {
  let r = t.fields.filter((i) => !i.relationName),
    n = Ps(r, 'name');
  return new Proxy(
    {},
    {
      get(i, o) {
        if (o in i || typeof o == 'symbol') return i[o];
        let s = n[o];
        if (s) return new nr(e, o, s.type, s.isList, s.kind === 'enum');
      },
      ...An(Object.keys(n)),
    }
  );
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var da = (e) => (Array.isArray(e) ? e : e.split('.')),
  Si = (e, t) => da(t).reduce((r, n) => r && r[n], e),
  fa = (e, t, r) => da(t).reduceRight((n, i, o, s) => Object.assign({}, Si(e, s.slice(0, o)), { [i]: n }), r);
function Bp(e, t) {
  return e === void 0 || t === void 0 ? [] : [...t, 'select', e];
}
function jp(e, t, r) {
  return t === void 0 ? (e ?? {}) : fa(t, r, e || !0);
}
function Ii(e, t, r, n, i, o) {
  let a = e._runtimeDataModel.models[t].fields.reduce((f, w) => ({ ...f, [w.name]: w }), {});
  return (f) => {
    let w = je(e._errorFormat),
      v = Bp(n, i),
      A = jp(f, o, v),
      R = r({ dataPath: v, callsite: w })(A),
      C = Qp(e, t);
    return new Proxy(R, {
      get(D, I) {
        if (!C.includes(I)) return D[I];
        let be = [a[I].type, r, I],
          ue = [v, A];
        return Ii(e, ...be, ...ue);
      },
      ...An([...C, ...Object.getOwnPropertyNames(R)]),
    });
  };
}
function Qp(e, t) {
  return e._runtimeDataModel.models[t].fields.filter((r) => r.kind === 'object').map((r) => r.name);
}
var Gp = ['findUnique', 'findUniqueOrThrow', 'findFirst', 'findFirstOrThrow', 'create', 'update', 'upsert', 'delete'],
  Hp = ['aggregate', 'count', 'groupBy'];
function Oi(e, t) {
  let r = e._extensions.getAllModelExtensions(t) ?? {},
    n = [Wp(e, t), Kp(e, t), pr(r), le('name', () => t), le('$name', () => t), le('$parent', () => e._appliedParent)];
  return Pe({}, n);
}
function Wp(e, t) {
  let r = Ie(t),
    n = Object.keys(Zt).concat('count');
  return {
    getKeys() {
      return n;
    },
    getPropertyValue(i) {
      let o = i,
        s = (a) => (f) => {
          let w = je(e._errorFormat);
          return e._createPrismaPromise(
            (v) => {
              let A = {
                args: f,
                dataPath: [],
                action: o,
                model: t,
                clientMethod: `${r}.${i}`,
                jsModelName: r,
                transaction: v,
                callsite: w,
              };
              return e._request({ ...A, ...a });
            },
            { action: o, args: f, model: t }
          );
        };
      return Gp.includes(o) ? Ii(e, t, s) : Jp(i) ? pa(e, i, s) : s({});
    },
  };
}
function Jp(e) {
  return Hp.includes(e);
}
function Kp(e, t) {
  return et(
    le('fields', () => {
      let r = e._runtimeDataModel.models[t];
      return ma(t, r);
    })
  );
}
u();
c();
p();
m();
d();
l();
function ga(e) {
  return e.replace(/^./, (t) => t.toUpperCase());
}
var ki = Symbol();
function mr(e) {
  let t = [zp(e), Yp(e), le(ki, () => e), le('$parent', () => e._appliedParent)],
    r = e._extensions.getAllClientExtensions();
  return (r && t.push(pr(r)), Pe(e, t));
}
function zp(e) {
  let t = Object.getPrototypeOf(e._originalClient),
    r = [...new Set(Object.getOwnPropertyNames(t))];
  return {
    getKeys() {
      return r;
    },
    getPropertyValue(n) {
      return e[n];
    },
  };
}
function Yp(e) {
  let t = Object.keys(e._runtimeDataModel.models),
    r = t.map(Ie),
    n = [...new Set(t.concat(r))];
  return et({
    getKeys() {
      return n;
    },
    getPropertyValue(i) {
      let o = ga(i);
      if (e._runtimeDataModel.models[o] !== void 0) return Oi(e, o);
      if (e._runtimeDataModel.models[i] !== void 0) return Oi(e, i);
    },
    getPropertyDescriptor(i) {
      if (!r.includes(i)) return { enumerable: !1 };
    },
  });
}
function ya(e) {
  return e[ki] ? e[ki] : e;
}
function ha(e) {
  if (typeof e == 'function') return e(this);
  if (e.client?.__AccelerateEngine) {
    let r = e.client.__AccelerateEngine;
    this._originalClient._engine = new r(this._originalClient._accelerateEngineConfig);
  }
  let t = Object.create(this._originalClient, {
    _extensions: { value: this._extensions.append(e) },
    _appliedParent: { value: this, configurable: !0 },
    $use: { value: void 0 },
    $on: { value: void 0 },
  });
  return mr(t);
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
function wa({ result: e, modelName: t, select: r, omit: n, extensions: i }) {
  let o = i.getAllComputedFields(t);
  if (!o) return e;
  let s = [],
    a = [];
  for (let f of Object.values(o)) {
    if (n) {
      if (n[f.name]) continue;
      let w = f.needs.filter((v) => n[v]);
      w.length > 0 && a.push(St(w));
    } else if (r) {
      if (!r[f.name]) continue;
      let w = f.needs.filter((v) => !r[v]);
      w.length > 0 && a.push(St(w));
    }
    Zp(e, f.needs) && s.push(Xp(f, Pe(e, s)));
  }
  return s.length > 0 || a.length > 0 ? Pe(e, [...s, ...a]) : e;
}
function Zp(e, t) {
  return t.every((r) => di(e, r));
}
function Xp(e, t) {
  return et(le(e.name, () => e.compute(t)));
}
u();
c();
p();
m();
d();
l();
function Sn({ visitor: e, result: t, args: r, runtimeDataModel: n, modelName: i }) {
  if (Array.isArray(t)) {
    for (let s = 0; s < t.length; s++)
      t[s] = Sn({ result: t[s], args: r, modelName: i, runtimeDataModel: n, visitor: e });
    return t;
  }
  let o = e(t, i, r) ?? t;
  return (
    r.include && ba({ includeOrSelect: r.include, result: o, parentModelName: i, runtimeDataModel: n, visitor: e }),
    r.select && ba({ includeOrSelect: r.select, result: o, parentModelName: i, runtimeDataModel: n, visitor: e }),
    o
  );
}
function ba({ includeOrSelect: e, result: t, parentModelName: r, runtimeDataModel: n, visitor: i }) {
  for (let [o, s] of Object.entries(e)) {
    if (!s || t[o] == null || Oe(s)) continue;
    let f = n.models[r].fields.find((v) => v.name === o);
    if (!f || f.kind !== 'object' || !f.relationName) continue;
    let w = typeof s == 'object' ? s : {};
    t[o] = Sn({ visitor: i, result: t[o], args: w, modelName: f.type, runtimeDataModel: n });
  }
}
function Ea({ result: e, modelName: t, args: r, extensions: n, runtimeDataModel: i, globalOmit: o }) {
  return n.isEmpty() || e == null || typeof e != 'object' || !i.models[t]
    ? e
    : Sn({
        result: e,
        args: r ?? {},
        modelName: t,
        runtimeDataModel: i,
        visitor: (a, f, w) => {
          let v = Ie(f);
          return wa({
            result: a,
            modelName: v,
            select: w.select,
            omit: w.select ? void 0 : { ...o?.[v], ...w.omit },
            extensions: n,
          });
        },
      });
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
l();
u();
c();
p();
m();
d();
l();
var em = ['$connect', '$disconnect', '$on', '$transaction', '$use', '$extends'],
  xa = em;
function Pa(e) {
  if (e instanceof me) return tm(e);
  if (Pn(e)) return rm(e);
  if (Array.isArray(e)) {
    let r = [e[0]];
    for (let n = 1; n < e.length; n++) r[n] = dr(e[n]);
    return r;
  }
  let t = {};
  for (let r in e) t[r] = dr(e[r]);
  return t;
}
function tm(e) {
  return new me(e.strings, e.values);
}
function rm(e) {
  return new cr(e.sql, e.values);
}
function dr(e) {
  if (typeof e != 'object' || e == null || e instanceof Ne || vt(e)) return e;
  if (bt(e)) return new re(e.toFixed());
  if (wt(e)) return new Date(+e);
  if (ArrayBuffer.isView(e)) return e.slice(0);
  if (Array.isArray(e)) {
    let t = e.length,
      r;
    for (r = Array(t); t--; ) r[t] = dr(e[t]);
    return r;
  }
  if (typeof e == 'object') {
    let t = {};
    for (let r in e)
      r === '__proto__'
        ? Object.defineProperty(t, r, { value: dr(e[r]), configurable: !0, enumerable: !0, writable: !0 })
        : (t[r] = dr(e[r]));
    return t;
  }
  xe(e, 'Unknown value');
}
function va(e, t, r, n = 0) {
  return e._createPrismaPromise((i) => {
    let o = t.customDataProxyFetch;
    return (
      'transaction' in t &&
        i !== void 0 &&
        (t.transaction?.kind === 'batch' && t.transaction.lock.then(), (t.transaction = i)),
      n === r.length
        ? e._executeRequest(t)
        : r[n]({
            model: t.model,
            operation: t.model ? t.action : t.clientMethod,
            args: Pa(t.args ?? {}),
            __internalParams: t,
            query: (s, a = t) => {
              let f = a.customDataProxyFetch;
              return ((a.customDataProxyFetch = Sa(o, f)), (a.args = s), va(e, a, r, n + 1));
            },
          })
    );
  });
}
function Aa(e, t) {
  let { jsModelName: r, action: n, clientMethod: i } = t,
    o = r ? n : i;
  if (e._extensions.isEmpty()) return e._executeRequest(t);
  let s = e._extensions.getAllQueryCallbacks(r ?? '$none', o);
  return va(e, t, s);
}
function Ca(e) {
  return (t) => {
    let r = { requests: t },
      n = t[0].extensions.getAllBatchQueryCallbacks();
    return n.length ? Ra(r, n, 0, e) : e(r);
  };
}
function Ra(e, t, r, n) {
  if (r === t.length) return n(e);
  let i = e.customDataProxyFetch,
    o = e.requests[0].transaction;
  return t[r]({
    args: {
      queries: e.requests.map((s) => ({ model: s.modelName, operation: s.action, args: s.args })),
      transaction: o ? { isolationLevel: o.kind === 'batch' ? o.isolationLevel : void 0 } : void 0,
    },
    __internalParams: e,
    query(s, a = e) {
      let f = a.customDataProxyFetch;
      return ((a.customDataProxyFetch = Sa(i, f)), Ra(a, t, r + 1, n));
    },
  });
}
var Ta = (e) => e;
function Sa(e = Ta, t = Ta) {
  return (r) => e(t(r));
}
u();
c();
p();
m();
d();
l();
var Ia = J('prisma:client'),
  Oa = { Vercel: 'vercel', 'Netlify CI': 'netlify' };
function ka({ postinstall: e, ciName: t, clientVersion: r }) {
  if ((Ia('checkPlatformCaching:postinstall', e), Ia('checkPlatformCaching:ciName', t), e === !0 && t && t in Oa)) {
    let n = `Prisma has detected that this project was built on ${t}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \`prisma generate\` command during the build process.

Learn how: https://pris.ly/d/${Oa[t]}-build`;
    throw (console.error(n), new L(n, r));
  }
}
u();
c();
p();
m();
d();
l();
function Da(e, t) {
  return e ? (e.datasources ? e.datasources : e.datasourceUrl ? { [t[0]]: { url: e.datasourceUrl } } : {}) : {};
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var nm = () => globalThis.process?.release?.name === 'node',
  im = () => !!globalThis.Bun || !!globalThis.process?.versions?.bun,
  om = () => !!globalThis.Deno,
  sm = () => typeof globalThis.Netlify == 'object',
  am = () => typeof globalThis.EdgeRuntime == 'object',
  lm = () => globalThis.navigator?.userAgent === 'Cloudflare-Workers';
function um() {
  return (
    [
      [sm, 'netlify'],
      [am, 'edge-light'],
      [lm, 'workerd'],
      [om, 'deno'],
      [im, 'bun'],
      [nm, 'node'],
    ]
      .flatMap((r) => (r[0]() ? [r[1]] : []))
      .at(0) ?? ''
  );
}
var cm = {
  node: 'Node.js',
  workerd: 'Cloudflare Workers',
  deno: 'Deno and Deno Deploy',
  netlify: 'Netlify Edge Functions',
  'edge-light':
    'Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)',
};
function Qe() {
  let e = um();
  return { id: e, prettyName: cm[e] || e, isEdge: ['workerd', 'deno', 'netlify', 'edge-light'].includes(e) };
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var Di = _e(mi());
u();
c();
p();
m();
d();
l();
function _a(e) {
  return e ? e.replace(/".*"/g, '"X"').replace(/[\s:\[]([+-]?([0-9]*[.])?[0-9]+)/g, (t) => `${t[0]}5`) : '';
}
u();
c();
p();
m();
d();
l();
function Ma(e) {
  return e
    .split(
      `
`
    )
    .map((t) =>
      t
        .replace(/^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)\s*/, '')
        .replace(/\+\d+\s*ms$/, '')
    ).join(`
`);
}
u();
c();
p();
m();
d();
l();
var Na = _e(bs());
function La({ title: e, user: t = 'prisma', repo: r = 'prisma', template: n = 'bug_report.yml', body: i }) {
  return (0, Na.default)({ user: t, repo: r, template: n, title: e, body: i });
}
function Ua({ version: e, binaryTarget: t, title: r, description: n, engineVersion: i, database: o, query: s }) {
  let a = es(6e3 - (s?.length ?? 0)),
    f = Ma((0, Di.default)(a)),
    w = n
      ? `# Description
\`\`\`
${n}
\`\`\``
      : '',
    v = (0, Di.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | ${g.version?.padEnd(19)}| 
| OS              | ${t?.padEnd(19)}|
| Prisma Client   | ${e?.padEnd(19)}|
| Query Engine    | ${i?.padEnd(19)}|
| Database        | ${o?.padEnd(19)}|

${w}

## Logs
\`\`\`
${f}
\`\`\`

## Client Snippet
\`\`\`ts
// PLEASE FILL YOUR CODE SNIPPET HERE
\`\`\`

## Schema
\`\`\`prisma
// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE
\`\`\`

## Prisma Engine Query
\`\`\`
${s ? _a(s) : ''}
\`\`\`
`),
    A = La({ title: r, body: v });
  return `${r}

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

${Yr(A)}

If you want the Prisma team to look into it, please open the link above \u{1F64F}
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue. 
`;
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
l();
u();
c();
p();
m();
d();
l();
l();
function Q(e, t) {
  throw new Error(t);
}
function _i(e, t) {
  return (
    e === t ||
    (e !== null &&
      t !== null &&
      typeof e == 'object' &&
      typeof t == 'object' &&
      Object.keys(e).length === Object.keys(t).length &&
      Object.keys(e).every((r) => _i(e[r], t[r])))
  );
}
function fr(e, t) {
  let r = Object.keys(e),
    n = Object.keys(t);
  return (r.length < n.length ? r : n).every((o) => {
    if (typeof e[o] != typeof t[o]) {
      if (typeof e[o] == 'number' || typeof t[o] == 'number') return `${e[o]}` == `${t[o]}`;
      if (typeof e[o] == 'bigint' || typeof t[o] == 'bigint')
        return BigInt(`${e[o]}`.replace(/n$/, '')) === BigInt(`${t[o]}`.replace(/n$/, ''));
      if (e[o] instanceof Date || t[o] instanceof Date)
        return new Date(`${e[o]}`).getTime() === new Date(`${t[o]}`).getTime();
      if (re.isDecimal(e[o]) || re.isDecimal(t[o])) return new re(`${e[o]}`).equals(new re(`${t[o]}`));
    }
    return _i(e[o], t[o]);
  });
}
function gr(e) {
  return JSON.stringify(e, (t, r) =>
    typeof r == 'bigint' ? r.toString() : r instanceof Uint8Array ? y.from(r).toString('base64') : r
  );
}
var W = class extends Error {
  name = 'DataMapperError';
};
function Va(e, t, r) {
  switch (t.type) {
    case 'AffectedRows':
      if (typeof e != 'number') throw new W(`Expected an affected rows count, got: ${typeof e} (${e})`);
      return { count: e };
    case 'Object':
      return Mi(e, t.fields, r);
    case 'Value':
      return Ni(e, '<result>', t.resultType, r);
    default:
      Q(t, `Invalid data mapping type: '${t.type}'`);
  }
}
function Mi(e, t, r) {
  if (e === null) return null;
  if (Array.isArray(e)) return e.map((i) => Fa(i, t, r));
  if (typeof e == 'object') return Fa(e, t, r);
  if (typeof e == 'string') {
    let n;
    try {
      n = JSON.parse(e);
    } catch (i) {
      throw new W('Expected an array or object, got a string that is not valid JSON', { cause: i });
    }
    return Mi(n, t, r);
  }
  throw new W(`Expected an array or an object, got: ${typeof e}`);
}
function Fa(e, t, r) {
  if (typeof e != 'object') throw new W(`Expected an object, but got '${typeof e}'`);
  let n = {};
  for (let [i, o] of Object.entries(t))
    switch (o.type) {
      case 'AffectedRows':
        throw new W(`Unexpected 'AffectedRows' node in data mapping for field '${i}'`);
      case 'Object': {
        if (o.serializedName !== null && !Object.hasOwn(e, o.serializedName))
          throw new W(`Missing data field (Object): '${i}'; node: ${JSON.stringify(o)}; data: ${JSON.stringify(e)}`);
        let s = o.serializedName !== null ? e[o.serializedName] : e;
        n[i] = Mi(s, o.fields, r);
        break;
      }
      case 'Value':
        {
          let s = o.dbName;
          if (Object.hasOwn(e, s)) n[i] = Ni(e[s], s, o.resultType, r);
          else
            throw new W(`Missing data field (Value): '${s}'; node: ${JSON.stringify(o)}; data: ${JSON.stringify(e)}`);
        }
        break;
      default:
        Q(o, `DataMapper: Invalid data mapping node type: '${o.type}'`);
    }
  return n;
}
function Ni(e, t, r, n) {
  if (e === null) return r.type === 'Array' ? [] : null;
  switch (r.type) {
    case 'Any':
      return e;
    case 'String': {
      if (typeof e != 'string') throw new W(`Expected a string in column '${t}', got ${typeof e}: ${e}`);
      return e;
    }
    case 'Int':
      switch (typeof e) {
        case 'number':
          return Math.trunc(e);
        case 'string': {
          let i = Math.trunc(Number(e));
          if (Number.isNaN(i) || !Number.isFinite(i))
            throw new W(`Expected an integer in column '${t}', got string: ${e}`);
          if (!Number.isSafeInteger(i))
            throw new W(
              `Integer value in column '${t}' is too large to represent as a JavaScript number without loss of precision, got: ${e}. Consider using BigInt type.`
            );
          return i;
        }
        default:
          throw new W(`Expected an integer in column '${t}', got ${typeof e}: ${e}`);
      }
    case 'BigInt': {
      if (typeof e != 'number' && typeof e != 'string')
        throw new W(`Expected a bigint in column '${t}', got ${typeof e}: ${e}`);
      return { $type: 'BigInt', value: e };
    }
    case 'Float': {
      if (typeof e == 'number') return e;
      if (typeof e == 'string') {
        let i = Number(e);
        if (Number.isNaN(i) && !/^[-+]?nan$/.test(e.toLowerCase()))
          throw new W(`Expected a float in column '${t}', got string: ${e}`);
        return i;
      }
      throw new W(`Expected a float in column '${t}', got ${typeof e}: ${e}`);
    }
    case 'Boolean': {
      if (typeof e == 'boolean') return e;
      if (typeof e == 'number') return e === 1;
      if (typeof e == 'string') {
        if (e === 'true' || e === 'TRUE' || e === '1') return !0;
        if (e === 'false' || e === 'FALSE' || e === '0') return !1;
        throw new W(`Expected a boolean in column '${t}', got ${typeof e}: ${e}`);
      }
      if (e instanceof Uint8Array) {
        for (let i of e) if (i !== 0) return !0;
        return !1;
      }
      throw new W(`Expected a boolean in column '${t}', got ${typeof e}: ${e}`);
    }
    case 'Decimal':
      if (typeof e != 'number' && typeof e != 'string' && !re.isDecimal(e))
        throw new W(`Expected a decimal in column '${t}', got ${typeof e}: ${e}`);
      return { $type: 'Decimal', value: e };
    case 'Date': {
      if (typeof e == 'string') return { $type: 'DateTime', value: $a(e) };
      if (typeof e == 'number' || e instanceof Date) return { $type: 'DateTime', value: e };
      throw new W(`Expected a date in column '${t}', got ${typeof e}: ${e}`);
    }
    case 'Time': {
      if (typeof e == 'string') return { $type: 'DateTime', value: `1970-01-01T${$a(e)}` };
      throw new W(`Expected a time in column '${t}', got ${typeof e}: ${e}`);
    }
    case 'Array':
      return e.map((o, s) => Ni(o, `${t}[${s}]`, r.inner, n));
    case 'Object':
      return { $type: 'Json', value: typeof e == 'string' ? e : gr(e) };
    case 'Bytes': {
      if (typeof e == 'string' && e.startsWith('\\x'))
        return { $type: 'Bytes', value: y.from(e.slice(2), 'hex').toString('base64') };
      if (Array.isArray(e)) return { $type: 'Bytes', value: y.from(e).toString('base64') };
      if (e instanceof Uint8Array) return { $type: 'Bytes', value: y.from(e).toString('base64') };
      throw new W(`Expected a byte array in column '${t}', got ${typeof e}: ${e}`);
    }
    case 'Enum': {
      let i = n[r.inner];
      if (i === void 0) throw new W(`Unknown enum '${r.inner}'`);
      let o = i[`${e}`];
      if (o === void 0) throw new W(`Unknown enum value '${e}' for enum '${r.inner}'`);
      return o;
    }
    default:
      Q(r, `DataMapper: Unknown result type: ${r.type}`);
  }
}
var pm = /Z$|(?<!\d{4}-\d{2})[+-]\d{2}(:?\d{2})?$/;
function $a(e) {
  let t = pm.exec(e);
  return t === null ? `${e}Z` : t[0] !== 'Z' && t[1] === void 0 ? `${e}:00` : e;
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var yr;
(function (e) {
  ((e[(e.INTERNAL = 0)] = 'INTERNAL'),
    (e[(e.SERVER = 1)] = 'SERVER'),
    (e[(e.CLIENT = 2)] = 'CLIENT'),
    (e[(e.PRODUCER = 3)] = 'PRODUCER'),
    (e[(e.CONSUMER = 4)] = 'CONSUMER'));
})(yr || (yr = {}));
function mm(e) {
  switch (e) {
    case 'postgres':
      return 'postgresql';
    case 'mysql':
      return 'mysql';
    case 'sqlite':
      return 'sqlite';
    case 'sqlserver':
      return 'mssql';
    default:
      Q(e, `Unknown provider: ${e}`);
  }
}
async function In({ query: e, queryable: t, tracingHelper: r, onQuery: n, execute: i }) {
  return await r.runInChildSpan(
    { name: 'db_query', kind: yr.CLIENT, attributes: { 'db.query.text': e.sql, 'db.system.name': mm(t.provider) } },
    async () => {
      let o = new Date(),
        s = b.now(),
        a = await i(),
        f = b.now();
      return (n?.({ timestamp: o, duration: f - s, query: e.sql, params: e.args }), a);
    }
  );
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
function Li(e) {
  return e.name === 'DriverAdapterError' && typeof e.cause == 'object';
}
u();
c();
p();
m();
d();
l();
var M = {
  Int32: 0,
  Int64: 1,
  Float: 2,
  Double: 3,
  Numeric: 4,
  Boolean: 5,
  Character: 6,
  Text: 7,
  Date: 8,
  Time: 9,
  DateTime: 10,
  Json: 11,
  Enum: 12,
  Bytes: 13,
  Set: 14,
  Uuid: 15,
  Int32Array: 64,
  Int64Array: 65,
  FloatArray: 66,
  DoubleArray: 67,
  NumericArray: 68,
  BooleanArray: 69,
  CharacterArray: 70,
  TextArray: 71,
  DateArray: 72,
  TimeArray: 73,
  DateTimeArray: 74,
  JsonArray: 75,
  EnumArray: 76,
  BytesArray: 77,
  UuidArray: 78,
  UnknownNumber: 128,
};
var ke = class extends Error {
  name = 'UserFacingError';
  code;
  meta;
  constructor(t, r, n) {
    (super(t), (this.code = r), (this.meta = n ?? {}));
  }
  toQueryResponseErrorObject() {
    return {
      error: this.message,
      user_facing_error: { is_panic: !1, message: this.message, meta: this.meta, error_code: this.code },
    };
  }
};
function qa(e) {
  if (!Li(e)) throw e;
  let t = dm(e),
    r = fm(e);
  throw !t || !r ? e : new ke(r, t, { driverAdapterError: e });
}
function dm(e) {
  switch (e.cause.kind) {
    case 'AuthenticationFailed':
      return 'P1000';
    case 'DatabaseDoesNotExist':
      return 'P1003';
    case 'SocketTimeout':
      return 'P1008';
    case 'DatabaseAlreadyExists':
      return 'P1009';
    case 'DatabaseAccessDenied':
      return 'P1010';
    case 'TransactionAlreadyClosed':
      return 'P1018';
    case 'LengthMismatch':
      return 'P2000';
    case 'UniqueConstraintViolation':
      return 'P2002';
    case 'ForeignKeyConstraintViolation':
      return 'P2003';
    case 'UnsupportedNativeDataType':
      return 'P2010';
    case 'NullConstraintViolation':
      return 'P2011';
    case 'ValueOutOfRange':
      return 'P2020';
    case 'TableDoesNotExist':
      return 'P2021';
    case 'ColumnNotFound':
      return 'P2022';
    case 'InvalidIsolationLevel':
    case 'InconsistentColumnData':
      return 'P2023';
    case 'MissingFullTextSearchIndex':
      return 'P2030';
    case 'TransactionWriteConflict':
      return 'P2034';
    case 'GenericJs':
      return 'P2036';
    case 'TooManyConnections':
      return 'P2037';
    case 'postgres':
    case 'sqlite':
    case 'mysql':
    case 'mssql':
      return;
    default:
      Q(e.cause, `Unknown error: ${e.cause}`);
  }
}
function fm(e) {
  switch (e.cause.kind) {
    case 'AuthenticationFailed':
      return `Authentication failed against the database server, the provided database credentials for \`${e.cause.user ?? '(not available)'}\` are not valid`;
    case 'DatabaseDoesNotExist':
      return `Database \`${e.cause.db ?? '(not available)'}\` does not exist on the database server`;
    case 'SocketTimeout':
      return 'Operation has timed out';
    case 'DatabaseAlreadyExists':
      return `Database \`${e.cause.db ?? '(not available)'}\` already exists on the database server`;
    case 'DatabaseAccessDenied':
      return `User was denied access on the database \`${e.cause.db ?? '(not available)'}\``;
    case 'TransactionAlreadyClosed':
      return e.cause.cause;
    case 'LengthMismatch':
      return `The provided value for the column is too long for the column's type. Column: ${e.cause.column ?? '(not available)'}`;
    case 'UniqueConstraintViolation':
      return `Unique constraint failed on the ${Ui(e.cause.constraint)}`;
    case 'ForeignKeyConstraintViolation':
      return `Foreign key constraint violated on the ${Ui(e.cause.constraint)}`;
    case 'UnsupportedNativeDataType':
      return `Failed to deserialize column of type '${e.cause.type}'. If you're using $queryRaw and this column is explicitly marked as \`Unsupported\` in your Prisma schema, try casting this column to any supported Prisma type such as \`String\`.`;
    case 'NullConstraintViolation':
      return `Null constraint violation on the ${Ui(e.cause.constraint)}`;
    case 'ValueOutOfRange':
      return `Value out of range for the type: ${e.cause.cause}`;
    case 'TableDoesNotExist':
      return `The table \`${e.cause.table ?? '(not available)'}\` does not exist in the current database.`;
    case 'ColumnNotFound':
      return `The column \`${e.cause.column ?? '(not available)'}\` does not exist in the current database.`;
    case 'InvalidIsolationLevel':
      return `Invalid isolation level \`${e.cause.level}\``;
    case 'InconsistentColumnData':
      return `Inconsistent column data: ${e.cause.cause}`;
    case 'MissingFullTextSearchIndex':
      return 'Cannot find a fulltext index to use for the native search, try adding a @@fulltext([Fields...]) to your schema';
    case 'TransactionWriteConflict':
      return 'Transaction failed due to a write conflict or a deadlock. Please retry your transaction';
    case 'GenericJs':
      return `Error in external connector (id ${e.cause.id})`;
    case 'TooManyConnections':
      return `Too many database connections opened: ${e.cause.cause}`;
    case 'sqlite':
    case 'postgres':
    case 'mysql':
    case 'mssql':
      return;
    default:
      Q(e.cause, `Unknown error: ${e.cause}`);
  }
}
function Ui(e) {
  return e && 'fields' in e
    ? `fields: (${e.fields.map((t) => `\`${t}\``).join(', ')})`
    : e && 'index' in e
      ? `constraint: \`${e.index}\``
      : e && 'foreignKey' in e
        ? 'foreign key'
        : '(not available)';
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
function tt(e, t) {
  var r = '000000000' + e;
  return r.substr(r.length - t);
}
var Ba = _e(os(), 1);
function gm() {
  try {
    return Ba.default.hostname();
  } catch {
    return g.env._CLUSTER_NETWORK_NAME_ || g.env.COMPUTERNAME || 'hostname';
  }
}
var ja = 2,
  ym = tt(g.pid.toString(36), ja),
  Qa = gm(),
  hm = Qa.length,
  wm = tt(
    Qa.split('')
      .reduce(function (e, t) {
        return +e + t.charCodeAt(0);
      }, +hm + 36)
      .toString(36),
    ja
  );
function Fi() {
  return ym + wm;
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
function On(e) {
  return typeof e == 'string' && /^c[a-z0-9]{20,32}$/.test(e);
}
function $i(e) {
  let n = Math.pow(36, 4),
    i = 0;
  function o() {
    return tt(((Math.random() * n) << 0).toString(36), 4);
  }
  function s() {
    return ((i = i < n ? i : 0), i++, i - 1);
  }
  function a() {
    var f = 'c',
      w = new Date().getTime().toString(36),
      v = tt(s().toString(36), 4),
      A = e(),
      R = o() + o();
    return f + w + v + A + R;
  }
  return ((a.fingerprint = e), (a.isCuid = On), a);
}
var bm = $i(Fi);
var Ga = bm;
var Bl = _e(Nl());
u();
c();
p();
m();
d();
l();
Xe();
u();
c();
p();
m();
d();
l();
var Ll = 'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';
var od = 128,
  nt,
  _t;
function sd(e) {
  (!nt || nt.length < e
    ? ((nt = y.allocUnsafe(e * od)), Wt.getRandomValues(nt), (_t = 0))
    : _t + e > nt.length && (Wt.getRandomValues(nt), (_t = 0)),
    (_t += e));
}
function Ji(e = 21) {
  sd((e |= 0));
  let t = '';
  for (let r = _t - e; r < _t; r++) t += Ll[nt[r] & 63];
  return t;
}
u();
c();
p();
m();
d();
l();
Xe();
var Fl = '0123456789ABCDEFGHJKMNPQRSTVWXYZ',
  Pr = 32;
var ad = 16,
  $l = 10,
  Ul = 0xffffffffffff;
var it;
(function (e) {
  ((e.Base32IncorrectEncoding = 'B32_ENC_INVALID'),
    (e.DecodeTimeInvalidCharacter = 'DEC_TIME_CHAR'),
    (e.DecodeTimeValueMalformed = 'DEC_TIME_MALFORMED'),
    (e.EncodeTimeNegative = 'ENC_TIME_NEG'),
    (e.EncodeTimeSizeExceeded = 'ENC_TIME_SIZE_EXCEED'),
    (e.EncodeTimeValueMalformed = 'ENC_TIME_MALFORMED'),
    (e.PRNGDetectFailure = 'PRNG_DETECT'),
    (e.ULIDInvalid = 'ULID_INVALID'),
    (e.Unexpected = 'UNEXPECTED'),
    (e.UUIDInvalid = 'UUID_INVALID'));
})(it || (it = {}));
var ot = class extends Error {
  constructor(t, r) {
    (super(`${r} (${t})`), (this.name = 'ULIDError'), (this.code = t));
  }
};
function ld(e) {
  let t = Math.floor(e() * Pr);
  return (t === Pr && (t = Pr - 1), Fl.charAt(t));
}
function ud(e) {
  let t = cd(),
    r = (t && (t.crypto || t.msCrypto)) || (typeof yt < 'u' ? yt : null);
  if (typeof r?.getRandomValues == 'function')
    return () => {
      let n = new Uint8Array(1);
      return (r.getRandomValues(n), n[0] / 255);
    };
  if (typeof r?.randomBytes == 'function') return () => r.randomBytes(1).readUInt8() / 255;
  if (yt?.randomBytes) return () => yt.randomBytes(1).readUInt8() / 255;
  throw new ot(it.PRNGDetectFailure, 'Failed to find a reliable PRNG');
}
function cd() {
  return dd()
    ? self
    : typeof window < 'u'
      ? window
      : typeof globalThis < 'u' || typeof globalThis < 'u'
        ? globalThis
        : null;
}
function pd(e, t) {
  let r = '';
  for (; e > 0; e--) r = ld(t) + r;
  return r;
}
function md(e, t = $l) {
  if (isNaN(e)) throw new ot(it.EncodeTimeValueMalformed, `Time must be a number: ${e}`);
  if (e > Ul) throw new ot(it.EncodeTimeSizeExceeded, `Cannot encode a time larger than ${Ul}: ${e}`);
  if (e < 0) throw new ot(it.EncodeTimeNegative, `Time must be positive: ${e}`);
  if (Number.isInteger(e) === !1) throw new ot(it.EncodeTimeValueMalformed, `Time must be an integer: ${e}`);
  let r,
    n = '';
  for (let i = t; i > 0; i--) ((r = e % Pr), (n = Fl.charAt(r) + n), (e = (e - r) / Pr));
  return n;
}
function dd() {
  return typeof WorkerGlobalScope < 'u' && self instanceof WorkerGlobalScope;
}
function Vl(e, t) {
  let r = t || ud(),
    n = !e || isNaN(e) ? Date.now() : e;
  return md(n, $l) + pd(ad, r);
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var ie = [];
for (let e = 0; e < 256; ++e) ie.push((e + 256).toString(16).slice(1));
function Mn(e, t = 0) {
  return (
    ie[e[t + 0]] +
    ie[e[t + 1]] +
    ie[e[t + 2]] +
    ie[e[t + 3]] +
    '-' +
    ie[e[t + 4]] +
    ie[e[t + 5]] +
    '-' +
    ie[e[t + 6]] +
    ie[e[t + 7]] +
    '-' +
    ie[e[t + 8]] +
    ie[e[t + 9]] +
    '-' +
    ie[e[t + 10]] +
    ie[e[t + 11]] +
    ie[e[t + 12]] +
    ie[e[t + 13]] +
    ie[e[t + 14]] +
    ie[e[t + 15]]
  ).toLowerCase();
}
u();
c();
p();
m();
d();
l();
Xe();
var Ln = new Uint8Array(256),
  Nn = Ln.length;
function Mt() {
  return (Nn > Ln.length - 16 && (en(Ln), (Nn = 0)), Ln.slice(Nn, (Nn += 16)));
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
Xe();
var Ki = { randomUUID: Xr };
function fd(e, t, r) {
  if (Ki.randomUUID && !t && !e) return Ki.randomUUID();
  e = e || {};
  let n = e.random ?? e.rng?.() ?? Mt();
  if (n.length < 16) throw new Error('Random bytes length must be >= 16');
  if (((n[6] = (n[6] & 15) | 64), (n[8] = (n[8] & 63) | 128), t)) {
    if (((r = r || 0), r < 0 || r + 16 > t.length))
      throw new RangeError(`UUID byte range ${r}:${r + 15} is out of buffer bounds`);
    for (let i = 0; i < 16; ++i) t[r + i] = n[i];
    return t;
  }
  return Mn(n);
}
var zi = fd;
u();
c();
p();
m();
d();
l();
var Yi = {};
function gd(e, t, r) {
  let n;
  if (e) n = ql(e.random ?? e.rng?.() ?? Mt(), e.msecs, e.seq, t, r);
  else {
    let i = Date.now(),
      o = Mt();
    (yd(Yi, i, o), (n = ql(o, Yi.msecs, Yi.seq, t, r)));
  }
  return t ?? Mn(n);
}
function yd(e, t, r) {
  return (
    (e.msecs ??= -1 / 0),
    (e.seq ??= 0),
    t > e.msecs
      ? ((e.seq = (r[6] << 23) | (r[7] << 16) | (r[8] << 8) | r[9]), (e.msecs = t))
      : ((e.seq = (e.seq + 1) | 0), e.seq === 0 && e.msecs++),
    e
  );
}
function ql(e, t, r, n, i = 0) {
  if (e.length < 16) throw new Error('Random bytes length must be >= 16');
  if (!n) ((n = new Uint8Array(16)), (i = 0));
  else if (i < 0 || i + 16 > n.length) throw new RangeError(`UUID byte range ${i}:${i + 15} is out of buffer bounds`);
  return (
    (t ??= Date.now()),
    (r ??= ((e[6] * 127) << 24) | (e[7] << 16) | (e[8] << 8) | e[9]),
    (n[i++] = (t / 1099511627776) & 255),
    (n[i++] = (t / 4294967296) & 255),
    (n[i++] = (t / 16777216) & 255),
    (n[i++] = (t / 65536) & 255),
    (n[i++] = (t / 256) & 255),
    (n[i++] = t & 255),
    (n[i++] = 112 | ((r >>> 28) & 15)),
    (n[i++] = (r >>> 20) & 255),
    (n[i++] = 128 | ((r >>> 14) & 63)),
    (n[i++] = (r >>> 6) & 255),
    (n[i++] = ((r << 2) & 255) | (e[10] & 3)),
    (n[i++] = e[11]),
    (n[i++] = e[12]),
    (n[i++] = e[13]),
    (n[i++] = e[14]),
    (n[i++] = e[15]),
    n
  );
}
var Zi = gd;
var Un = class {
    #e = {};
    constructor() {
      (this.register('uuid', new to()),
        this.register('cuid', new ro()),
        this.register('ulid', new no()),
        this.register('nanoid', new io()),
        this.register('product', new oo()));
    }
    snapshot(t) {
      return Object.create(this.#e, { now: { value: t === 'mysql' ? new eo() : new Xi() } });
    }
    register(t, r) {
      this.#e[t] = r;
    }
  },
  Xi = class {
    #e = new Date();
    generate() {
      return this.#e.toISOString();
    }
  },
  eo = class {
    #e = new Date();
    generate() {
      return this.#e.toISOString().replace('T', ' ').replace('Z', '');
    }
  },
  to = class {
    generate(t) {
      if (t === 4) return zi();
      if (t === 7) return Zi();
      throw new Error('Invalid UUID generator arguments');
    }
  },
  ro = class {
    generate(t) {
      if (t === 1) return Ga();
      if (t === 2) return (0, Bl.createId)();
      throw new Error('Invalid CUID generator arguments');
    }
  },
  no = class {
    generate() {
      return Vl();
    }
  },
  io = class {
    generate(t) {
      if (typeof t == 'number') return Ji(t);
      if (t === void 0) return Ji();
      throw new Error('Invalid Nanoid generator arguments');
    }
  },
  oo = class {
    generate(t, r) {
      if (t === void 0 || r === void 0) throw new Error('Invalid Product generator arguments');
      return Array.isArray(t) && Array.isArray(r)
        ? t.flatMap((n) => r.map((i) => [n, i]))
        : Array.isArray(t)
          ? t.map((n) => [n, r])
          : Array.isArray(r)
            ? r.map((n) => [t, n])
            : [[t, r]];
    }
  };
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
function so(e) {
  return typeof e == 'object' && e !== null && e.prisma__type === 'param';
}
function ao(e) {
  return typeof e == 'object' && e !== null && e.prisma__type === 'generatorCall';
}
function jl(e) {
  return typeof e == 'object' && e !== null && e.prisma__type === 'bytes';
}
function Ql(e) {
  return typeof e == 'object' && e !== null && e.prisma__type === 'bigint';
}
function uo(e, t, r) {
  let n = e.type;
  switch (n) {
    case 'rawSql':
      return Hl(e.sql, Gl(e.params, t, r));
    case 'templateSql':
      return hd(e.fragments, e.placeholderFormat, Gl(e.params, t, r));
    default:
      Q(n, 'Invalid query type');
  }
}
function Gl(e, t, r) {
  return e.map((n) => Te(n, t, r));
}
function Te(e, t, r) {
  let n = e;
  for (; bd(n); )
    if (so(n)) {
      let i = t[n.prisma__value.name];
      if (i === void 0) throw new Error(`Missing value for query variable ${n.prisma__value.name}`);
      n = i;
    } else if (ao(n)) {
      let { name: i, args: o } = n.prisma__value,
        s = r[i];
      if (!s) throw new Error(`Encountered an unknown generator '${i}'`);
      n = s.generate(...o.map((a) => Te(a, t, r)));
    } else Q(n, `Unexpected unevaluated value type: ${n}`);
  return (
    Array.isArray(n)
      ? (n = n.map((i) => Te(i, t, r)))
      : jl(n)
        ? (n = y.from(n.prisma__value, 'base64'))
        : Ql(n) && (n = BigInt(n.prisma__value)),
    n
  );
}
function hd(e, t, r) {
  let n = 0,
    i = 1,
    o = [],
    s = e
      .map((a) => {
        let f = a.type;
        switch (f) {
          case 'parameter':
            if (n >= r.length)
              throw new Error(`Malformed query template. Fragments attempt to read over ${r.length} parameters.`);
            return (o.push(r[n++]), lo(t, i++));
          case 'stringChunk':
            return a.chunk;
          case 'parameterTuple': {
            if (n >= r.length)
              throw new Error(`Malformed query template. Fragments attempt to read over ${r.length} parameters.`);
            let w = r[n++],
              v = Array.isArray(w) ? w : [w];
            return `(${v.length == 0 ? 'NULL' : v.map((R) => (o.push(R), lo(t, i++))).join(',')})`;
          }
          case 'parameterTupleList': {
            if (n >= r.length)
              throw new Error(`Malformed query template. Fragments attempt to read over ${r.length} parameters.`);
            let w = r[n++];
            if (!Array.isArray(w)) throw new Error('Malformed query template. Tuple list expected.');
            if (w.length === 0) throw new Error('Malformed query template. Tuple list cannot be empty.');
            return w
              .map((A) => {
                if (!Array.isArray(A)) throw new Error('Malformed query template. Tuple expected.');
                let R = A.map((C) => (o.push(C), lo(t, i++))).join(a.itemSeparator);
                return `${a.itemPrefix}${R}${a.itemSuffix}`;
              })
              .join(a.groupSeparator);
          }
          default:
            Q(f, 'Invalid fragment type');
        }
      })
      .join('');
  return Hl(s, o);
}
function lo(e, t) {
  return e.hasNumbering ? `${e.prefix}${t}` : e.prefix;
}
function Hl(e, t) {
  let r = t.map((n) => wd(n));
  return { sql: e, args: t, argTypes: r };
}
function wd(e) {
  return typeof e == 'string'
    ? 'Text'
    : typeof e == 'number'
      ? 'Numeric'
      : typeof e == 'boolean'
        ? 'Boolean'
        : Array.isArray(e)
          ? 'Array'
          : y.isBuffer(e)
            ? 'Bytes'
            : 'Unknown';
}
function bd(e) {
  return so(e) || ao(e);
}
u();
c();
p();
m();
d();
l();
function Jl(e) {
  let t = e.columnTypes.map((r) => {
    switch (r) {
      case M.Bytes:
        return (n) => (Array.isArray(n) ? new Uint8Array(n) : n);
      default:
        return (n) => n;
    }
  });
  return e.rows.map((r) =>
    r
      .map((n, i) => t[i](n))
      .reduce((n, i, o) => {
        let s = e.columnNames[o].split('.'),
          a = n;
        for (let f = 0; f < s.length; f++) {
          let w = s[f];
          f === s.length - 1 ? (a[w] = i) : (a[w] === void 0 && (a[w] = {}), (a = a[w]));
        }
        return n;
      }, {})
  );
}
function Kl(e) {
  let r = e.columnTypes
    .map((n) => Wl(n))
    .map((n) => {
      switch (n) {
        case 'bytes':
          return (i) => (Array.isArray(i) ? new Uint8Array(i) : i);
        case 'int':
          return (i) => (i === null ? null : typeof i == 'number' ? i : parseInt(`${i}`, 10));
        case 'bigint':
          return (i) => (i === null ? null : typeof i == 'bigint' ? i : BigInt(`${i}`));
        case 'json':
          return (i) => (typeof i == 'string' ? JSON.parse(i) : i);
        case 'bool':
          return (i) => (typeof i == 'string' ? i === 'true' || i === '1' : typeof i == 'number' ? i === 1 : i);
        default:
          return (i) => i;
      }
    });
  return {
    columns: e.columnNames,
    types: e.columnTypes.map((n) => Wl(n)),
    rows: e.rows.map((n) => n.map((i, o) => r[o](i))),
  };
}
function Wl(e) {
  switch (e) {
    case M.Int32:
      return 'int';
    case M.Int64:
      return 'bigint';
    case M.Float:
      return 'float';
    case M.Double:
      return 'double';
    case M.Text:
      return 'string';
    case M.Enum:
      return 'enum';
    case M.Bytes:
      return 'bytes';
    case M.Boolean:
      return 'bool';
    case M.Character:
      return 'char';
    case M.Numeric:
      return 'decimal';
    case M.Json:
      return 'json';
    case M.Uuid:
      return 'uuid';
    case M.DateTime:
      return 'datetime';
    case M.Date:
      return 'date';
    case M.Time:
      return 'time';
    case M.Int32Array:
      return 'int-array';
    case M.Int64Array:
      return 'bigint-array';
    case M.FloatArray:
      return 'float-array';
    case M.DoubleArray:
      return 'double-array';
    case M.TextArray:
      return 'string-array';
    case M.EnumArray:
      return 'string-array';
    case M.BytesArray:
      return 'bytes-array';
    case M.BooleanArray:
      return 'bool-array';
    case M.CharacterArray:
      return 'char-array';
    case M.NumericArray:
      return 'decimal-array';
    case M.JsonArray:
      return 'json-array';
    case M.UuidArray:
      return 'uuid-array';
    case M.DateTimeArray:
      return 'datetime-array';
    case M.DateArray:
      return 'date-array';
    case M.TimeArray:
      return 'time-array';
    case M.UnknownNumber:
      return 'unknown';
    case M.Set:
      return 'string';
    default:
      Q(e, `Unexpected column type: ${e}`);
  }
}
u();
c();
p();
m();
d();
l();
function zl(e, t, r) {
  if (!t.every((n) => co(e, n))) {
    let n = Ed(e, r),
      i = xd(r);
    throw new ke(n, i, r.context);
  }
}
function co(e, t) {
  switch (t.type) {
    case 'rowCountEq':
      return Array.isArray(e) ? e.length === t.args : e === null ? t.args === 0 : t.args === 1;
    case 'rowCountNeq':
      return Array.isArray(e) ? e.length !== t.args : e === null ? t.args !== 0 : t.args !== 1;
    case 'affectedRowCountEq':
      return e === t.args;
    case 'never':
      return !1;
    default:
      Q(t, `Unknown rule type: ${t.type}`);
  }
}
function Ed(e, t) {
  switch (t.error_identifier) {
    case 'RELATION_VIOLATION':
      return `The change you are trying to make would violate the required relation '${t.context.relation}' between the \`${t.context.modelA}\` and \`${t.context.modelB}\` models.`;
    case 'MISSING_RECORD':
      return `An operation failed because it depends on one or more records that were required but not found. No record was found for ${t.context.operation}.`;
    case 'MISSING_RELATED_RECORD': {
      let r = t.context.neededFor ? ` (needed to ${t.context.neededFor})` : '';
      return `An operation failed because it depends on one or more records that were required but not found. No '${t.context.model}' record${r} was found for ${t.context.operation} on ${t.context.relationType} relation '${t.context.relation}'.`;
    }
    case 'INCOMPLETE_CONNECT_INPUT':
      return `An operation failed because it depends on one or more records that were required but not found. Expected ${t.context.expectedRows} records to be connected, found only ${Array.isArray(e) ? e.length : e}.`;
    case 'INCOMPLETE_CONNECT_OUTPUT':
      return `The required connected records were not found. Expected ${t.context.expectedRows} records to be connected after connect operation on ${t.context.relationType} relation '${t.context.relation}', found ${Array.isArray(e) ? e.length : e}.`;
    case 'RECORDS_NOT_CONNECTED':
      return `The records for relation \`${t.context.relation}\` between the \`${t.context.parent}\` and \`${t.context.child}\` models are not connected.`;
    default:
      Q(t, `Unknown error identifier: ${t}`);
  }
}
function xd(e) {
  switch (e.error_identifier) {
    case 'RELATION_VIOLATION':
      return 'P2014';
    case 'RECORDS_NOT_CONNECTED':
      return 'P2017';
    case 'INCOMPLETE_CONNECT_OUTPUT':
      return 'P2018';
    case 'MISSING_RECORD':
    case 'MISSING_RELATED_RECORD':
    case 'INCOMPLETE_CONNECT_INPUT':
      return 'P2025';
    default:
      Q(e, `Unknown error identifier: ${e}`);
  }
}
var Nt = class e {
  #e;
  #t;
  #r;
  #s = new Un();
  #i;
  #n;
  #a;
  constructor({
    transactionManager: t,
    placeholderValues: r,
    onQuery: n,
    tracingHelper: i,
    serializer: o,
    rawSerializer: s,
  }) {
    ((this.#e = t), (this.#t = r), (this.#r = n), (this.#i = i), (this.#n = o), (this.#a = s ?? o));
  }
  static forSql(t) {
    return new e({
      transactionManager: t.transactionManager,
      placeholderValues: t.placeholderValues,
      onQuery: t.onQuery,
      tracingHelper: t.tracingHelper,
      serializer: Jl,
      rawSerializer: Kl,
    });
  }
  async run(t, r) {
    let { value: n } = await this.interpretNode(t, r, this.#t, this.#s.snapshot(r.provider)).catch((i) => qa(i));
    return n;
  }
  async interpretNode(t, r, n, i) {
    switch (t.type) {
      case 'value':
        return { value: Te(t.args, n, i) };
      case 'seq': {
        let o;
        for (let s of t.args) o = await this.interpretNode(s, r, n, i);
        return o ?? { value: void 0 };
      }
      case 'get':
        return { value: n[t.args.name] };
      case 'let': {
        let o = Object.create(n);
        for (let s of t.args.bindings) {
          let { value: a } = await this.interpretNode(s.expr, r, o, i);
          o[s.name] = a;
        }
        return this.interpretNode(t.args.expr, r, o, i);
      }
      case 'getFirstNonEmpty': {
        for (let o of t.args.names) {
          let s = n[o];
          if (!Yl(s)) return { value: s };
        }
        return { value: [] };
      }
      case 'concat': {
        let o = await Promise.all(t.args.map((s) => this.interpretNode(s, r, n, i).then((a) => a.value)));
        return { value: o.length > 0 ? o.reduce((s, a) => s.concat(Tr(a)), []) : [] };
      }
      case 'sum': {
        let o = await Promise.all(t.args.map((s) => this.interpretNode(s, r, n, i).then((a) => a.value)));
        return { value: o.length > 0 ? o.reduce((s, a) => De(s) + De(a)) : 0 };
      }
      case 'execute': {
        let o = uo(t.args, n, i);
        return this.#l(o, r, async () => ({ value: await r.executeRaw(o) }));
      }
      case 'query': {
        let o = uo(t.args, n, i);
        return this.#l(o, r, async () => {
          let s = await r.queryRaw(o);
          return t.args.type === 'rawSql'
            ? { value: this.#a(s), lastInsertId: s.lastInsertId }
            : { value: this.#n(s), lastInsertId: s.lastInsertId };
        });
      }
      case 'reverse': {
        let { value: o, lastInsertId: s } = await this.interpretNode(t.args, r, n, i);
        return { value: Array.isArray(o) ? o.reverse() : o, lastInsertId: s };
      }
      case 'unique': {
        let { value: o, lastInsertId: s } = await this.interpretNode(t.args, r, n, i);
        if (!Array.isArray(o)) return { value: o, lastInsertId: s };
        if (o.length > 1) throw new Error(`Expected zero or one element, got ${o.length}`);
        return { value: o[0] ?? null, lastInsertId: s };
      }
      case 'required': {
        let { value: o, lastInsertId: s } = await this.interpretNode(t.args, r, n, i);
        if (Yl(o)) throw new Error('Required value is empty');
        return { value: o, lastInsertId: s };
      }
      case 'mapField': {
        let { value: o, lastInsertId: s } = await this.interpretNode(t.args.records, r, n, i);
        return { value: Xl(o, t.args.field), lastInsertId: s };
      }
      case 'join': {
        let { value: o, lastInsertId: s } = await this.interpretNode(t.args.parent, r, n, i);
        if (o === null) return { value: null, lastInsertId: s };
        let a = await Promise.all(
          t.args.children.map(async (f) => ({
            joinExpr: f,
            childRecords: (await this.interpretNode(f.child, r, n, i)).value,
          }))
        );
        return { value: Pd(o, a), lastInsertId: s };
      }
      case 'transaction': {
        if (!this.#e.enabled) return this.interpretNode(t.args, r, n, i);
        let o = this.#e.manager,
          s = await o.startTransaction(),
          a = o.getTransaction(s, 'query');
        try {
          let f = await this.interpretNode(t.args, a, n, i);
          return (await o.commitTransaction(s.id), f);
        } catch (f) {
          throw (await o.rollbackTransaction(s.id), f);
        }
      }
      case 'dataMap': {
        let { value: o, lastInsertId: s } = await this.interpretNode(t.args.expr, r, n, i);
        return { value: Va(o, t.args.structure, t.args.enums), lastInsertId: s };
      }
      case 'validate': {
        let { value: o, lastInsertId: s } = await this.interpretNode(t.args.expr, r, n, i);
        return (zl(o, t.args.rules, t.args), { value: o, lastInsertId: s });
      }
      case 'if': {
        let { value: o } = await this.interpretNode(t.args.value, r, n, i);
        return co(o, t.args.rule)
          ? await this.interpretNode(t.args.then, r, n, i)
          : await this.interpretNode(t.args.else, r, n, i);
      }
      case 'unit':
        return { value: void 0 };
      case 'diff': {
        let { value: o } = await this.interpretNode(t.args.from, r, n, i),
          { value: s } = await this.interpretNode(t.args.to, r, n, i),
          a = new Set(Tr(s));
        return { value: Tr(o).filter((f) => !a.has(f)) };
      }
      case 'distinctBy': {
        let { value: o, lastInsertId: s } = await this.interpretNode(t.args.expr, r, n, i),
          a = new Set(),
          f = [];
        for (let w of Tr(o)) {
          let v = Fn(w, t.args.fields);
          a.has(v) || (a.add(v), f.push(w));
        }
        return { value: f, lastInsertId: s };
      }
      case 'paginate': {
        let { value: o, lastInsertId: s } = await this.interpretNode(t.args.expr, r, n, i),
          a = Tr(o),
          f = t.args.pagination.linkingFields;
        if (f !== null) {
          let w = new Map();
          for (let A of a) {
            let R = Fn(A, f);
            (w.has(R) || w.set(R, []), w.get(R).push(A));
          }
          let v = Array.from(w.entries());
          return (
            v.sort(([A], [R]) => (A < R ? -1 : A > R ? 1 : 0)),
            { value: v.flatMap(([, A]) => Zl(A, t.args.pagination)), lastInsertId: s }
          );
        }
        return { value: Zl(a, t.args.pagination), lastInsertId: s };
      }
      case 'initializeRecord': {
        let { lastInsertId: o } = await this.interpretNode(t.args.expr, r, n, i),
          s = {};
        for (let [a, f] of Object.entries(t.args.fields)) s[a] = Td(f, o, n, i);
        return { value: s, lastInsertId: o };
      }
      case 'mapRecord': {
        let { value: o, lastInsertId: s } = await this.interpretNode(t.args.expr, r, n, i),
          a = o === null ? {} : po(o);
        for (let [f, w] of Object.entries(t.args.fields)) a[f] = vd(w, a[f], n, i);
        return { value: a, lastInsertId: s };
      }
      default:
        Q(t, `Unexpected node type: ${t.type}`);
    }
  }
  #l(t, r, n) {
    return In({ query: t, queryable: r, execute: n, tracingHelper: this.#i, onQuery: this.#r });
  }
};
function Yl(e) {
  return Array.isArray(e) ? e.length === 0 : e == null;
}
function Tr(e) {
  return Array.isArray(e) ? e : [e];
}
function De(e) {
  if (typeof e == 'number') return e;
  if (typeof e == 'string') return Number(e);
  throw new Error(`Expected number, got ${typeof e}`);
}
function po(e) {
  if (typeof e == 'object' && e !== null) return e;
  throw new Error(`Expected object, got ${typeof e}`);
}
function Xl(e, t) {
  return Array.isArray(e) ? e.map((r) => Xl(r, t)) : typeof e == 'object' && e !== null ? (e[t] ?? null) : e;
}
function Pd(e, t) {
  for (let { joinExpr: r, childRecords: n } of t) {
    let i = r.on.map(([a]) => a),
      o = r.on.map(([, a]) => a),
      s = {};
    for (let a of Array.isArray(e) ? e : [e]) {
      let f = po(a),
        w = Fn(f, i);
      (s[w] || (s[w] = []), s[w].push(f), r.isRelationUnique ? (f[r.parentField] = null) : (f[r.parentField] = []));
    }
    for (let a of Array.isArray(n) ? n : [n]) {
      if (a === null) continue;
      let f = Fn(po(a), o);
      for (let w of s[f] ?? []) r.isRelationUnique ? (w[r.parentField] = a) : w[r.parentField].push(a);
    }
  }
  return e;
}
function Zl(e, { cursor: t, skip: r, take: n }) {
  let i = t !== null ? e.findIndex((a) => fr(a, t)) : 0;
  if (i === -1) return [];
  let o = i + (r ?? 0),
    s = n !== null ? o + n : e.length;
  return e.slice(o, s);
}
function Fn(e, t) {
  return JSON.stringify(t.map((r) => e[r]));
}
function Td(e, t, r, n) {
  switch (e.type) {
    case 'value':
      return Te(e.value, r, n);
    case 'lastInsertId':
      return t;
    default:
      Q(e, `Unexpected field initializer type: ${e.type}`);
  }
}
function vd(e, t, r, n) {
  switch (e.type) {
    case 'set':
      return Te(e.value, r, n);
    case 'add':
      return De(t) + De(Te(e.value, r, n));
    case 'subtract':
      return De(t) - De(Te(e.value, r, n));
    case 'multiply':
      return De(t) * De(Te(e.value, r, n));
    case 'divide': {
      let i = De(t),
        o = De(Te(e.value, r, n));
      return o === 0 ? null : i / o;
    }
    default:
      Q(e, `Unexpected field operation type: ${e.type}`);
  }
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
async function Ad() {
  return globalThis.crypto ?? (await Promise.resolve().then(() => (Xe(), ui)));
}
async function eu() {
  return (await Ad()).randomUUID();
}
u();
c();
p();
m();
d();
l();
var we = class extends ke {
    name = 'TransactionManagerError';
    constructor(t, r) {
      super('Transaction API error: ' + t, 'P2028', r);
    }
  },
  vr = class extends we {
    constructor() {
      super(
        "Transaction not found. Transaction ID is invalid, refers to an old closed transaction Prisma doesn't have information about anymore, or was obtained before disconnecting."
      );
    }
  },
  $n = class extends we {
    constructor(t) {
      super(`Transaction already closed: A ${t} cannot be executed on a committed transaction.`);
    }
  },
  Vn = class extends we {
    constructor(t) {
      super(`Transaction already closed: A ${t} cannot be executed on a transaction that was rolled back.`);
    }
  },
  qn = class extends we {
    constructor() {
      super('Unable to start a transaction in the given time.');
    }
  },
  Bn = class extends we {
    constructor(t, { timeout: r, timeTaken: n }) {
      super(
        `A ${t} cannot be executed on an expired transaction. The timeout for this transaction was ${r} ms, however ${n} ms passed since the start of the transaction. Consider increasing the interactive transaction timeout or doing less work in the transaction`,
        { operation: t, timeout: r, timeTaken: n }
      );
    }
  },
  Lt = class extends we {
    constructor(t) {
      super(`Internal Consistency Error: ${t}`);
    }
  },
  jn = class extends we {
    constructor(t) {
      super(`Invalid isolation level: ${t}`, { isolationLevel: t });
    }
  };
var Cd = 100,
  Ar = J('prisma:client:transactionManager'),
  Rd = () => ({ sql: 'COMMIT', args: [], argTypes: [] }),
  Sd = () => ({ sql: 'ROLLBACK', args: [], argTypes: [] }),
  Id = () => ({ sql: '-- Implicit "COMMIT" query via underlying driver', args: [], argTypes: [] }),
  Od = () => ({ sql: '-- Implicit "ROLLBACK" query via underlying driver', args: [], argTypes: [] }),
  Cr = class {
    transactions = new Map();
    closedTransactions = [];
    driverAdapter;
    transactionOptions;
    tracingHelper;
    #e;
    constructor({ driverAdapter: t, transactionOptions: r, tracingHelper: n, onQuery: i }) {
      ((this.driverAdapter = t), (this.transactionOptions = r), (this.tracingHelper = n), (this.#e = i));
    }
    async startTransaction(t) {
      return await this.tracingHelper.runInChildSpan('start_transaction', () => this.#t(t));
    }
    async #t(t) {
      let r = t !== void 0 ? this.validateOptions(t) : this.transactionOptions,
        n = {
          id: await eu(),
          status: 'waiting',
          timer: void 0,
          timeout: r.timeout,
          startedAt: Date.now(),
          transaction: void 0,
        };
      this.transactions.set(n.id, n);
      let i = setTimeout(() => (n.status = 'timed_out'), r.maxWait);
      switch (
        ((n.transaction = await this.driverAdapter.startTransaction(r.isolationLevel)), clearTimeout(i), n.status)
      ) {
        case 'waiting':
          return ((n.status = 'running'), (n.timer = this.startTransactionTimeout(n.id, r.timeout)), { id: n.id });
        case 'timed_out':
          throw (await this.closeTransaction(n, 'timed_out'), new qn());
        case 'running':
        case 'committed':
        case 'rolled_back':
          throw new Lt(`Transaction in invalid state ${n.status} although it just finished startup.`);
        default:
          Q(n.status, 'Unknown transaction status.');
      }
    }
    async commitTransaction(t) {
      return await this.tracingHelper.runInChildSpan('commit_transaction', async () => {
        let r = this.getActiveTransaction(t, 'commit');
        await this.closeTransaction(r, 'committed');
      });
    }
    async rollbackTransaction(t) {
      return await this.tracingHelper.runInChildSpan('rollback_transaction', async () => {
        let r = this.getActiveTransaction(t, 'rollback');
        await this.closeTransaction(r, 'rolled_back');
      });
    }
    getTransaction(t, r) {
      let n = this.getActiveTransaction(t.id, r);
      if (!n.transaction) throw new vr();
      return n.transaction;
    }
    getActiveTransaction(t, r) {
      let n = this.transactions.get(t);
      if (!n) {
        let i = this.closedTransactions.find((o) => o.id === t);
        if (i)
          switch ((Ar('Transaction already closed.', { transactionId: t, status: i.status }), i.status)) {
            case 'waiting':
            case 'running':
              throw new Lt('Active transaction found in closed transactions list.');
            case 'committed':
              throw new $n(r);
            case 'rolled_back':
              throw new Vn(r);
            case 'timed_out':
              throw new Bn(r, { timeout: i.timeout, timeTaken: Date.now() - i.startedAt });
          }
        else throw (Ar('Transaction not found.', t), new vr());
      }
      if (['committed', 'rolled_back', 'timed_out'].includes(n.status))
        throw new Lt('Closed transaction found in active transactions map.');
      return n;
    }
    async cancelAllTransactions() {
      await Promise.allSettled([...this.transactions.values()].map((t) => this.closeTransaction(t, 'rolled_back')));
    }
    startTransactionTimeout(t, r) {
      let n = Date.now();
      return setTimeout(async () => {
        Ar('Transaction timed out.', { transactionId: t, timeoutStartedAt: n, timeout: r });
        let i = this.transactions.get(t);
        i && ['running', 'waiting'].includes(i.status)
          ? await this.closeTransaction(i, 'timed_out')
          : Ar('Transaction already committed or rolled back when timeout happened.', t);
      }, r);
    }
    async closeTransaction(t, r) {
      (Ar('Closing transaction.', { transactionId: t.id, status: r }), (t.status = r));
      try {
        if (t.transaction && r === 'committed')
          if (t.transaction.options.usePhantomQuery) await this.#r(Id(), t.transaction, () => t.transaction.commit());
          else {
            let n = Rd();
            (await this.#r(n, t.transaction, () => t.transaction.executeRaw(n)), await t.transaction.commit());
          }
        else if (t.transaction)
          if (t.transaction.options.usePhantomQuery) await this.#r(Od(), t.transaction, () => t.transaction.rollback());
          else {
            let n = Sd();
            (await this.#r(n, t.transaction, () => t.transaction.executeRaw(n)), await t.transaction.rollback());
          }
      } finally {
        (clearTimeout(t.timer),
          (t.timer = void 0),
          this.transactions.delete(t.id),
          this.closedTransactions.push(t),
          this.closedTransactions.length > Cd && this.closedTransactions.shift());
      }
    }
    validateOptions(t) {
      if (!t.timeout) throw new we('timeout is required');
      if (!t.maxWait) throw new we('maxWait is required');
      if (t.isolationLevel === 'SNAPSHOT') throw new jn(t.isolationLevel);
      return { ...t, timeout: t.timeout, maxWait: t.maxWait };
    }
    #r(t, r, n) {
      return In({ query: t, queryable: r, execute: n, tracingHelper: this.tracingHelper, onQuery: this.#e });
    }
  };
var Qn = '6.11.1';
u();
c();
p();
m();
d();
l();
var mo,
  tu = {
    async loadQueryCompiler(e) {
      let { clientVersion: t, adapter: r, compilerWasm: n } = e;
      if (r === void 0)
        throw new L(`The \`adapter\` option for \`PrismaClient\` is required in this context (${Qe().prettyName})`, t);
      if (n === void 0) throw new L('WASM query compiler was unexpectedly `undefined`', t);
      return (
        mo === void 0 &&
          (mo = (async () => {
            let i = await n.getRuntime(),
              o = await n.getQueryCompilerWasmModule();
            if (o == null) throw new L('The loaded wasm module was unexpectedly `undefined` or `null` once loaded', t);
            let s = { './query_compiler_bg.js': i },
              a = new WebAssembly.Instance(o, s),
              f = a.exports.__wbindgen_start;
            return (i.__wbg_set_wasm(a.exports), f(), i.QueryCompiler);
          })()),
        await mo
      );
    },
  };
var ru = 'P2038',
  Rr = J('prisma:client:clientEngine'),
  iu = globalThis;
iu.PRISMA_WASM_PANIC_REGISTRY = {
  set_message(e) {
    throw new ae(e, Qn);
  },
};
var Sr = class {
  name = 'ClientEngine';
  #e;
  #t = { type: 'disconnected' };
  #r;
  #s;
  config;
  datamodel;
  logEmitter;
  logQueries;
  logLevel;
  tracingHelper;
  #i;
  constructor(t, r) {
    if (!t.previewFeatures?.includes('driverAdapters'))
      throw new L(
        'EngineType `client` requires the driverAdapters preview feature to be enabled.',
        t.clientVersion,
        ru
      );
    if (t.adapter) ((this.#r = t.adapter), Rr('Using driver adapter: %O', t.adapter));
    else
      throw new L(
        'Missing configured driver adapter. Engine type `client` requires an active driver adapter. Please check your PrismaClient initialization code.',
        t.clientVersion,
        ru
      );
    ((this.#s = r ?? tu),
      (this.config = t),
      (this.logQueries = t.logQueries ?? !1),
      (this.logLevel = t.logLevel ?? 'error'),
      (this.logEmitter = t.logEmitter),
      (this.datamodel = t.inlineSchema),
      (this.tracingHelper = t.tracingHelper),
      t.enableDebugLogs && (this.logLevel = 'debug'),
      this.logQueries &&
        (this.#i = (n) => {
          this.logEmitter.emit('query', { ...n, params: gr(n.params), target: 'ClientEngine' });
        }));
  }
  applyPendingMigrations() {
    throw new Error('Cannot call applyPendingMigrations on engine type client.');
  }
  async #n() {
    switch (this.#t.type) {
      case 'disconnected': {
        let t = this.tracingHelper.runInChildSpan('connect', async () => {
          let r, n, i;
          try {
            ((r = await this.#r.connect()), (n = this.#a(r)), (i = await this.#l(r)));
          } catch (s) {
            throw ((this.#t = { type: 'disconnected' }), i?.free(), await r?.dispose(), s);
          }
          let o = { driverAdapter: r, transactionManager: n, queryCompiler: i };
          return ((this.#t = { type: 'connected', engine: o }), o);
        });
        return ((this.#t = { type: 'connecting', promise: t }), await t);
      }
      case 'connecting':
        return await this.#t.promise;
      case 'connected':
        return this.#t.engine;
      case 'disconnecting':
        return (await this.#t.promise, await this.#n());
    }
  }
  #a(t) {
    return new Cr({
      driverAdapter: t,
      transactionOptions: {
        ...this.config.transactionOptions,
        isolationLevel: this.#p(this.config.transactionOptions.isolationLevel),
      },
      tracingHelper: this.tracingHelper,
      onQuery: this.#i,
    });
  }
  async #l(t) {
    let r = this.#e;
    r === void 0 && ((r = await this.#s.loadQueryCompiler(this.config)), (this.#e = r));
    let n = t?.getConnectionInfo?.() ?? { supportsRelationJoins: !1 };
    try {
      return this.#c(
        () => new r({ datamodel: this.datamodel, provider: this.#r.provider, connectionInfo: n }),
        void 0,
        !1
      );
    } catch (i) {
      throw this.#m(i);
    }
  }
  #m(t) {
    if (t instanceof ae) return t;
    try {
      let r = JSON.parse(t.message);
      return new L(r.message, this.config.clientVersion, r.error_code);
    } catch {
      return t;
    }
  }
  #o(t, r) {
    if (t instanceof L) return t;
    if (t.code === 'GenericFailure' && t.message?.startsWith('PANIC:'))
      return new ae(nu(this, t.message, r), this.config.clientVersion);
    if (t instanceof ke)
      return new X(t.message, { code: t.code, meta: t.meta, clientVersion: this.config.clientVersion });
    try {
      let n = JSON.parse(t);
      return new oe(
        `${n.message}
${n.backtrace}`,
        { clientVersion: this.config.clientVersion }
      );
    } catch {
      return t;
    }
  }
  #u(t) {
    return t instanceof ae
      ? t
      : typeof t.message == 'string' && typeof t.code == 'string'
        ? new X(t.message, { code: t.code, meta: t.meta, clientVersion: this.config.clientVersion })
        : t;
  }
  #c(t, r, n = !0) {
    let i = iu.PRISMA_WASM_PANIC_REGISTRY.set_message,
      o;
    globalThis.PRISMA_WASM_PANIC_REGISTRY.set_message = (s) => {
      o = s;
    };
    try {
      return t();
    } finally {
      if (((globalThis.PRISMA_WASM_PANIC_REGISTRY.set_message = i), o))
        throw (
          (this.#e = void 0),
          n && this.stop().catch((s) => Rr('failed to disconnect:', s)),
          new ae(nu(this, o, r), this.config.clientVersion)
        );
    }
  }
  onBeforeExit() {
    throw new Error(
      '"beforeExit" hook is not applicable to the client engine, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.'
    );
  }
  async start() {
    await this.#n();
  }
  async stop() {
    switch (this.#t.type) {
      case 'disconnected':
        return;
      case 'connecting':
        return (await this.#t.promise, await this.stop());
      case 'connected': {
        let t = this.#t.engine,
          r = this.tracingHelper.runInChildSpan('disconnect', async () => {
            try {
              (await t.transactionManager.cancelAllTransactions(),
                await t.driverAdapter.dispose(),
                t.queryCompiler.free());
            } finally {
              this.#t = { type: 'disconnected' };
            }
          });
        return ((this.#t = { type: 'disconnecting', promise: r }), await r);
      }
      case 'disconnecting':
        return await this.#t.promise;
    }
  }
  version() {
    return 'unknown';
  }
  async transaction(t, r, n) {
    let i,
      { transactionManager: o } = await this.#n();
    try {
      if (t === 'start') {
        let s = n;
        i = await o.startTransaction({ ...s, isolationLevel: this.#p(s.isolationLevel) });
      } else if (t === 'commit') {
        let s = n;
        await o.commitTransaction(s.id);
      } else if (t === 'rollback') {
        let s = n;
        await o.rollbackTransaction(s.id);
      } else xe(t, 'Invalid transaction action.');
    } catch (s) {
      throw this.#o(s);
    }
    return i ? { id: i.id, payload: void 0 } : void 0;
  }
  async request(t, { interactiveTransaction: r }) {
    Rr('sending request');
    let n = JSON.stringify(t),
      {
        driverAdapter: i,
        transactionManager: o,
        queryCompiler: s,
      } = await this.#n().catch((f) => {
        throw this.#o(f, n);
      }),
      a;
    try {
      a = this.#c(() => s.compile(n), n);
    } catch (f) {
      throw this.#u(f);
    }
    try {
      Rr('query plan created', a);
      let f = r ? o.getTransaction(r, 'query') : i,
        w = r ? { enabled: !1 } : { enabled: !0, manager: o },
        v = {},
        R = await Nt.forSql({
          transactionManager: w,
          placeholderValues: v,
          onQuery: this.#i,
          tracingHelper: this.tracingHelper,
        }).run(a, f);
      return (Rr('query plan executed'), { data: { [t.action]: R } });
    } catch (f) {
      throw this.#o(f, n);
    }
  }
  async requestBatch(t, { transaction: r, traceparent: n }) {
    if (t.length === 0) return [];
    let i = t[0].action,
      o = JSON.stringify(It(t, r)),
      { transactionManager: s, queryCompiler: a } = await this.#n().catch((w) => {
        throw this.#o(w, o);
      }),
      f;
    try {
      f = a.compileBatch(o);
    } catch (w) {
      throw this.#u(w);
    }
    try {
      let w;
      if (r?.kind === 'itx') w = r.options;
      else {
        let D = r?.options.isolationLevel
          ? { ...this.config.transactionOptions, isolationLevel: r.options.isolationLevel }
          : this.config.transactionOptions;
        w = await this.transaction('start', {}, D);
      }
      let v = {},
        A = Nt.forSql({
          transactionManager: { enabled: !1 },
          placeholderValues: v,
          onQuery: this.#i,
          tracingHelper: this.tracingHelper,
        }),
        R = s.getTransaction(w, 'batch query'),
        C = [];
      switch (f.type) {
        case 'multi': {
          C = await Promise.all(
            f.plans.map((D, I) =>
              A.run(D, R).then(
                (_) => ({ data: { [t[I].action]: _ } }),
                (_) => _
              )
            )
          );
          break;
        }
        case 'compacted': {
          if (!t.every((I) => I.action === i)) throw new Error('All queries in a batch must have the same action');
          let D = await A.run(f.plan, R);
          C = this.#d(D, f, i);
          break;
        }
      }
      return (r?.kind !== 'itx' && (await this.transaction('commit', {}, w)), C);
    } catch (w) {
      throw this.#o(w, o);
    }
  }
  metrics(t) {
    throw new Error('Method not implemented.');
  }
  #d(t, r, n) {
    let i = t.map((s) => r.keys.reduce((a, f) => ((a[f] = Ve(s[f])), a), {})),
      o = new Set(r.nestedSelection);
    return r.arguments.map((s) => {
      let a = i.findIndex((f) => fr(f, s));
      if (a === -1)
        return r.expectNonEmpty
          ? new X('An operation failed because it depends on one or more records that were required but not found', {
              code: 'P2025',
              clientVersion: this.config.clientVersion,
            })
          : { data: { [n]: null } };
      {
        let f = Object.entries(t[a]).filter(([w]) => o.has(w));
        return { data: { [n]: Object.fromEntries(f) } };
      }
    });
  }
  #p(t) {
    switch (t) {
      case void 0:
        return;
      case 'ReadUncommitted':
        return 'READ UNCOMMITTED';
      case 'ReadCommitted':
        return 'READ COMMITTED';
      case 'RepeatableRead':
        return 'REPEATABLE READ';
      case 'Serializable':
        return 'SERIALIZABLE';
      case 'Snapshot':
        return 'SNAPSHOT';
      default:
        throw new X(`Inconsistent column data: Conversion failed: Invalid isolation level \`${t}\``, {
          code: 'P2023',
          clientVersion: this.config.clientVersion,
          meta: { providedIsolationLevel: t },
        });
    }
  }
};
function nu(e, t, r) {
  return Ua({
    binaryTarget: void 0,
    title: t,
    version: e.config.clientVersion,
    engineVersion: 'unknown',
    database: e.config.activeProvider,
    query: r,
  });
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
function Ut({ inlineDatasources: e, overrideDatasources: t, env: r, clientVersion: n }) {
  let i,
    o = Object.keys(e)[0],
    s = e[o]?.url,
    a = t[o]?.url;
  if (
    (o === void 0 ? (i = void 0) : a ? (i = a) : s?.value ? (i = s.value) : s?.fromEnvVar && (i = r[s.fromEnvVar]),
    s?.fromEnvVar !== void 0 && i === void 0)
  )
    throw Qe().id === 'workerd'
      ? new L(
          `error: Environment variable not found: ${s.fromEnvVar}.

In Cloudflare module Workers, environment variables are available only in the Worker's \`env\` parameter of \`fetch\`.
To solve this, provide the connection string directly: https://pris.ly/d/cloudflare-datasource-url`,
          n
        )
      : new L(`error: Environment variable not found: ${s.fromEnvVar}.`, n);
  if (i === void 0) throw new L('error: Missing URL environment variable, value, or override.', n);
  return i;
}
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var Gn = class extends Error {
  clientVersion;
  cause;
  constructor(t, r) {
    (super(t), (this.clientVersion = r.clientVersion), (this.cause = r.cause));
  }
  get [Symbol.toStringTag]() {
    return this.name;
  }
};
var de = class extends Gn {
  isRetryable;
  constructor(t, r) {
    (super(t, r), (this.isRetryable = r.isRetryable ?? !0));
  }
};
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
function N(e, t) {
  return { ...e, isRetryable: t };
}
var Ft = class extends de {
  name = 'ForcedRetryError';
  code = 'P5001';
  constructor(t) {
    super('This request must be retried', N(t, !0));
  }
};
O(Ft, 'ForcedRetryError');
u();
c();
p();
m();
d();
l();
var st = class extends de {
  name = 'InvalidDatasourceError';
  code = 'P6001';
  constructor(t, r) {
    super(t, N(r, !1));
  }
};
O(st, 'InvalidDatasourceError');
u();
c();
p();
m();
d();
l();
var at = class extends de {
  name = 'NotImplementedYetError';
  code = 'P5004';
  constructor(t, r) {
    super(t, N(r, !1));
  }
};
O(at, 'NotImplementedYetError');
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var B = class extends de {
  response;
  constructor(t, r) {
    (super(t, r), (this.response = r.response));
    let n = this.response.headers.get('prisma-request-id');
    if (n) {
      let i = `(The request id was: ${n})`;
      this.message = this.message + ' ' + i;
    }
  }
};
var lt = class extends B {
  name = 'SchemaMissingError';
  code = 'P5005';
  constructor(t) {
    super('Schema needs to be uploaded', N(t, !0));
  }
};
O(lt, 'SchemaMissingError');
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var fo = 'This request could not be understood by the server',
  Ir = class extends B {
    name = 'BadRequestError';
    code = 'P5000';
    constructor(t, r, n) {
      (super(r || fo, N(t, !1)), n && (this.code = n));
    }
  };
O(Ir, 'BadRequestError');
u();
c();
p();
m();
d();
l();
var Or = class extends B {
  name = 'HealthcheckTimeoutError';
  code = 'P5013';
  logs;
  constructor(t, r) {
    (super('Engine not started: healthcheck timeout', N(t, !0)), (this.logs = r));
  }
};
O(Or, 'HealthcheckTimeoutError');
u();
c();
p();
m();
d();
l();
var kr = class extends B {
  name = 'EngineStartupError';
  code = 'P5014';
  logs;
  constructor(t, r, n) {
    (super(r, N(t, !0)), (this.logs = n));
  }
};
O(kr, 'EngineStartupError');
u();
c();
p();
m();
d();
l();
var Dr = class extends B {
  name = 'EngineVersionNotSupportedError';
  code = 'P5012';
  constructor(t) {
    super('Engine version is not supported', N(t, !1));
  }
};
O(Dr, 'EngineVersionNotSupportedError');
u();
c();
p();
m();
d();
l();
var go = 'Request timed out',
  _r = class extends B {
    name = 'GatewayTimeoutError';
    code = 'P5009';
    constructor(t, r = go) {
      super(r, N(t, !1));
    }
  };
O(_r, 'GatewayTimeoutError');
u();
c();
p();
m();
d();
l();
var Dd = 'Interactive transaction error',
  Mr = class extends B {
    name = 'InteractiveTransactionError';
    code = 'P5015';
    constructor(t, r = Dd) {
      super(r, N(t, !1));
    }
  };
O(Mr, 'InteractiveTransactionError');
u();
c();
p();
m();
d();
l();
var _d = 'Request parameters are invalid',
  Nr = class extends B {
    name = 'InvalidRequestError';
    code = 'P5011';
    constructor(t, r = _d) {
      super(r, N(t, !1));
    }
  };
O(Nr, 'InvalidRequestError');
u();
c();
p();
m();
d();
l();
var yo = 'Requested resource does not exist',
  Lr = class extends B {
    name = 'NotFoundError';
    code = 'P5003';
    constructor(t, r = yo) {
      super(r, N(t, !1));
    }
  };
O(Lr, 'NotFoundError');
u();
c();
p();
m();
d();
l();
var ho = 'Unknown server error',
  $t = class extends B {
    name = 'ServerError';
    code = 'P5006';
    logs;
    constructor(t, r, n) {
      (super(r || ho, N(t, !0)), (this.logs = n));
    }
  };
O($t, 'ServerError');
u();
c();
p();
m();
d();
l();
var wo = 'Unauthorized, check your connection string',
  Ur = class extends B {
    name = 'UnauthorizedError';
    code = 'P5007';
    constructor(t, r = wo) {
      super(r, N(t, !1));
    }
  };
O(Ur, 'UnauthorizedError');
u();
c();
p();
m();
d();
l();
var bo = 'Usage exceeded, retry again later',
  Fr = class extends B {
    name = 'UsageExceededError';
    code = 'P5008';
    constructor(t, r = bo) {
      super(r, N(t, !0));
    }
  };
O(Fr, 'UsageExceededError');
async function Md(e) {
  let t;
  try {
    t = await e.text();
  } catch {
    return { type: 'EmptyError' };
  }
  try {
    let r = JSON.parse(t);
    if (typeof r == 'string')
      switch (r) {
        case 'InternalDataProxyError':
          return { type: 'DataProxyError', body: r };
        default:
          return { type: 'UnknownTextError', body: r };
      }
    if (typeof r == 'object' && r !== null) {
      if ('is_panic' in r && 'message' in r && 'error_code' in r) return { type: 'QueryEngineError', body: r };
      if ('EngineNotStarted' in r || 'InteractiveTransactionMisrouted' in r || 'InvalidRequestError' in r) {
        let n = Object.values(r)[0].reason;
        return typeof n == 'string' && !['SchemaMissing', 'EngineVersionNotSupported'].includes(n)
          ? { type: 'UnknownJsonError', body: r }
          : { type: 'DataProxyError', body: r };
      }
    }
    return { type: 'UnknownJsonError', body: r };
  } catch {
    return t === '' ? { type: 'EmptyError' } : { type: 'UnknownTextError', body: t };
  }
}
async function $r(e, t) {
  if (e.ok) return;
  let r = { clientVersion: t, response: e },
    n = await Md(e);
  if (n.type === 'QueryEngineError') throw new X(n.body.message, { code: n.body.error_code, clientVersion: t });
  if (n.type === 'DataProxyError') {
    if (n.body === 'InternalDataProxyError') throw new $t(r, 'Internal Data Proxy error');
    if ('EngineNotStarted' in n.body) {
      if (n.body.EngineNotStarted.reason === 'SchemaMissing') return new lt(r);
      if (n.body.EngineNotStarted.reason === 'EngineVersionNotSupported') throw new Dr(r);
      if ('EngineStartupError' in n.body.EngineNotStarted.reason) {
        let { msg: i, logs: o } = n.body.EngineNotStarted.reason.EngineStartupError;
        throw new kr(r, i, o);
      }
      if ('KnownEngineStartupError' in n.body.EngineNotStarted.reason) {
        let { msg: i, error_code: o } = n.body.EngineNotStarted.reason.KnownEngineStartupError;
        throw new L(i, t, o);
      }
      if ('HealthcheckTimeout' in n.body.EngineNotStarted.reason) {
        let { logs: i } = n.body.EngineNotStarted.reason.HealthcheckTimeout;
        throw new Or(r, i);
      }
    }
    if ('InteractiveTransactionMisrouted' in n.body) {
      let i = {
        IDParseError: 'Could not parse interactive transaction ID',
        NoQueryEngineFoundError: 'Could not find Query Engine for the specified host and transaction ID',
        TransactionStartError: 'Could not start interactive transaction',
      };
      throw new Mr(r, i[n.body.InteractiveTransactionMisrouted.reason]);
    }
    if ('InvalidRequestError' in n.body) throw new Nr(r, n.body.InvalidRequestError.reason);
  }
  if (e.status === 401 || e.status === 403) throw new Ur(r, Vt(wo, n));
  if (e.status === 404) return new Lr(r, Vt(yo, n));
  if (e.status === 429) throw new Fr(r, Vt(bo, n));
  if (e.status === 504) throw new _r(r, Vt(go, n));
  if (e.status >= 500) throw new $t(r, Vt(ho, n));
  if (e.status >= 400) throw new Ir(r, Vt(fo, n));
}
function Vt(e, t) {
  return t.type === 'EmptyError' ? e : `${e}: ${JSON.stringify(t)}`;
}
u();
c();
p();
m();
d();
l();
function ou(e) {
  let t = Math.pow(2, e) * 50,
    r = Math.ceil(Math.random() * t) - Math.ceil(t / 2),
    n = t + r;
  return new Promise((i) => setTimeout(() => i(n), n));
}
u();
c();
p();
m();
d();
l();
var Fe = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
function su(e) {
  let t = new TextEncoder().encode(e),
    r = '',
    n = t.byteLength,
    i = n % 3,
    o = n - i,
    s,
    a,
    f,
    w,
    v;
  for (let A = 0; A < o; A = A + 3)
    ((v = (t[A] << 16) | (t[A + 1] << 8) | t[A + 2]),
      (s = (v & 16515072) >> 18),
      (a = (v & 258048) >> 12),
      (f = (v & 4032) >> 6),
      (w = v & 63),
      (r += Fe[s] + Fe[a] + Fe[f] + Fe[w]));
  return (
    i == 1
      ? ((v = t[o]), (s = (v & 252) >> 2), (a = (v & 3) << 4), (r += Fe[s] + Fe[a] + '=='))
      : i == 2 &&
        ((v = (t[o] << 8) | t[o + 1]),
        (s = (v & 64512) >> 10),
        (a = (v & 1008) >> 4),
        (f = (v & 15) << 2),
        (r += Fe[s] + Fe[a] + Fe[f] + '=')),
    r
  );
}
u();
c();
p();
m();
d();
l();
function au(e) {
  if (!!e.generator?.previewFeatures.some((r) => r.toLowerCase().includes('metrics')))
    throw new L(
      'The `metrics` preview feature is not yet available with Accelerate.\nPlease remove `metrics` from the `previewFeatures` in your schema.\n\nMore information about Accelerate: https://pris.ly/d/accelerate',
      e.clientVersion
    );
}
u();
c();
p();
m();
d();
l();
function Nd(e) {
  return e[0] * 1e3 + e[1] / 1e6;
}
function Eo(e) {
  return new Date(Nd(e));
}
u();
c();
p();
m();
d();
l();
var lu = {
  '@prisma/debug': 'workspace:*',
  '@prisma/engines-version': '6.11.1-1.f40f79ec31188888a2e33acda0ecc8fd10a853a9',
  '@prisma/fetch-engine': 'workspace:*',
  '@prisma/get-platform': 'workspace:*',
};
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var Vr = class extends de {
  name = 'RequestError';
  code = 'P5010';
  constructor(t, r) {
    super(
      `Cannot fetch data from service:
${t}`,
      N(r, !0)
    );
  }
};
O(Vr, 'RequestError');
async function ut(e, t, r = (n) => n) {
  let { clientVersion: n, ...i } = t,
    o = r(fetch);
  try {
    return await o(e, i);
  } catch (s) {
    let a = s.message ?? 'Unknown error';
    throw new Vr(a, { clientVersion: n, cause: s });
  }
}
var Ud = /^[1-9][0-9]*\.[0-9]+\.[0-9]+$/,
  uu = J('prisma:client:dataproxyEngine');
async function Fd(e, t) {
  let r = lu['@prisma/engines-version'],
    n = t.clientVersion ?? 'unknown';
  if (g.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION || globalThis.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION)
    return g.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION || globalThis.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;
  if (e.includes('accelerate') && n !== '0.0.0' && n !== 'in-memory') return n;
  let [i, o] = n?.split('-') ?? [];
  if (o === void 0 && Ud.test(i)) return i;
  if (o !== void 0 || n === '0.0.0' || n === 'in-memory') {
    let [s] = r.split('-') ?? [],
      [a, f, w] = s.split('.'),
      v = $d(`<=${a}.${f}.${w}`),
      A = await ut(v, { clientVersion: n });
    if (!A.ok)
      throw new Error(
        `Failed to fetch stable Prisma version, unpkg.com status ${A.status} ${A.statusText}, response body: ${(await A.text()) || '<empty body>'}`
      );
    let R = await A.text();
    uu('length of body fetched from unpkg.com', R.length);
    let C;
    try {
      C = JSON.parse(R);
    } catch (D) {
      throw (console.error('JSON.parse error: body fetched from unpkg.com: ', R), D);
    }
    return C.version;
  }
  throw new at('Only `major.minor.patch` versions are supported by Accelerate.', { clientVersion: n });
}
async function cu(e, t) {
  let r = await Fd(e, t);
  return (uu('version', r), r);
}
function $d(e) {
  return encodeURI(`https://unpkg.com/prisma@${e}/package.json`);
}
var pu = 3,
  qr = J('prisma:client:dataproxyEngine'),
  xo = class {
    apiKey;
    tracingHelper;
    logLevel;
    logQueries;
    engineHash;
    constructor({ apiKey: t, tracingHelper: r, logLevel: n, logQueries: i, engineHash: o }) {
      ((this.apiKey = t), (this.tracingHelper = r), (this.logLevel = n), (this.logQueries = i), (this.engineHash = o));
    }
    build({ traceparent: t, interactiveTransaction: r } = {}) {
      let n = { Authorization: `Bearer ${this.apiKey}`, 'Prisma-Engine-Hash': this.engineHash };
      (this.tracingHelper.isEnabled() && (n.traceparent = t ?? this.tracingHelper.getTraceParent()),
        r && (n['X-transaction-id'] = r.id));
      let i = this.buildCaptureSettings();
      return (i.length > 0 && (n['X-capture-telemetry'] = i.join(', ')), n);
    }
    buildCaptureSettings() {
      let t = [];
      return (
        this.tracingHelper.isEnabled() && t.push('tracing'),
        this.logLevel && t.push(this.logLevel),
        this.logQueries && t.push('query'),
        t
      );
    }
  },
  Br = class {
    name = 'DataProxyEngine';
    inlineSchema;
    inlineSchemaHash;
    inlineDatasources;
    config;
    logEmitter;
    env;
    clientVersion;
    engineHash;
    tracingHelper;
    remoteClientVersion;
    host;
    headerBuilder;
    startPromise;
    protocol;
    constructor(t) {
      (au(t),
        (this.config = t),
        (this.env = { ...t.env, ...(typeof g < 'u' ? g.env : {}) }),
        (this.inlineSchema = su(t.inlineSchema)),
        (this.inlineDatasources = t.inlineDatasources),
        (this.inlineSchemaHash = t.inlineSchemaHash),
        (this.clientVersion = t.clientVersion),
        (this.engineHash = t.engineVersion),
        (this.logEmitter = t.logEmitter),
        (this.tracingHelper = t.tracingHelper));
    }
    apiKey() {
      return this.headerBuilder.apiKey;
    }
    version() {
      return this.engineHash;
    }
    async start() {
      (this.startPromise !== void 0 && (await this.startPromise),
        (this.startPromise = (async () => {
          let { apiKey: t, url: r } = this.getURLAndAPIKey();
          ((this.host = r.host),
            (this.headerBuilder = new xo({
              apiKey: t,
              tracingHelper: this.tracingHelper,
              logLevel: this.config.logLevel,
              logQueries: this.config.logQueries,
              engineHash: this.engineHash,
            })),
            (this.protocol = ci(r) ? 'http' : 'https'),
            (this.remoteClientVersion = await cu(this.host, this.config)),
            qr('host', this.host),
            qr('protocol', this.protocol));
        })()),
        await this.startPromise);
    }
    async stop() {}
    propagateResponseExtensions(t) {
      (t?.logs?.length &&
        t.logs.forEach((r) => {
          switch (r.level) {
            case 'debug':
            case 'trace':
              qr(r);
              break;
            case 'error':
            case 'warn':
            case 'info': {
              this.logEmitter.emit(r.level, {
                timestamp: Eo(r.timestamp),
                message: r.attributes.message ?? '',
                target: r.target,
              });
              break;
            }
            case 'query': {
              this.logEmitter.emit('query', {
                query: r.attributes.query ?? '',
                timestamp: Eo(r.timestamp),
                duration: r.attributes.duration_ms ?? 0,
                params: r.attributes.params ?? '',
                target: r.target,
              });
              break;
            }
            default:
              r.level;
          }
        }),
        t?.traces?.length && this.tracingHelper.dispatchEngineSpans(t.traces));
    }
    onBeforeExit() {
      throw new Error('"beforeExit" hook is not applicable to the remote query engine');
    }
    async url(t) {
      return (
        await this.start(),
        `${this.protocol}://${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${t}`
      );
    }
    async uploadSchema() {
      let t = { name: 'schemaUpload', internal: !0 };
      return this.tracingHelper.runInChildSpan(t, async () => {
        let r = await ut(await this.url('schema'), {
          method: 'PUT',
          headers: this.headerBuilder.build(),
          body: this.inlineSchema,
          clientVersion: this.clientVersion,
        });
        r.ok || qr('schema response status', r.status);
        let n = await $r(r, this.clientVersion);
        if (n)
          throw (
            this.logEmitter.emit('warn', {
              message: `Error while uploading schema: ${n.message}`,
              timestamp: new Date(),
              target: '',
            }),
            n
          );
        this.logEmitter.emit('info', {
          message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`,
          timestamp: new Date(),
          target: '',
        });
      });
    }
    request(t, { traceparent: r, interactiveTransaction: n, customDataProxyFetch: i }) {
      return this.requestInternal({ body: t, traceparent: r, interactiveTransaction: n, customDataProxyFetch: i });
    }
    async requestBatch(t, { traceparent: r, transaction: n, customDataProxyFetch: i }) {
      let o = n?.kind === 'itx' ? n.options : void 0,
        s = It(t, n);
      return (
        await this.requestInternal({ body: s, customDataProxyFetch: i, interactiveTransaction: o, traceparent: r })
      ).map(
        (f) => (
          f.extensions && this.propagateResponseExtensions(f.extensions),
          'errors' in f ? this.convertProtocolErrorsToClientError(f.errors) : f
        )
      );
    }
    requestInternal({ body: t, traceparent: r, customDataProxyFetch: n, interactiveTransaction: i }) {
      return this.withRetry({
        actionGerund: 'querying',
        callback: async ({ logHttpCall: o }) => {
          let s = i ? `${i.payload.endpoint}/graphql` : await this.url('graphql');
          o(s);
          let a = await ut(
            s,
            {
              method: 'POST',
              headers: this.headerBuilder.build({ traceparent: r, interactiveTransaction: i }),
              body: JSON.stringify(t),
              clientVersion: this.clientVersion,
            },
            n
          );
          (a.ok || qr('graphql response status', a.status), await this.handleError(await $r(a, this.clientVersion)));
          let f = await a.json();
          if ((f.extensions && this.propagateResponseExtensions(f.extensions), 'errors' in f))
            throw this.convertProtocolErrorsToClientError(f.errors);
          return 'batchResult' in f ? f.batchResult : f;
        },
      });
    }
    async transaction(t, r, n) {
      let i = { start: 'starting', commit: 'committing', rollback: 'rolling back' };
      return this.withRetry({
        actionGerund: `${i[t]} transaction`,
        callback: async ({ logHttpCall: o }) => {
          if (t === 'start') {
            let s = JSON.stringify({ max_wait: n.maxWait, timeout: n.timeout, isolation_level: n.isolationLevel }),
              a = await this.url('transaction/start');
            o(a);
            let f = await ut(a, {
              method: 'POST',
              headers: this.headerBuilder.build({ traceparent: r.traceparent }),
              body: s,
              clientVersion: this.clientVersion,
            });
            await this.handleError(await $r(f, this.clientVersion));
            let w = await f.json(),
              { extensions: v } = w;
            v && this.propagateResponseExtensions(v);
            let A = w.id,
              R = w['data-proxy'].endpoint;
            return { id: A, payload: { endpoint: R } };
          } else {
            let s = `${n.payload.endpoint}/${t}`;
            o(s);
            let a = await ut(s, {
              method: 'POST',
              headers: this.headerBuilder.build({ traceparent: r.traceparent }),
              clientVersion: this.clientVersion,
            });
            await this.handleError(await $r(a, this.clientVersion));
            let f = await a.json(),
              { extensions: w } = f;
            w && this.propagateResponseExtensions(w);
            return;
          }
        },
      });
    }
    getURLAndAPIKey() {
      let t = { clientVersion: this.clientVersion },
        r = Object.keys(this.inlineDatasources)[0],
        n = Ut({
          inlineDatasources: this.inlineDatasources,
          overrideDatasources: this.config.overrideDatasources,
          clientVersion: this.clientVersion,
          env: this.env,
        }),
        i;
      try {
        i = new URL(n);
      } catch {
        throw new st(`Error validating datasource \`${r}\`: the URL must start with the protocol \`prisma://\``, t);
      }
      let { protocol: o, searchParams: s } = i;
      if (o !== 'prisma:' && o !== tn)
        throw new st(
          `Error validating datasource \`${r}\`: the URL must start with the protocol \`prisma://\` or \`prisma+postgres://\``,
          t
        );
      let a = s.get('api_key');
      if (a === null || a.length < 1)
        throw new st(`Error validating datasource \`${r}\`: the URL must contain a valid API key`, t);
      return { apiKey: a, url: i };
    }
    metrics() {
      throw new at('Metrics are not yet supported for Accelerate', { clientVersion: this.clientVersion });
    }
    async withRetry(t) {
      for (let r = 0; ; r++) {
        let n = (i) => {
          this.logEmitter.emit('info', { message: `Calling ${i} (n=${r})`, timestamp: new Date(), target: '' });
        };
        try {
          return await t.callback({ logHttpCall: n });
        } catch (i) {
          if (!(i instanceof de) || !i.isRetryable) throw i;
          if (r >= pu) throw i instanceof Ft ? i.cause : i;
          this.logEmitter.emit('warn', {
            message: `Attempt ${r + 1}/${pu} failed for ${t.actionGerund}: ${i.message ?? '(unknown)'}`,
            timestamp: new Date(),
            target: '',
          });
          let o = await ou(r);
          this.logEmitter.emit('warn', { message: `Retrying after ${o}ms`, timestamp: new Date(), target: '' });
        }
      }
    }
    async handleError(t) {
      if (t instanceof lt) throw (await this.uploadSchema(), new Ft({ clientVersion: this.clientVersion, cause: t }));
      if (t) throw t;
    }
    convertProtocolErrorsToClientError(t) {
      return t.length === 1
        ? Cn(t[0], this.config.clientVersion, this.config.activeProvider)
        : new oe(JSON.stringify(t), { clientVersion: this.config.clientVersion });
    }
    applyPendingMigrations() {
      throw new Error('Method not implemented.');
    }
  };
u();
c();
p();
m();
d();
l();
function mu({ url: e, adapter: t, copyEngine: r, targetBuildType: n }) {
  let i = [],
    o = [],
    s = (I) => {
      i.push({ _tag: 'warning', value: I });
    },
    a = (I) => {
      let _ = I.join(`
`);
      o.push({ _tag: 'error', value: _ });
    },
    f = !!e?.startsWith('prisma://'),
    w = rn(e),
    v = !!t,
    A = f || w;
  !v &&
    r &&
    A &&
    s([
      'recommend--no-engine',
      'In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)',
    ]);
  let R = A || !r;
  v &&
    (R || n === 'edge') &&
    (n === 'edge'
      ? a([
          'Prisma Client was configured to use the `adapter` option but it was imported via its `/edge` endpoint.',
          'Please either remove the `/edge` endpoint or remove the `adapter` from the Prisma Client constructor.',
        ])
      : r
        ? f &&
          a([
            'Prisma Client was configured to use the `adapter` option but the URL was a `prisma://` URL.',
            'Please either use the `prisma://` URL or remove the `adapter` from the Prisma Client constructor.',
          ])
        : a([
            'Prisma Client was configured to use the `adapter` option but `prisma generate` was run with `--no-engine`.',
            'Please run `prisma generate` without `--no-engine` to be able to use Prisma Client with the adapter.',
          ]));
  let C = { accelerate: R, ppg: w, driverAdapters: v };
  function D(I) {
    return I.length > 0;
  }
  return D(o)
    ? { ok: !1, diagnostics: { warnings: i, errors: o }, isUsing: C }
    : { ok: !0, diagnostics: { warnings: i }, isUsing: C };
}
function du({ copyEngine: e = !0 }, t) {
  let r;
  try {
    r = Ut({
      inlineDatasources: t.inlineDatasources,
      overrideDatasources: t.overrideDatasources,
      env: { ...t.env, ...g.env },
      clientVersion: t.clientVersion,
    });
  } catch {}
  let {
    ok: n,
    isUsing: i,
    diagnostics: o,
  } = mu({ url: r, adapter: t.adapter, copyEngine: e, targetBuildType: 'wasm-compiler-edge' });
  for (let v of o.warnings) zt(...v.value);
  if (!n) {
    let v = o.errors[0];
    throw new ne(v.value, { clientVersion: t.clientVersion });
  }
  let s = gt(t.generator),
    a = s === 'library',
    f = s === 'binary',
    w = s === 'client';
  if (i.accelerate) return new Br(t);
  if ((i.driverAdapters, i.accelerate, w)) return new Sr(t);
  {
    let v = [
      `PrismaClient failed to initialize because it wasn't configured to run in this environment (${Qe().prettyName}).`,
      'In order to run Prisma Client in an edge runtime, you will need to configure one of the following options:',
      '- Enable Driver Adapters: https://pris.ly/d/driver-adapters',
      '- Enable Accelerate: https://pris.ly/d/accelerate',
    ];
    throw new ne(
      v.join(`
`),
      { clientVersion: t.clientVersion }
    );
  }
  return 'wasm-compiler-edge';
}
u();
c();
p();
m();
d();
l();
function Hn({ generator: e }) {
  return e?.previewFeatures ?? [];
}
u();
c();
p();
m();
d();
l();
var fu = (e) => ({ command: e });
u();
c();
p();
m();
d();
l();
u();
c();
p();
m();
d();
l();
var gu = (e) => e.strings.reduce((t, r, n) => `${t}@P${n}${r}`);
u();
c();
p();
m();
d();
l();
l();
function qt(e) {
  try {
    return yu(e, 'fast');
  } catch {
    return yu(e, 'slow');
  }
}
function yu(e, t) {
  return JSON.stringify(e.map((r) => wu(r, t)));
}
function wu(e, t) {
  if (Array.isArray(e)) return e.map((r) => wu(r, t));
  if (typeof e == 'bigint') return { prisma__type: 'bigint', prisma__value: e.toString() };
  if (wt(e)) return { prisma__type: 'date', prisma__value: e.toJSON() };
  if (re.isDecimal(e)) return { prisma__type: 'decimal', prisma__value: e.toJSON() };
  if (y.isBuffer(e)) return { prisma__type: 'bytes', prisma__value: e.toString('base64') };
  if (Vd(e)) return { prisma__type: 'bytes', prisma__value: y.from(e).toString('base64') };
  if (ArrayBuffer.isView(e)) {
    let { buffer: r, byteOffset: n, byteLength: i } = e;
    return { prisma__type: 'bytes', prisma__value: y.from(r, n, i).toString('base64') };
  }
  return typeof e == 'object' && t === 'slow' ? bu(e) : e;
}
function Vd(e) {
  return e instanceof ArrayBuffer || e instanceof SharedArrayBuffer
    ? !0
    : typeof e == 'object' && e !== null
      ? e[Symbol.toStringTag] === 'ArrayBuffer' || e[Symbol.toStringTag] === 'SharedArrayBuffer'
      : !1;
}
function bu(e) {
  if (typeof e != 'object' || e === null) return e;
  if (typeof e.toJSON == 'function') return e.toJSON();
  if (Array.isArray(e)) return e.map(hu);
  let t = {};
  for (let r of Object.keys(e)) t[r] = hu(e[r]);
  return t;
}
function hu(e) {
  return typeof e == 'bigint' ? e.toString() : bu(e);
}
var qd = /^(\s*alter\s)/i,
  Eu = J('prisma:client');
function Po(e, t, r, n) {
  if (!(e !== 'postgresql' && e !== 'cockroachdb') && r.length > 0 && qd.exec(t))
    throw new Error(`Running ALTER using ${n} is not supported
Using the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.

Example:
  await prisma.$executeRawUnsafe(\`ALTER USER prisma WITH PASSWORD '\${password}'\`)

More Information: https://pris.ly/d/execute-raw
`);
}
var To =
    ({ clientMethod: e, activeProvider: t }) =>
    (r) => {
      let n = '',
        i;
      if (Pn(r)) ((n = r.sql), (i = { values: qt(r.values), __prismaRawParameters__: !0 }));
      else if (Array.isArray(r)) {
        let [o, ...s] = r;
        ((n = o), (i = { values: qt(s || []), __prismaRawParameters__: !0 }));
      } else
        switch (t) {
          case 'sqlite':
          case 'mysql': {
            ((n = r.sql), (i = { values: qt(r.values), __prismaRawParameters__: !0 }));
            break;
          }
          case 'cockroachdb':
          case 'postgresql':
          case 'postgres': {
            ((n = r.text), (i = { values: qt(r.values), __prismaRawParameters__: !0 }));
            break;
          }
          case 'sqlserver': {
            ((n = gu(r)), (i = { values: qt(r.values), __prismaRawParameters__: !0 }));
            break;
          }
          default:
            throw new Error(`The ${t} provider does not support ${e}`);
        }
      return (i?.values ? Eu(`prisma.${e}(${n}, ${i.values})`) : Eu(`prisma.${e}(${n})`), { query: n, parameters: i });
    },
  xu = {
    requestArgsToMiddlewareArgs(e) {
      return [e.strings, ...e.values];
    },
    middlewareArgsToRequestArgs(e) {
      let [t, ...r] = e;
      return new me(t, r);
    },
  },
  Pu = {
    requestArgsToMiddlewareArgs(e) {
      return [e];
    },
    middlewareArgsToRequestArgs(e) {
      return e[0];
    },
  };
u();
c();
p();
m();
d();
l();
function vo(e) {
  return function (r, n) {
    let i,
      o = (s = e) => {
        try {
          return s === void 0 || s?.kind === 'itx' ? (i ??= Tu(r(s))) : Tu(r(s));
        } catch (a) {
          return Promise.reject(a);
        }
      };
    return {
      get spec() {
        return n;
      },
      then(s, a) {
        return o().then(s, a);
      },
      catch(s) {
        return o().catch(s);
      },
      finally(s) {
        return o().finally(s);
      },
      requestTransaction(s) {
        let a = o(s);
        return a.requestTransaction ? a.requestTransaction(s) : a;
      },
      [Symbol.toStringTag]: 'PrismaPromise',
    };
  };
}
function Tu(e) {
  return typeof e.then == 'function' ? e : Promise.resolve(e);
}
u();
c();
p();
m();
d();
l();
var Bd = li.split('.')[0],
  jd = {
    isEnabled() {
      return !1;
    },
    getTraceParent() {
      return '00-10-10-00';
    },
    dispatchEngineSpans() {},
    getActiveContext() {},
    runInChildSpan(e, t) {
      return t();
    },
  },
  Ao = class {
    isEnabled() {
      return this.getGlobalTracingHelper().isEnabled();
    }
    getTraceParent(t) {
      return this.getGlobalTracingHelper().getTraceParent(t);
    }
    dispatchEngineSpans(t) {
      return this.getGlobalTracingHelper().dispatchEngineSpans(t);
    }
    getActiveContext() {
      return this.getGlobalTracingHelper().getActiveContext();
    }
    runInChildSpan(t, r) {
      return this.getGlobalTracingHelper().runInChildSpan(t, r);
    }
    getGlobalTracingHelper() {
      let t = globalThis[`V${Bd}_PRISMA_INSTRUMENTATION`],
        r = globalThis.PRISMA_INSTRUMENTATION;
      return t?.helper ?? r?.helper ?? jd;
    }
  };
function vu() {
  return new Ao();
}
u();
c();
p();
m();
d();
l();
function Au(e, t = () => {}) {
  let r,
    n = new Promise((i) => (r = i));
  return {
    then(i) {
      return (--e === 0 && r(t()), i?.(n));
    },
  };
}
u();
c();
p();
m();
d();
l();
function Cu(e) {
  return typeof e == 'string'
    ? e
    : e.reduce(
        (t, r) => {
          let n = typeof r == 'string' ? r : r.level;
          return n === 'query' ? t : t && (r === 'info' || t === 'info') ? 'info' : n;
        },
        void 0
      );
}
u();
c();
p();
m();
d();
l();
var Wn = class {
  _middlewares = [];
  use(t) {
    this._middlewares.push(t);
  }
  get(t) {
    return this._middlewares[t];
  }
  has(t) {
    return !!this._middlewares[t];
  }
  length() {
    return this._middlewares.length;
  }
};
u();
c();
p();
m();
d();
l();
var Su = _e(mi());
u();
c();
p();
m();
d();
l();
function Jn(e) {
  return typeof e.batchRequestIdx == 'number';
}
u();
c();
p();
m();
d();
l();
function Ru(e) {
  if (e.action !== 'findUnique' && e.action !== 'findUniqueOrThrow') return;
  let t = [];
  return (
    e.modelName && t.push(e.modelName),
    e.query.arguments && t.push(Co(e.query.arguments)),
    t.push(Co(e.query.selection)),
    t.join('')
  );
}
function Co(e) {
  return `(${Object.keys(e)
    .sort()
    .map((r) => {
      let n = e[r];
      return typeof n == 'object' && n !== null ? `(${r} ${Co(n)})` : r;
    })
    .join(' ')})`;
}
u();
c();
p();
m();
d();
l();
var Qd = {
  aggregate: !1,
  aggregateRaw: !1,
  createMany: !0,
  createManyAndReturn: !0,
  createOne: !0,
  deleteMany: !0,
  deleteOne: !0,
  executeRaw: !0,
  findFirst: !1,
  findFirstOrThrow: !1,
  findMany: !1,
  findRaw: !1,
  findUnique: !1,
  findUniqueOrThrow: !1,
  groupBy: !1,
  queryRaw: !1,
  runCommandRaw: !0,
  updateMany: !0,
  updateManyAndReturn: !0,
  updateOne: !0,
  upsertOne: !0,
};
function Ro(e) {
  return Qd[e];
}
u();
c();
p();
m();
d();
l();
var Kn = class {
  constructor(t) {
    this.options = t;
    this.batches = {};
  }
  batches;
  tickActive = !1;
  request(t) {
    let r = this.options.batchBy(t);
    return r
      ? (this.batches[r] ||
          ((this.batches[r] = []),
          this.tickActive ||
            ((this.tickActive = !0),
            g.nextTick(() => {
              (this.dispatchBatches(), (this.tickActive = !1));
            }))),
        new Promise((n, i) => {
          this.batches[r].push({ request: t, resolve: n, reject: i });
        }))
      : this.options.singleLoader(t);
  }
  dispatchBatches() {
    for (let t in this.batches) {
      let r = this.batches[t];
      (delete this.batches[t],
        r.length === 1
          ? this.options
              .singleLoader(r[0].request)
              .then((n) => {
                n instanceof Error ? r[0].reject(n) : r[0].resolve(n);
              })
              .catch((n) => {
                r[0].reject(n);
              })
          : (r.sort((n, i) => this.options.batchOrder(n.request, i.request)),
            this.options
              .batchLoader(r.map((n) => n.request))
              .then((n) => {
                if (n instanceof Error) for (let i = 0; i < r.length; i++) r[i].reject(n);
                else
                  for (let i = 0; i < r.length; i++) {
                    let o = n[i];
                    o instanceof Error ? r[i].reject(o) : r[i].resolve(o);
                  }
              })
              .catch((n) => {
                for (let i = 0; i < r.length; i++) r[i].reject(n);
              })));
    }
  }
  get [Symbol.toStringTag]() {
    return 'DataLoader';
  }
};
u();
c();
p();
m();
d();
l();
l();
function ct(e, t) {
  if (t === null) return t;
  switch (e) {
    case 'bigint':
      return BigInt(t);
    case 'bytes': {
      let { buffer: r, byteOffset: n, byteLength: i } = y.from(t, 'base64');
      return new Uint8Array(r, n, i);
    }
    case 'decimal':
      return new re(t);
    case 'datetime':
    case 'date':
      return new Date(t);
    case 'time':
      return new Date(`1970-01-01T${t}Z`);
    case 'bigint-array':
      return t.map((r) => ct('bigint', r));
    case 'bytes-array':
      return t.map((r) => ct('bytes', r));
    case 'decimal-array':
      return t.map((r) => ct('decimal', r));
    case 'datetime-array':
      return t.map((r) => ct('datetime', r));
    case 'date-array':
      return t.map((r) => ct('date', r));
    case 'time-array':
      return t.map((r) => ct('time', r));
    default:
      return t;
  }
}
function zn(e) {
  let t = [],
    r = Gd(e);
  for (let n = 0; n < e.rows.length; n++) {
    let i = e.rows[n],
      o = { ...r };
    for (let s = 0; s < i.length; s++) o[e.columns[s]] = ct(e.types[s], i[s]);
    t.push(o);
  }
  return t;
}
function Gd(e) {
  let t = {};
  for (let r = 0; r < e.columns.length; r++) t[e.columns[r]] = null;
  return t;
}
var Hd = J('prisma:client:request_handler'),
  Yn = class {
    client;
    dataloader;
    logEmitter;
    constructor(t, r) {
      ((this.logEmitter = r),
        (this.client = t),
        (this.dataloader = new Kn({
          batchLoader: Ca(async ({ requests: n, customDataProxyFetch: i }) => {
            let { transaction: o, otelParentCtx: s } = n[0],
              a = n.map((A) => A.protocolQuery),
              f = this.client._tracingHelper.getTraceParent(s),
              w = n.some((A) => Ro(A.protocolQuery.action));
            return (
              await this.client._engine.requestBatch(a, {
                traceparent: f,
                transaction: Wd(o),
                containsWrite: w,
                customDataProxyFetch: i,
              })
            ).map((A, R) => {
              if (A instanceof Error) return A;
              try {
                return this.mapQueryEngineResult(n[R], A);
              } catch (C) {
                return C;
              }
            });
          }),
          singleLoader: async (n) => {
            let i = n.transaction?.kind === 'itx' ? Iu(n.transaction) : void 0,
              o = await this.client._engine.request(n.protocolQuery, {
                traceparent: this.client._tracingHelper.getTraceParent(),
                interactiveTransaction: i,
                isWrite: Ro(n.protocolQuery.action),
                customDataProxyFetch: n.customDataProxyFetch,
              });
            return this.mapQueryEngineResult(n, o);
          },
          batchBy: (n) => (n.transaction?.id ? `transaction-${n.transaction.id}` : Ru(n.protocolQuery)),
          batchOrder(n, i) {
            return n.transaction?.kind === 'batch' && i.transaction?.kind === 'batch'
              ? n.transaction.index - i.transaction.index
              : 0;
          },
        })));
    }
    async request(t) {
      try {
        return await this.dataloader.request(t);
      } catch (r) {
        let { clientMethod: n, callsite: i, transaction: o, args: s, modelName: a } = t;
        this.handleAndLogRequestError({
          error: r,
          clientMethod: n,
          callsite: i,
          transaction: o,
          args: s,
          modelName: a,
          globalOmit: t.globalOmit,
        });
      }
    }
    mapQueryEngineResult({ dataPath: t, unpacker: r }, n) {
      let i = n?.data,
        o = this.unpack(i, t, r);
      return g.env.PRISMA_CLIENT_GET_TIME ? { data: o } : o;
    }
    handleAndLogRequestError(t) {
      try {
        this.handleRequestError(t);
      } catch (r) {
        throw (
          this.logEmitter &&
            this.logEmitter.emit('error', { message: r.message, target: t.clientMethod, timestamp: new Date() }),
          r
        );
      }
    }
    handleRequestError({
      error: t,
      clientMethod: r,
      callsite: n,
      transaction: i,
      args: o,
      modelName: s,
      globalOmit: a,
    }) {
      if ((Hd(t), Jd(t, i))) throw t;
      if (t instanceof X && Kd(t)) {
        let w = Ou(t.meta);
        yn({
          args: o,
          errors: [w],
          callsite: n,
          errorFormat: this.client._errorFormat,
          originalMethod: r,
          clientVersion: this.client._clientVersion,
          globalOmit: a,
        });
      }
      let f = t.message;
      if (
        (n &&
          (f = sn({
            callsite: n,
            originalMethod: r,
            isPanic: t.isPanic,
            showColors: this.client._errorFormat === 'pretty',
            message: f,
          })),
        (f = this.sanitizeMessage(f)),
        t.code)
      ) {
        let w = s ? { modelName: s, ...t.meta } : t.meta;
        throw new X(f, {
          code: t.code,
          clientVersion: this.client._clientVersion,
          meta: w,
          batchRequestIdx: t.batchRequestIdx,
        });
      } else {
        if (t.isPanic) throw new ae(f, this.client._clientVersion);
        if (t instanceof oe)
          throw new oe(f, { clientVersion: this.client._clientVersion, batchRequestIdx: t.batchRequestIdx });
        if (t instanceof L) throw new L(f, this.client._clientVersion);
        if (t instanceof ae) throw new ae(f, this.client._clientVersion);
      }
      throw ((t.clientVersion = this.client._clientVersion), t);
    }
    sanitizeMessage(t) {
      return this.client._errorFormat && this.client._errorFormat !== 'pretty' ? (0, Su.default)(t) : t;
    }
    unpack(t, r, n) {
      if (!t || (t.data && (t = t.data), !t)) return t;
      let i = Object.keys(t)[0],
        o = Object.values(t)[0],
        s = r.filter((w) => w !== 'select' && w !== 'include'),
        a = Si(o, s),
        f = i === 'queryRaw' ? zn(a) : Ve(a);
      return n ? n(f) : f;
    }
    get [Symbol.toStringTag]() {
      return 'RequestHandler';
    }
  };
function Wd(e) {
  if (e) {
    if (e.kind === 'batch') return { kind: 'batch', options: { isolationLevel: e.isolationLevel } };
    if (e.kind === 'itx') return { kind: 'itx', options: Iu(e) };
    xe(e, 'Unknown transaction kind');
  }
}
function Iu(e) {
  return { id: e.id, payload: e.payload };
}
function Jd(e, t) {
  return Jn(e) && t?.kind === 'batch' && e.batchRequestIdx !== t.index;
}
function Kd(e) {
  return e.code === 'P2009' || e.code === 'P2012';
}
function Ou(e) {
  if (e.kind === 'Union') return { kind: 'Union', errors: e.errors.map(Ou) };
  if (Array.isArray(e.selectionPath)) {
    let [, ...t] = e.selectionPath;
    return { ...e, selectionPath: t };
  }
  return e;
}
u();
c();
p();
m();
d();
l();
var ku = Qn;
u();
c();
p();
m();
d();
l();
var Lu = _e(yi());
u();
c();
p();
m();
d();
l();
var F = class extends Error {
  constructor(t) {
    (super(
      t +
        `
Read more at https://pris.ly/d/client-constructor`
    ),
      (this.name = 'PrismaClientConstructorValidationError'));
  }
  get [Symbol.toStringTag]() {
    return 'PrismaClientConstructorValidationError';
  }
};
O(F, 'PrismaClientConstructorValidationError');
var Du = ['datasources', 'datasourceUrl', 'errorFormat', 'adapter', 'log', 'transactionOptions', 'omit', '__internal'],
  _u = ['pretty', 'colorless', 'minimal'],
  Mu = ['info', 'query', 'warn', 'error'],
  zd = {
    datasources: (e, { datasourceNames: t }) => {
      if (e) {
        if (typeof e != 'object' || Array.isArray(e))
          throw new F(`Invalid value ${JSON.stringify(e)} for "datasources" provided to PrismaClient constructor`);
        for (let [r, n] of Object.entries(e)) {
          if (!t.includes(r)) {
            let i = Bt(r, t) || ` Available datasources: ${t.join(', ')}`;
            throw new F(`Unknown datasource ${r} provided to PrismaClient constructor.${i}`);
          }
          if (typeof n != 'object' || Array.isArray(n))
            throw new F(`Invalid value ${JSON.stringify(e)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
          if (n && typeof n == 'object')
            for (let [i, o] of Object.entries(n)) {
              if (i !== 'url')
                throw new F(`Invalid value ${JSON.stringify(e)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
              if (typeof o != 'string')
                throw new F(`Invalid value ${JSON.stringify(o)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
            }
        }
      }
    },
    adapter: (e, t) => {
      if (!e && gt(t.generator) === 'client')
        throw new F('Using engine type "client" requires a driver adapter to be provided to PrismaClient constructor.');
      if (e === null) return;
      if (e === void 0)
        throw new F('"adapter" property must not be undefined, use null to conditionally disable driver adapters.');
      if (!Hn(t).includes('driverAdapters'))
        throw new F(
          '"adapter" property can only be provided to PrismaClient constructor when "driverAdapters" preview feature is enabled.'
        );
      if (gt(t.generator) === 'binary')
        throw new F(
          'Cannot use a driver adapter with the "binary" Query Engine. Please use the "library" Query Engine.'
        );
    },
    datasourceUrl: (e) => {
      if (typeof e < 'u' && typeof e != 'string')
        throw new F(`Invalid value ${JSON.stringify(e)} for "datasourceUrl" provided to PrismaClient constructor.
Expected string or undefined.`);
    },
    errorFormat: (e) => {
      if (e) {
        if (typeof e != 'string')
          throw new F(`Invalid value ${JSON.stringify(e)} for "errorFormat" provided to PrismaClient constructor.`);
        if (!_u.includes(e)) {
          let t = Bt(e, _u);
          throw new F(`Invalid errorFormat ${e} provided to PrismaClient constructor.${t}`);
        }
      }
    },
    log: (e) => {
      if (!e) return;
      if (!Array.isArray(e))
        throw new F(`Invalid value ${JSON.stringify(e)} for "log" provided to PrismaClient constructor.`);
      function t(r) {
        if (typeof r == 'string' && !Mu.includes(r)) {
          let n = Bt(r, Mu);
          throw new F(`Invalid log level "${r}" provided to PrismaClient constructor.${n}`);
        }
      }
      for (let r of e) {
        t(r);
        let n = {
          level: t,
          emit: (i) => {
            let o = ['stdout', 'event'];
            if (!o.includes(i)) {
              let s = Bt(i, o);
              throw new F(
                `Invalid value ${JSON.stringify(i)} for "emit" in logLevel provided to PrismaClient constructor.${s}`
              );
            }
          },
        };
        if (r && typeof r == 'object')
          for (let [i, o] of Object.entries(r))
            if (n[i]) n[i](o);
            else throw new F(`Invalid property ${i} for "log" provided to PrismaClient constructor`);
      }
    },
    transactionOptions: (e) => {
      if (!e) return;
      let t = e.maxWait;
      if (t != null && t <= 0)
        throw new F(
          `Invalid value ${t} for maxWait in "transactionOptions" provided to PrismaClient constructor. maxWait needs to be greater than 0`
        );
      let r = e.timeout;
      if (r != null && r <= 0)
        throw new F(
          `Invalid value ${r} for timeout in "transactionOptions" provided to PrismaClient constructor. timeout needs to be greater than 0`
        );
    },
    omit: (e, t) => {
      if (typeof e != 'object') throw new F('"omit" option is expected to be an object.');
      if (e === null) throw new F('"omit" option can not be `null`');
      let r = [];
      for (let [n, i] of Object.entries(e)) {
        let o = Zd(n, t.runtimeDataModel);
        if (!o) {
          r.push({ kind: 'UnknownModel', modelKey: n });
          continue;
        }
        for (let [s, a] of Object.entries(i)) {
          let f = o.fields.find((w) => w.name === s);
          if (!f) {
            r.push({ kind: 'UnknownField', modelKey: n, fieldName: s });
            continue;
          }
          if (f.relationName) {
            r.push({ kind: 'RelationInOmit', modelKey: n, fieldName: s });
            continue;
          }
          typeof a != 'boolean' && r.push({ kind: 'InvalidFieldValue', modelKey: n, fieldName: s });
        }
      }
      if (r.length > 0) throw new F(Xd(e, r));
    },
    __internal: (e) => {
      if (!e) return;
      let t = ['debug', 'engine', 'configOverride'];
      if (typeof e != 'object')
        throw new F(`Invalid value ${JSON.stringify(e)} for "__internal" to PrismaClient constructor`);
      for (let [r] of Object.entries(e))
        if (!t.includes(r)) {
          let n = Bt(r, t);
          throw new F(
            `Invalid property ${JSON.stringify(r)} for "__internal" provided to PrismaClient constructor.${n}`
          );
        }
    },
  };
function Uu(e, t) {
  for (let [r, n] of Object.entries(e)) {
    if (!Du.includes(r)) {
      let i = Bt(r, Du);
      throw new F(`Unknown property ${r} provided to PrismaClient constructor.${i}`);
    }
    zd[r](n, t);
  }
  if (e.datasourceUrl && e.datasources)
    throw new F('Can not use "datasourceUrl" and "datasources" options at the same time. Pick one of them');
}
function Bt(e, t) {
  if (t.length === 0 || typeof e != 'string') return '';
  let r = Yd(e, t);
  return r ? ` Did you mean "${r}"?` : '';
}
function Yd(e, t) {
  if (t.length === 0) return null;
  let r = t.map((i) => ({ value: i, distance: (0, Lu.default)(e, i) }));
  r.sort((i, o) => (i.distance < o.distance ? -1 : 1));
  let n = r[0];
  return n.distance < 3 ? n.value : null;
}
function Zd(e, t) {
  return Nu(t.models, e) ?? Nu(t.types, e);
}
function Nu(e, t) {
  let r = Object.keys(e).find((n) => qe(n) === t);
  if (r) return e[r];
}
function Xd(e, t) {
  let r = At(e);
  for (let o of t)
    switch (o.kind) {
      case 'UnknownModel':
        (r.arguments.getField(o.modelKey)?.markAsError(),
          r.addErrorMessage(() => `Unknown model name: ${o.modelKey}.`));
        break;
      case 'UnknownField':
        (r.arguments.getDeepField([o.modelKey, o.fieldName])?.markAsError(),
          r.addErrorMessage(() => `Model "${o.modelKey}" does not have a field named "${o.fieldName}".`));
        break;
      case 'RelationInOmit':
        (r.arguments.getDeepField([o.modelKey, o.fieldName])?.markAsError(),
          r.addErrorMessage(() => 'Relations are already excluded by default and can not be specified in "omit".'));
        break;
      case 'InvalidFieldValue':
        (r.arguments.getDeepFieldValue([o.modelKey, o.fieldName])?.markAsError(),
          r.addErrorMessage(() => 'Omit field option value must be a boolean.'));
        break;
    }
  let { message: n, args: i } = gn(r, 'colorless');
  return `Error validating "omit" option:

${i}

${n}`;
}
u();
c();
p();
m();
d();
l();
function Fu(e) {
  return e.length === 0
    ? Promise.resolve([])
    : new Promise((t, r) => {
        let n = new Array(e.length),
          i = null,
          o = !1,
          s = 0,
          a = () => {
            o || (s++, s === e.length && ((o = !0), i ? r(i) : t(n)));
          },
          f = (w) => {
            o || ((o = !0), r(w));
          };
        for (let w = 0; w < e.length; w++)
          e[w].then(
            (v) => {
              ((n[w] = v), a());
            },
            (v) => {
              if (!Jn(v)) {
                f(v);
                return;
              }
              v.batchRequestIdx === w ? f(v) : (i || (i = v), a());
            }
          );
      });
}
var Je = J('prisma:client');
typeof globalThis == 'object' && (globalThis.NODE_CLIENT = !0);
var ef = { requestArgsToMiddlewareArgs: (e) => e, middlewareArgsToRequestArgs: (e) => e },
  tf = Symbol.for('prisma.client.transaction.id'),
  rf = {
    id: 0,
    nextId() {
      return ++this.id;
    },
  };
function qu(e) {
  class t {
    _originalClient = this;
    _runtimeDataModel;
    _requestHandler;
    _connectionPromise;
    _disconnectionPromise;
    _engineConfig;
    _accelerateEngineConfig;
    _clientVersion;
    _errorFormat;
    _tracingHelper;
    _middlewares = new Wn();
    _previewFeatures;
    _activeProvider;
    _globalOmit;
    _extensions;
    _engine;
    _appliedParent;
    _createPrismaPromise = vo();
    constructor(n) {
      ((e = n?.__internal?.configOverride?.(e) ?? e), ka(e), n && Uu(n, e));
      let i = new Tn().on('error', () => {});
      ((this._extensions = Ct.empty()),
        (this._previewFeatures = Hn(e)),
        (this._clientVersion = e.clientVersion ?? ku),
        (this._activeProvider = e.activeProvider),
        (this._globalOmit = n?.omit),
        (this._tracingHelper = vu()));
      let o = e.relativeEnvPaths && {
          rootEnvPath: e.relativeEnvPaths.rootEnvPath && Zr.resolve(e.dirname, e.relativeEnvPaths.rootEnvPath),
          schemaEnvPath: e.relativeEnvPaths.schemaEnvPath && Zr.resolve(e.dirname, e.relativeEnvPaths.schemaEnvPath),
        },
        s;
      if (n?.adapter) {
        s = n.adapter;
        let f = e.activeProvider === 'postgresql' || e.activeProvider === 'cockroachdb' ? 'postgres' : e.activeProvider;
        if (s.provider !== f)
          throw new L(
            `The Driver Adapter \`${s.adapterName}\`, based on \`${s.provider}\`, is not compatible with the provider \`${f}\` specified in the Prisma schema.`,
            this._clientVersion
          );
        if (n.datasources || n.datasourceUrl !== void 0)
          throw new L(
            'Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.',
            this._clientVersion
          );
      }
      let a = e.injectableEdgeEnv?.();
      try {
        let f = n ?? {},
          w = f.__internal ?? {},
          v = w.debug === !0;
        v && J.enable('prisma:client');
        let A = Zr.resolve(e.dirname, e.relativePath);
        (ns.existsSync(A) || (A = e.dirname),
          Je('dirname', e.dirname),
          Je('relativePath', e.relativePath),
          Je('cwd', A));
        let R = w.engine || {};
        if (
          (f.errorFormat
            ? (this._errorFormat = f.errorFormat)
            : g.env.NODE_ENV === 'production'
              ? (this._errorFormat = 'minimal')
              : g.env.NO_COLOR
                ? (this._errorFormat = 'colorless')
                : (this._errorFormat = 'colorless'),
          (this._runtimeDataModel = e.runtimeDataModel),
          (this._engineConfig = {
            cwd: A,
            dirname: e.dirname,
            enableDebugLogs: v,
            allowTriggerPanic: R.allowTriggerPanic,
            prismaPath: R.binaryPath ?? void 0,
            engineEndpoint: R.endpoint,
            generator: e.generator,
            showColors: this._errorFormat === 'pretty',
            logLevel: f.log && Cu(f.log),
            logQueries:
              f.log &&
              !!(typeof f.log == 'string'
                ? f.log === 'query'
                : f.log.find((C) => (typeof C == 'string' ? C === 'query' : C.level === 'query'))),
            env: a?.parsed ?? {},
            flags: [],
            engineWasm: e.engineWasm,
            compilerWasm: e.compilerWasm,
            clientVersion: e.clientVersion,
            engineVersion: e.engineVersion,
            previewFeatures: this._previewFeatures,
            activeProvider: e.activeProvider,
            inlineSchema: e.inlineSchema,
            overrideDatasources: Da(f, e.datasourceNames),
            inlineDatasources: e.inlineDatasources,
            inlineSchemaHash: e.inlineSchemaHash,
            tracingHelper: this._tracingHelper,
            transactionOptions: {
              maxWait: f.transactionOptions?.maxWait ?? 2e3,
              timeout: f.transactionOptions?.timeout ?? 5e3,
              isolationLevel: f.transactionOptions?.isolationLevel,
            },
            logEmitter: i,
            isBundled: e.isBundled,
            adapter: s,
          }),
          (this._accelerateEngineConfig = {
            ...this._engineConfig,
            accelerateUtils: {
              resolveDatasourceUrl: Ut,
              getBatchRequestPayload: It,
              prismaGraphQLToJSError: Cn,
              PrismaClientUnknownRequestError: oe,
              PrismaClientInitializationError: L,
              PrismaClientKnownRequestError: X,
              debug: J('prisma:client:accelerateEngine'),
              engineVersion: Vu.version,
              clientVersion: e.clientVersion,
            },
          }),
          Je('clientVersion', e.clientVersion),
          (this._engine = du(e, this._engineConfig)),
          (this._requestHandler = new Yn(this, i)),
          f.log)
        )
          for (let C of f.log) {
            let D = typeof C == 'string' ? C : C.emit === 'stdout' ? C.level : null;
            D &&
              this.$on(D, (I) => {
                Kt.log(`${Kt.tags[D] ?? ''}`, I.message || I.query);
              });
          }
      } catch (f) {
        throw ((f.clientVersion = this._clientVersion), f);
      }
      return (this._appliedParent = mr(this));
    }
    get [Symbol.toStringTag]() {
      return 'PrismaClient';
    }
    $use(n) {
      this._middlewares.use(n);
    }
    $on(n, i) {
      return (n === 'beforeExit' ? this._engine.onBeforeExit(i) : n && this._engineConfig.logEmitter.on(n, i), this);
    }
    $connect() {
      try {
        return this._engine.start();
      } catch (n) {
        throw ((n.clientVersion = this._clientVersion), n);
      }
    }
    async $disconnect() {
      try {
        await this._engine.stop();
      } catch (n) {
        throw ((n.clientVersion = this._clientVersion), n);
      } finally {
        ts();
      }
    }
    $executeRawInternal(n, i, o, s) {
      let a = this._activeProvider;
      return this._request({
        action: 'executeRaw',
        args: o,
        transaction: n,
        clientMethod: i,
        argsMapper: To({ clientMethod: i, activeProvider: a }),
        callsite: je(this._errorFormat),
        dataPath: [],
        middlewareArgsMapper: s,
      });
    }
    $executeRaw(n, ...i) {
      return this._createPrismaPromise((o) => {
        if (n.raw !== void 0 || n.sql !== void 0) {
          let [s, a] = $u(n, i);
          return (
            Po(
              this._activeProvider,
              s.text,
              s.values,
              Array.isArray(n) ? 'prisma.$executeRaw`<SQL>`' : 'prisma.$executeRaw(sql`<SQL>`)'
            ),
            this.$executeRawInternal(o, '$executeRaw', s, a)
          );
        }
        throw new ne(
          "`$executeRaw` is a tag function, please use it like the following:\n```\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\n```\n\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\n",
          { clientVersion: this._clientVersion }
        );
      });
    }
    $executeRawUnsafe(n, ...i) {
      return this._createPrismaPromise(
        (o) => (
          Po(this._activeProvider, n, i, 'prisma.$executeRawUnsafe(<SQL>, [...values])'),
          this.$executeRawInternal(o, '$executeRawUnsafe', [n, ...i])
        )
      );
    }
    $runCommandRaw(n) {
      if (e.activeProvider !== 'mongodb')
        throw new ne(`The ${e.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, {
          clientVersion: this._clientVersion,
        });
      return this._createPrismaPromise((i) =>
        this._request({
          args: n,
          clientMethod: '$runCommandRaw',
          dataPath: [],
          action: 'runCommandRaw',
          argsMapper: fu,
          callsite: je(this._errorFormat),
          transaction: i,
        })
      );
    }
    async $queryRawInternal(n, i, o, s) {
      let a = this._activeProvider;
      return this._request({
        action: 'queryRaw',
        args: o,
        transaction: n,
        clientMethod: i,
        argsMapper: To({ clientMethod: i, activeProvider: a }),
        callsite: je(this._errorFormat),
        dataPath: [],
        middlewareArgsMapper: s,
      });
    }
    $queryRaw(n, ...i) {
      return this._createPrismaPromise((o) => {
        if (n.raw !== void 0 || n.sql !== void 0) return this.$queryRawInternal(o, '$queryRaw', ...$u(n, i));
        throw new ne(
          "`$queryRaw` is a tag function, please use it like the following:\n```\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\n```\n\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\n",
          { clientVersion: this._clientVersion }
        );
      });
    }
    $queryRawTyped(n) {
      return this._createPrismaPromise((i) => {
        if (!this._hasPreviewFlag('typedSql'))
          throw new ne('`typedSql` preview feature must be enabled in order to access $queryRawTyped API', {
            clientVersion: this._clientVersion,
          });
        return this.$queryRawInternal(i, '$queryRawTyped', n);
      });
    }
    $queryRawUnsafe(n, ...i) {
      return this._createPrismaPromise((o) => this.$queryRawInternal(o, '$queryRawUnsafe', [n, ...i]));
    }
    _transactionWithArray({ promises: n, options: i }) {
      let o = rf.nextId(),
        s = Au(n.length),
        a = n.map((f, w) => {
          if (f?.[Symbol.toStringTag] !== 'PrismaPromise')
            throw new Error(
              'All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.'
            );
          let v = i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel,
            A = { kind: 'batch', id: o, index: w, isolationLevel: v, lock: s };
          return f.requestTransaction?.(A) ?? f;
        });
      return Fu(a);
    }
    async _transactionWithCallback({ callback: n, options: i }) {
      let o = { traceparent: this._tracingHelper.getTraceParent() },
        s = {
          maxWait: i?.maxWait ?? this._engineConfig.transactionOptions.maxWait,
          timeout: i?.timeout ?? this._engineConfig.transactionOptions.timeout,
          isolationLevel: i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel,
        },
        a = await this._engine.transaction('start', o, s),
        f;
      try {
        let w = { kind: 'itx', ...a };
        ((f = await n(this._createItxClient(w))), await this._engine.transaction('commit', o, a));
      } catch (w) {
        throw (await this._engine.transaction('rollback', o, a).catch(() => {}), w);
      }
      return f;
    }
    _createItxClient(n) {
      return Pe(
        mr(
          Pe(ya(this), [
            le('_appliedParent', () => this._appliedParent._createItxClient(n)),
            le('_createPrismaPromise', () => vo(n)),
            le(tf, () => n.id),
          ])
        ),
        [St(xa)]
      );
    }
    $transaction(n, i) {
      let o;
      typeof n == 'function'
        ? this._engineConfig.adapter?.adapterName === '@prisma/adapter-d1'
          ? (o = () => {
              throw new Error(
                'Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.'
              );
            })
          : (o = () => this._transactionWithCallback({ callback: n, options: i }))
        : (o = () => this._transactionWithArray({ promises: n, options: i }));
      let s = { name: 'transaction', attributes: { method: '$transaction' } };
      return this._tracingHelper.runInChildSpan(s, o);
    }
    _request(n) {
      n.otelParentCtx = this._tracingHelper.getActiveContext();
      let i = n.middlewareArgsMapper ?? ef,
        o = {
          args: i.requestArgsToMiddlewareArgs(n.args),
          dataPath: n.dataPath,
          runInTransaction: !!n.transaction,
          action: n.action,
          model: n.model,
        },
        s = {
          middleware: { name: 'middleware', middleware: !0, attributes: { method: '$use' }, active: !1 },
          operation: {
            name: 'operation',
            attributes: { method: o.action, model: o.model, name: o.model ? `${o.model}.${o.action}` : o.action },
          },
        },
        a = -1,
        f = async (w) => {
          let v = this._middlewares.get(++a);
          if (v) return this._tracingHelper.runInChildSpan(s.middleware, (_) => v(w, (be) => (_?.end(), f(be))));
          let { runInTransaction: A, args: R, ...C } = w,
            D = { ...n, ...C };
          (R && (D.args = i.middlewareArgsToRequestArgs(R)),
            n.transaction !== void 0 && A === !1 && delete D.transaction);
          let I = await Aa(this, D);
          return D.model
            ? Ea({
                result: I,
                modelName: D.model,
                args: D.args,
                extensions: this._extensions,
                runtimeDataModel: this._runtimeDataModel,
                globalOmit: this._globalOmit,
              })
            : I;
        };
      return this._tracingHelper.runInChildSpan(s.operation, () => f(o));
    }
    async _executeRequest({
      args: n,
      clientMethod: i,
      dataPath: o,
      callsite: s,
      action: a,
      model: f,
      argsMapper: w,
      transaction: v,
      unpacker: A,
      otelParentCtx: R,
      customDataProxyFetch: C,
    }) {
      try {
        n = w ? w(n) : n;
        let D = { name: 'serialize' },
          I = this._tracingHelper.runInChildSpan(D, () =>
            En({
              modelName: f,
              runtimeDataModel: this._runtimeDataModel,
              action: a,
              args: n,
              clientMethod: i,
              callsite: s,
              extensions: this._extensions,
              errorFormat: this._errorFormat,
              clientVersion: this._clientVersion,
              previewFeatures: this._previewFeatures,
              globalOmit: this._globalOmit,
            })
          );
        return (
          J.enabled('prisma:client') &&
            (Je('Prisma Client call:'),
            Je(`prisma.${i}(${sa(n)})`),
            Je('Generated request:'),
            Je(
              JSON.stringify(I, null, 2) +
                `
`
            )),
          v?.kind === 'batch' && (await v.lock),
          this._requestHandler.request({
            protocolQuery: I,
            modelName: f,
            action: a,
            clientMethod: i,
            dataPath: o,
            callsite: s,
            args: n,
            extensions: this._extensions,
            transaction: v,
            unpacker: A,
            otelParentCtx: R,
            otelChildCtx: this._tracingHelper.getActiveContext(),
            globalOmit: this._globalOmit,
            customDataProxyFetch: C,
          })
        );
      } catch (D) {
        throw ((D.clientVersion = this._clientVersion), D);
      }
    }
    $metrics = new Rt(this);
    _hasPreviewFlag(n) {
      return !!this._engineConfig.previewFeatures?.includes(n);
    }
    $applyPendingMigrations() {
      return this._engine.applyPendingMigrations();
    }
    $extends = ha;
  }
  return t;
}
function $u(e, t) {
  return nf(e) ? [new me(e, t), xu] : [e, Pu];
}
function nf(e) {
  return Array.isArray(e) && Array.isArray(e.raw);
}
u();
c();
p();
m();
d();
l();
var of = new Set([
  'toJSON',
  '$$typeof',
  'asymmetricMatch',
  Symbol.iterator,
  Symbol.toStringTag,
  Symbol.isConcatSpreadable,
  Symbol.toPrimitive,
]);
function Bu(e) {
  return new Proxy(e, {
    get(t, r) {
      if (r in t) return t[r];
      if (!of.has(r)) throw new TypeError(`Invalid enum value: ${String(r)}`);
    },
  });
}
u();
c();
p();
m();
d();
l();
l();
0 &&
  (module.exports = {
    DMMF,
    Debug,
    Decimal,
    Extensions,
    MetricsClient,
    PrismaClientInitializationError,
    PrismaClientKnownRequestError,
    PrismaClientRustPanicError,
    PrismaClientUnknownRequestError,
    PrismaClientValidationError,
    Public,
    Sql,
    createParam,
    defineDmmfProperty,
    deserializeJsonResponse,
    deserializeRawResult,
    dmmfToRuntimeDataModel,
    empty,
    getPrismaClient,
    getRuntime,
    join,
    makeStrictEnum,
    makeTypedQueryFactory,
    objectEnumValues,
    raw,
    serializeJsonQuery,
    skip,
    sqltag,
    warnEnvConflicts,
    warnOnce,
  });
//# sourceMappingURL=wasm-compiler-edge.js.map
